= Viscosity =

:vimeo: Viscosity with slippage
    #id: 204584735

Viscosity is the "thickness" of a fluid. For example, water has low viscosity, honey has higher viscosity, and raw bread dough has very high viscosity.

[Anim:/images/dynamics/viscosity.gif]

By default, FLIP fluids have no viscosity. These parameters let you add _uniform viscosity_ or _varying viscosity_ across the fluid.

TIP:
    The value of the __Viscosity__ parameter depends on the scale of the particles. At the default scale, you will need values around 1000 for a thick fluid, and around 10000 for a doughy fluid.

:task:Set the uniform viscosity of a FLIP fluid object:
    In the [FLIP Solver node|Node:dop/flipsolver] parameters, click the __Volume Motion > Viscosity__ sub-tab, then turn on __Enable Viscosity__. Then in the [FLIP object|Node:dop/flipobject] parameters, click the __Physical__ tab and set the __Viscosity__.
    
    _or_
    
    Use the [Icon:SHELF/pour][Make Viscous tool|/shelf/makeviscous] on the __Particle Fluids__ shelf tab. This tool does the above steps on the selected particle fluid object automatically, and sets the initial value of the __Viscosity__ parameter of the object based on the object's scale.

:task:Simulate varying viscosity:
    You can use a per-particle viscosity attribute to control a varying viscosity field.
    
    # In the [FLIP Solver node|Node:dop/flipsolver] parameters, click the __Volume Motion > Viscosity__ sub-tab, then turn on __Enable Viscosity__ and __Viscosity by attribute__. The default attribute name is `viscosity` but you can change it as well scaling the value and controlling how the value of the attribute affects existing viscosity values using the other parameters on the __Viscosity__ sub-tab.

    _or_
    
    If you override the __Viscosity__ field through the __Volume Velocity__
    input to the FLIP Solver, you can arbitrarily edit the viscosity
    field.


== Viscosity tips ==

If __Under-Resolved Particles__ is set to __Treat as Ballistic__,
the FLIP Solver will detect particles that are leaving the surface
and are too small to be resolved on the grid and treat them
ballistically. This works well for fluid with no viscosity, but for
viscous liquids it can lead to particles creeping off the surface
even with very high viscosity.  Setting the __Under-Resolved
Particles__ method to __No Detection__ turns off this behavior and
should stop particle creep.

However, if your sim is only slightly viscous, individual flying
particles might freeze in air if they are too small to be resolved
on the grid. Increasing the __Particle Radius Scale__ on the [FLIP
Object|Node:dop/flipobject] to >= sqrt(3) or decreasing the __Grid
Scale__ to about 1.4 should alleviate this problem.

The FLIP Solver computes the number of substeps to calculate based
on velocity. While the viscosity solver should always be stable, it
will be more accurate with smaller substeps. A slow moving, highly
viscous sim might need more substeps than the 1 that the FLIP Solver
will give it based on its velocity. Increase __Minimum Substeps__
until you get sufficient viscosity.

__Metaballs__ might provide better results than __Average Position__
for surfacing goopy, viscous fluids with the [Particle Fluid Surface
SOP|Node:sop/particlefluidsurface].

When surfacing very slow moving viscous particles, occasionally
particles newly introduced by the reseeding process can be apparent.
Turning off __Reseeding__ should alleviate this problem.

The __Surface__ visualization on the [FLIP
Object|Node:dop/flipobject] can be a good way to preview viscosity
sims.

Choosing Float 32-bit for the precision on the __Viscosity__ tab will speed
up the viscosity solver and is sufficient accuracy for most simulations.
If you have a fast GPU, enabling OpenCL acceleration via the __Use OpenCL__
parameter on the __Solver__ tab can further accelerate high resolution simulations
of viscous fluids.