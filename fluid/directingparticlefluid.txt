= Directing particle fluids =

NOTE:
    The best results come when you can create the look you want just by setting up the initial conditions, rather than by trying to direct the fluid. In many cases, the more control you try to take during animation, the less the results look like water.

=== Using normal DOP forces ===

The DOP forces on the __Drive Simulation__ shelf tab, such as the [Fan force|Node:dop/fan], work with particle fluids.

The nice feature of using DOP forces is that you can use the same force or forces to affect all different types of simulation objects, keeping everything consistent. Using forces is also more straightforward than editing velocities directly with particle nodes or field DOPs.

* The [Field Force|Node:dop/fieldforce] lets you import point velocities from SOP geometry and apply them to the motion of simulation objects. This lets you "sculpt" velocity (`v`) attributes on a point cloud to control the motion of a particle fluid.

    (The Field Force can also use SOP volume primitives. If you import a scalar volume, it will use the gradient as the velocity. If you import a vector volume, it will use the vectors.)
    
    You can even write out velocity fields _generated by a particle fluid simulation_, then read them back in and apply them to another simulation using a Field Force, using the force scale to dial up or down the influence of the first simulation.

* You can use the [Icon:DOP/magnetforce] [Node:dop/magnetforce] to attract or repel simulation objects to/from metaball objects. See the [magnet force help|Node:dop/magnetforce] for how to use it.

<!--
    {Pic}
-->


* Whenever you add forces, you often want to add a [Drag force|Node:dop/drag] to keep the forces from building up to unrealistic speeds.

=== Using a particle network === (direct_pops)

NOTE:
    Using a POP solver involves copying the points into a particle system primitive. This can be slow for very large FLIP simulations. To work with large numbers of particles efficiently, you can a [VOP SOP|Node:sop/vopsop]/[VEX SOP|Node:sop/vex] and/or the [Solver SOP|Node:sop/solver] to direct the particles in SOPs instead of POPs.

You can connect a [POP Solver node|Node:dop/popsolver] to the FLIP Solver node's second ("Particle velocities") input. This lets you use POP nodes to affect the behavior of the fluid.

Double-click the POP solver node to go to the particle network inside and add POP nodes to change the behavior of the fluid.

When using FLIP fluids you can use POPs that create and delete particles as well as change their motion.

The POP solver runs before the project-non-divergent step, so you can't use POPs to add a high amount of divergence (for example an explosion).

* One useful particle node to use in FLIP fluid simulations is [Curl Noise|Node:pop/curlnoise]. Curl Noise is divergence free noise. This type of noise works very predictably with the FLIP solver which contains a Gas Project Non-Divergence DOP.

* There are a few different ways to create attractor forces in POPs. They all work quite well in FLIP simulations.
    
    For example, you can draw a curve, use a [Point SOP|Node:sop/point] to add force attributes to the curve, then use an [Attractor POP|Node:pop/attractor] with the curve set as the attractor to pull the fluid particles along the curve. With an animated attractor curve this can create very interesting effects.
    
<!--
    {Pic}
-->


* Advanced: you can control the bias between velocities generated by the POP solver and velocities generated by the gas projection step for FLIP fluids.

    On the FLIP solver's __Volume Motion__ tab, turn on __Force Override__. Then in the POP solver network, you can set the `ballistic` attribute on particles. This is a scale on the strength of the forces created by the particle network, from `0` (full FLIP) to `1` (particle network forces only).
    
    (Note that setting `ballistic` to `1` on a particle means that DOP forces will have _no effect_ on the particle, since it is being driven only by the particle network.

* Advanced: you can turn on __Divergence by Attribute__ in the FLIP solver's __Volume Motion > Divergence__ sub-tab to be able to set the divergence value in the particle network using the `divergence` attribute.

=== Editing the velocity field ===

NOTE:
    Instead of editing the velocity field with DOPs, you should consider whether you can get the effect you want using regular DOP forces, which are much more straightforward to work with and you can apply to all simulation objects. The [Field Force|Node:dop/fieldforce] especially gives you a great amount of low-level control without having to mess with one solver's fields directly.

You can connect DOPs that modify volumes to the FLIP solver's third ("Volume velocities") input to run them on the velocity field at each step. For example, connect a [Gas Vortex Confinement DOP|Node:dop/gasvortexconfinement] to make the fluid more swirly.

NOTE:
    You cannot affect the velocities by modifying the object's velocity field from another DOP in the network, since the solver recreates the field at every time step. You must attach DOPs to the volume input of the solver for them to work.

The [Gas Calculate DOP|Node:dop/gascalculate] may be useful for composing other fields into the `vel` (velocity) field.

The FLIP solver creates the velocity field at each time step, as well as a surface sign distance field. You can also set up the solver to create pressure and divergence fields. You can use these fields to calculate your changes to the `vel` field.