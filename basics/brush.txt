= Brush tools =

== Overview ==

Various tools in Houdini use a "brush" interface that lets you interactively paint attribute values onto models using a mouse or tablet. This page documents the common brush-related interface elements in those tools.

=== Model shelf tab ===
#display: pull left

* [Sculpt|/shelf/sculpt] lets you interactive raise, lower, and/or smooth a surface by brushing over it.

* [UV Brush|/shelf/uvbrush] lets you move UVs by brushing.
    
=== Character shelf tab ===
#display: pull left

* [Paint Capture Layer|/shelf/paintcapturelayer] lets you edit [capture weights|/character/captureregions] on skin geometry by painting.

* [Comb|/shelf/comb] lets you change the direction of normals or attributes by brushing.
    
=== Geometry nodes ===
#display: pull left

* The [Edit node|Node:sop/edit] lets you interactively reshape geometry by painting.

* The [Paint node|Node:sop/paint] lets you interactively paint color _or any other_ attributes onto geometry points.
    
==Brush basics ==

* A red circle shows the position, orientation, and size of the brush on the surface.

  [Image:/images/brush.png]

* Right-click to choose which functions to assign to ((LMB)) and ((MMB)).

  For example, in the [Paint node|Node:sop/paint] you can change a button from painting color to the eyedropper. In the [Edit SOP|Node:sop/edit], you can change a button from displacing points to smoothing.

  You can also choose an "erase changes" brush which, instead of modifying the surface, tends to put it back to its original state.

  See how to assign hotkeys to brush types below.

* Hold ((Shift)) and drag to change the size of the brush.

* Use the controls in the [operation controls toolbar|/basics/ui] or [parameter editor|/ref/panes/parms] to set the options of the brush operator/tool you are using.

  For example, the operation control toolbar for the [Paint node|Node:sop/paint] has color swatches for the "foreground" (((LMB))) and "background" (((MMB))) colors and transparency.

* By default, Houdini orients the brush to the surface normals. To orient the brush to the view instead, right-click and turn off __Orient Brush to Surface__.

  This is useful when you want to edit points or apply paint based on your view rather than the current shape of the surface. It's also useful if positioning the brush on a complex or folded surface becomes frustrating.

== Painting symmetrically ==

The controls on the __Symmetry__ tab let you automatically paint on both sides of a symmetrical model.


TIP:
    The [Edit node|Node:sop/edit] does not include the symmetry controls. Use the [Sculpt node|Node:sop/sculpt] instead if you want to edit points with a symmetrical brush.


:task:Reflect strokes across an axis of symmetry:
    # In the __Symmetry__ tab, turn on __Reflective__.

    # The __Axis__ and __Origin__ parameters let you set up the axis of symmetry. To set them using handles, use the handle icons in the handle list (on the selection toolbar on the left side of the viewer pane, below the divider) to show the hidden symmetry plane handles.

      [Image:/images/ui/edit_toolbar.png]
      [Image:/images/brush_symhandles.png]

    # Click the icons again to hide the handles when you're done setting the symmetry plane.

    # Paint on the surface. Houdini duplicates your strokes across the axis of symmetry.

:task:Reflect strokes around an axis of radial symmetry:
    # In the __Symmetry__ tab, turn on __Rotational__ and set the __Number of rotations__ parameter.

    # The __Axis__ and __Origin__ parameters let you set up the axis of symmetry. To set them using handles, use the handle icons in the handle list (on the selection toolbar on the left side of the viewer pane, below the divider) to show the hidden symmetry plane handles.

      [Image:/images/ui/edit_toolbar.png]
      [Image:/images/brush_rothandles.png]

    # Click the icons again to hide the handles when you're done setting the symmetry plane.

    # Paint on the surface. Houdini duplicates your strokes around the axis of symmetry.

      In this example, the __Number of rotations__ parameter is 8:
              
      [Image:/images/brush_rotational.png]

== Common brush parameters ==
    
    == Brush tab ==
    
        Shape:
            Choose Circle, Square, or Bitmap. The __Radius__ parameter sets the radius of the circle or half the diagonal length of the square or bitmap. The __Bitmap__ parameter lets you specify the file path to the image you want to use as a custom brush shape.
    
            If you choose bitmap, the intensity of the bitmap pixels controls the strength of the effect when you put down a stroke. For example, if you are using the [Paint SOP|Node:sop/paint] to apply color, it applies more color where the bitmap is brighter.
    
        Bitmap:
            File path of the image you want to use as a custom brush shape. Use `op:<<path_to_node>> ` to get the image from a [Compositing|Node:cop2/composite]  node.
            
        Bitmap Channel:
            Houdini uses the alpha channel of the image to determine the custom brush shape, but not all bitmaps have an alpha channel. This image lets you interpret the bitmap as a grayscale image by reading the red, green, blue, or luminance.
            
        Radius:
            The size of the brush, in Houdini units. When __Shape__ is circle this is the radius. When __Shape__ is square or bitmap, this is half of the diagonal length.
            
        UV Radius:
            The size of the brush in the UV viewport. See __Radius__.
            
        Radius Pressure:
            Controls how much the radius will vary with pressure sensitivity of a tablet. See __Opacity Pressure__.
            
        NOTE:
            Two radii are used so you can brush in both viewports at once, since they are usually in different scale.
            
        Depth:
            If set, this limits how far the brush will paint along its axis. This can be used if connectivity is disabled to limit the effect of the brush. The first parameter is how deep below the surface the brush should penetrate. The second is how high above the surface it should stop. These values can be negative.
            
        Brush Angle:
            Cant the brush's default orientation to create a calligraphy effect. This does nothing to the default circular brush, but will affect a square, bitmap, or squashed circular brush.
            
        Brush Squash:
            Scale the brush shape to make it thin in one direction. The default is in the Y direction. To squash in the X direction, rotate the Brush Angle by 90 degrees.
            
        Opacity:
            Global opacity scale for the brush. 0 = fully transparent, 1 = fully opaque.
        
        Opacity Pressure:
            This controls the how much effect the pressure of a stylus will have on the opacity. It obeys the same scaling as the __Radius Pressure__.
            
        Brush splatter:
            Adds noise into the opacity of the brush so the amount of paint applied is not uniform across the brush shape. Use a number between 0 and 1. Higher numbers add more noise, creating a spray paint effect.
    
            Houdini multiplies the opacity of each point in the brush's space by a random number between `1` and `1 - <<splatter>> `.
    
        Paper grain:
            Makes points on the surface randomly more resistant to the effect of brushing. Creates a similar effect to __Brush splatter__.
    
            Houdini assigns point on the surface to be brushed is assigned a random number between `1` and `1 - <<grain>> `. This value is multiplied by the opacity of the brush (taking into account __Brush splatter__) to get the final opacity of the paint. The effect of this is to make some random points "stickier" than other points. Because this stickiness is independent of the brush's position, you will note that some points are slower to be painted than others. This gives a noisy grain to the object itself. With a Paper Grain of 1, you will find some points never acquire the painted color.
    
        Soft Edge:
            Gives circle and square brushes soft, blurred edges. Use a number between 0 and 1, representing the percentage of the total brush size that is roll off. Higher numbers give softer edges. The default is 1 (only the very center of the brush is opaque, the rest is roll off). The __Kernel function__ parameter controls the speed of the roll-off.
    
            This option only applies to the Square and Circle brushes. For bitmap brushes, you can give them a soft edge as part of the image (for example by filter the image with a Gaussian blur).
    
            For example: A brush of radius 0.1 and Soft Edge 0.5 will have full opacity up to a distance of 0.05 from the center. From there to the edge (distance 0.1) the opacity will drop off according to the fall off function. For an entirely hard brush (points are either full opacity or zero opacity) set the Soft Edge to 0.
    
        Kernel Function:
            Choose a [density function|/shelf/metaball] to control the roll off of the soft edge.
            
        Up-Vector Type:
            When set to "stroke direction" (the default), non-circular brushes orient themselves in the direction of the stroke. When set to "fixed", the brush always maintains the orientation set by the __Up-vector__ parameter below, regardless of stroke direction.
            
        Up-Vector:
            When __Up-vector type__ above is "Fixed", this is global orientation for the brush.
            
    == Stroke tab ==
    
        The fields on this tab (below the checkboxes) are read-only indications of the current state of your stroke. You can use them to inspect the geometry under your brush.
    
        Orient Brush To Surface:
            By default, Houdini orients the brush to the surface normals. To orient the brush to the view instead, turn off __Orient brush to surface__.
    
            This is useful when you want to edit points or apply paint based on your view rather than the current shape of the surface. It's also useful if positioning the brush on a complex or folded surface becomes frustrating.
    
        Use Connectivity:
            If set, the tool will only affect points connected to the closest point to the intersection. This is usually a good thing, as it avoids accidentally painting through the geometry (but see the depth parameter), but can prevent smoothly painting across seams.
 
        Realtime Mode:
            Applies changes _as you brush_ (that is, while you are still holding the mouse button down) instead of at the end of each stroke. This is less efficient, but lets you do things like paint on surfaces while playing the animation.
            
        Direction:
            Normal on the hit geometry at the current brush position.
            
        Hit Location:
            Position in space where the brush contacted the hit geometry.
            
        Hit Primitive:
            Primitive number at the current brush position.
            
        Hit UV:
            Parametric coordinates where the brush contacted the hit geometry. This is the UV coordinates used to evaluate the surface with a prim call, _not_ any "uv" texture coordinates that may be present.
            
        Hit Pressure:
            The amount of force the brush is currently applying. This is only meaningful when a tablet interface that supports pressure is used.
        
        Hit Point:
            The point closest to the current brush's center.
            
        Event:
            Internal indicator of the current drawing mode.

== Accumulate to stencil ==

Sometimes, such as when trying to sculpt some letters out of a grid, you want several individual strokes to count as a single stroke. Because some letters are made up of more than one stroke, you don't want the strokes to "overlap". To accomplish this, you can turn on the __Accumulate to stencil__ in the __Operations__ tab of a brush-based operator/tool or in the ((RMB)) tool menu.

Off (default) ||
    Each stroke changes the base surface immediately, so that the stroke becomes part of the base surface.

    In this example, __Accumulate to stencil__ is off, so the second stroke raises up over the first stroke:

    [Image:/images/brush_accumulate_off.png]

On ||
    Each stroke modifies the base surface, but is not added to the base surface until you apply the stencil.

    In this example, __Accumulate to stencil__ is on, so both strokes modify the _original base surface_; the second stroke does not interact with the first stroke:

    [Image:/images/brush_accumulate_on.png]

* To apply an accumulated stencil, click ((RMB)) in the viewer, or click __Apply and clear stencil__ on the __Operations__ tab in the parameter editor.

* Houdini does _not_ save the stencil with the SOP. If you have an unapplied stencil when you quit, the unapplied changes are lost.

* The stencil only works with one operation. For example, you can't combine a smooth and a paint in one stencil. If you change the operation, you'll change all the stokes accumulated in the stencil.

* Unlike the normal mode where ((LMB)) means the foreground operation and ((MMB)) the background operation, when __Accumulate to stencil__ is on ((LMB)) adds to the stencil and the ((MMB)) removes from it.

* When __Accumulate to stencil__ is on and you are creating a stencil, the dot at the center of the brush indicator is solid red.

* While you are accumulating to a stencil, you can change the parameters for the stencil. For example, in the [Edit SOP|Node:sop/edit] you can change the foreground displacement (FD) and the displacement of all the accumulated strokes will change.
  
== Assign hotkeys to brush types. ==

You can assign hotkeys to brush types so you can switch to that brush type without having to use the ((RMB)) menu while painting.

steps>>
    # While using a brush operator/tool, press ((RMB)) to open the tool menu.

    # Move the mouse over the brush type you want to assign a hotkey to.

    # While still holding ((RMB)), hold ((Ctrl + Alt + Shift)), then release ((RMB))*.

    # Use the [hotkey editor|/ref/windows/hotkey] to assign a hotkey to the brush type.

* Look on the bright side, you won't hit that by accident!

== Tips ==

* Like the [Edit SOP|Node:sop/edit], brush nodes store multiple operations in a single node.

* All brush operators use a stencil metaphor. As you brush over points, you assign values to the points between 1 (full effect) and 0 (no effect). For example, with a brush with soft edges, points near the center of the brush will get a greater effect than points near the edges. Then Houdini scales the operation (paint, smooth, displace points, whatever) by the stencil weights.

* Brush operators all operate on points. So, if you paint over the center of a polygon and don't touch its points, the stroke will have no effect on the polygon.

* For NURBS and Bezier surfaces, Houdini uses the breakpoints instead of the control vertices (CVs), because breakpoints are on-surface and CVs are usually off-surface. This can help explain some potential problems with brushes. If you aren't sure why something is or isn't painting, turn on point display to see the relevant points involved.

* Brush nodes store the deltas between the input points and the output points, not the brush strokes. This means if the input geometry is animated, you usually get the correct result, however the point numbers must remain the same (changes to point topology will make a brush node apply its changes to the wrong points).

