= Radial menus =

"""Radial menus give you quick access to commonly used features in the viewer."""

[Image:/images/ui/radial_menu.jpg]

== Using radial menus ==

By default, Houdini assigns radial menus to three hotkeys. You can [assign radial menus to other hotkeys|hotkeys#radials] in the [hotkey editor|hotkeys#radials].

Key ||
    Menu type ||

((X)) |
    Snapping controls

((C)) |
    [Custom|#custom]. You can choose the menu on this key using the [Icon:BUTTONS/radialset] Radial switching menu.

((V)) |
    View controls

You can interact with the menus in three different ways. Different people may be more comfortable with one interaction style than the others, and different styles may be more appropriate for different input devices.

* *Hold the key* to show the menu, then move the mouse to choose a menu item and *release the key*.
    #glyph: fa-crosshairs

* *Tap the key* to show the menu, then move the mouse to choose a menu item and *click*.
    #glyph: fa-crosshairs

* *Press the key and start dragging* the mouse, then move the mouse to choose a menu item and *release the mouse button*.
    #glyph: fa-crosshairs

    This style may work best if you're used to marking menus, or if you're using a tablet.
    
    ~~~~

* Click inside the circle or press ((Esc)) to cancel the menu.

* When the menu is open you can use the *number pad keys* (1-9) to "select" different directions on the current menu rather than using the mouse.
    #glyph: fa-compass


== Custom menu == (custom)

Houdini associates a custom menu with each [desktop|panes]. For example, if you switch to the Modeling desktop, the ((C)) key will show a menu with modeling tools. The generic Build desktop has a menu with lots of generally useful tools.

You can also switch to different menus at any time using the [Icon:BUTTONS/radialset] Radial switching menu. For example, there are specialized modeling menus for curve modeling, polygonal modeling, and UV Editing.

Normally when you switch desktops, Houdini switches the ((C)) key to the custom radial menu associated with that desktop. You can "pin" the current radial menu so it doesn't change with the desktop by opening the Radial switching menu and turning on __Pin current menu__ at the bottom.


== Creating and editing menus ==


=== Opening the editor ===

:task: Edit a menu:
    # Use the Radial switching menu to switch to the menu you want to edit.

    # Open the Radial switching menu again and choose __Edit current__ to open the editor.
    
    Edit the menu items (see below) and then click __Apply__ to update the menu, or __Accept__ to update the menu and close the editor.

:task: Create a new menu:
    # Open the Radial switching menu and choose __Create new__ to start a new menu.
    
    # In the editor, set the __Name__ to a short internal name for the menu. This string cannot have spaces. It will be used for scripting and to build the filename when the menu is saved.
    
    # Set the __Label__ to the "human readable" name for the menu. This label will appear in the radial switcher menu.
    
    Edit the menu items (see below) and then click __Apply__ to update the menu, or __Accept__ to update the menu and close the editor.


=== Editing menus ===

:task: Create a menu item that invokes a shelf tool:
    # Click the __Shelf tools__ tab and navigate through the shelves tree to find the shelf tool you want to add to the menu.
    
    # Drag the tool from the left pane onto one of the eight positions around the radial menu on the right.
    
:task: Create a menu item that creates a node:
    # Click the __Nodes__ tab and navigate through the node type and category tree to find the node you want to add to the menu.
    
    # Drag the node from the left pane onto one of the eight positions around the radial menu on the right.

:task: Create a menu item that runs an arbitrary Python script:
    # Click the __Utilities__ tab and drag the "Script" item onto one of the eight positions around the radial menu on the right.
    
    # Set the __Label__ to the text that should appear in the menu slot.
    
    # You can specify an __Icon__. If you leave the icon field blank, the menu will use a small dot.
    
    # Enter the script to run when the user selects the menu item in the __Script__ tab.
    
        The script can access a global dictionary called `access`. Currently the only item in the dictionary is `kwargs["pane"]` which returns a [Hom:hou.SceneViewer] object representing the viewer pane in which the user opened the menu.
        
        You can get an object representing viewport (split view) the mouse is over using [Hom:hou.SceneViewer#curViewport].
    
    If you want the menu item to be an on/off toggle, click the __Check on/off__ tab and enter a Python expression that will return `True` if the menu item is on.
    
    For example, if you have a global boolean variable in the [session module|/hom/locations#session] called `hou.session.mytoggle`, you could set the __Script__ tab to:
    
    {{{
    #!python
    # When the user invokes this menu item,
    # flip the toggle state
    hou.session.mytoggle = not hou.session.mytoggle
    }}}
    
    ...and set the __Check on/off__ tab to:
    
    {{{
    #!python
    hou.session.mytoggle is True
    }}}
    
    or just
    
    {{{
    #!python
    hou.session.mytoggle
    }}}
    
    See [scripting Houdini with Python|/hom/] for more on Python scripting.

:task: Create a submenu:
    # Click the __Utilities__ tab and drag the "Submenu" item onto one of the eight positions around the radial menu on the right.
    
    # Double-click the submenu item to jump to the submenu.
    
    # Edit the submenu.
    
        In a submenu, the menu slot _opposite_ the submenu item slot on the parent menu is dedicated as a "go back" item (marked with a +(fa-backward) "rewind" icon) to allow the user to back out of the submenu. You can't edit this slot.
    
    # To go back "up" to the parent menu, double-click the "go back" item, or click in the path above the menu.


== Tips and notes ==

* If you have fewer than eight items on a menu, the "hit area" of the items next to the "gaps" get bigger to fill in. This means in menus with fewer items, the items are easier to hit.

* You can build menus programmatically using [Hom:hou.ui#radialMenus] or [Hom:hou.ui#radialMenu] to get an existing [Hom:hou.RadialMenu] object, or [Hom:hou.ui#createRadialMenu] to create a new menu.

* You can _show_ a menu programmatically using [Hom:hou.SceneViewer#displayRadialMenu]. Note that the menu will open under the mouse pointer.




