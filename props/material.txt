= Shader properties =

#type: properties

== Overview ==

These properties control shader-specific options. They are in the `Material Options` folder in the list of properties available under the __Render Properties__ tab of the [Edit parameter interface window|/ref/windows/edit_parameter_interface]. Select a node, and in the parameter editor click the [Icon:BUTTONS/gear] Gear menu and choose __Edit rendering properties__ to add or remove properties to a render driver, camera, object, shader, or properties node.

@properties

== IFD Bounds ==

The Mantra and RenderMan renderers add some properties automatically to procedural geometry shaders.

::Bounding Box:
    #hprop: vmproc_boxstyle
    
    How the bounding box for the procedural is specified.
    
::SOP Bounds:
    #hprop: vmproc_soppath
    
    Path to a SOP which defines the bounds.
    
::Min Bounds:
    #hprop: vmproc_minbound
    
    Minimum bounds.
    
::Max Bounds:
    #hprop: vmproc_maxbound
    
    Maximum bounds.

== OpenGL == (ogl)

These properties control how Houdini displays surfaces in the OpenGL viewport. These properties correspond to variables defined by the OpenGL specification.

::Ambient:
    #hprop: ogl_amb
    #default: (1, 1, 1)

    Ambient material color. This controls how the material reacts to ambient
    lighting, by multiplying the total ambient light cast on the material.
    Decreasing this value will make the material less sensitive to ambient
    lighting.

::Ambient Intensity:
    #hprop: ogl_amb_intensity
    #default: 1

    Adjust the ambient material color intensity. Multiplies __Ambient__ color.

::Diffuse:
    #hprop: ogl_diff
    #default: (1, 1, 1)
    
    Diffuse material color. This controls how the material reacts to diffuse
    lighting, by multiplying the total diffuse light cast on the material.
    Decreasing this value will make the material less sensitive to diffuse
    lighting.

::Enable Diffuse:
    #hprop: ogl_use_diff
    #default: 1
    
    Toggles contribution of the diffuse color. When off, the material will have no diffuse lighting.

::Diffuse Intensity:
    #hprop: ogl_diff_intensity
    #default: 1
    
    The diffuse intensity multiplies the __Diffuse__ color, allowing it to be easily adjusted without affecting the its hue or saturation.

::Diffuse Roughness:
    #hprop: ogl_diff_rough
    #default: 0.2
    
    The diffuse roughness determines the falloff of the Oren-Nader shading model used for diffuse lighting.

::Specular:
    #hprop: ogl_spec
    #default: (1, 1, 1)

    Specular material color. This controls how the material reacts to specular
    highlights, by multiplying specular highlights on the material. Decreasing
    this value will dim the material's specular highlights.

::Specular Tint:
    #hprop: ogl_spectint
    #default: 1

    Amount to tint the specular reflection with the Specular material color.
    This controls how the material reacts to specular highlights,
    by multiplying specular highlights on the material. Decreasing this value
    will desaturate the specular highlight to (1,1,1).

::Enable Specular:
    #hprop: ogl_use_spec
    #default: 1
    
    Toggles contribution of the specular color. When off, no specular highlights will appear.

::Specular Intensity:
    #hprop: ogl_spec_intensity
    #default: 1
    
    The specular intensity multiplies the __Specular__ color, allowing it to be easily adjusted without affecting the its hue or saturation.

::Metallic Edge:
    #hprop: ogl_metallic_edge
    #default: { 0 0 0 }

    Metallic edge tint for metallic materials. At grazing angles, metallic
    objects reflect with the tint rather than their specular tint.

::Metallic:
    #hprop: ogl_metallic
    #default: 0

    Metallic factor, from 0-1. The more metallic a surface is (approaching 1), 
    the less diffuse and more reflection the material will have. A metallic
    factor closer to zero behaves more like a dielectric material. 

::Inner IOR:
    #hprop: ogl_ior
    #default: (1.33)
    
    Index of refraction of the material, used for fresnel calculations and
    reflection.

::Specular Model:
    #hprop: ogl_spec_model
    #default: phong

    Specifies the model to use for specular highlights on the material: `phong`,
    `blinn` or `ggx`. Phong and Blinn are quick approximations, GGX is a more
    realistic and computationally expensive specular model. This can also be
    set to `lambert` to remove specular highlights altogether.

::Emission:
    #hprop: ogl_emit
    #default: (0, 0, 0)
    
    Emission material color. The emission color is independent of lighting,
    and will appear as a constant color added to the diffuse, ambient, 
    and specular lighting contributions.

::Enable Emission:
    #hprop: ogl_use_emit
    #default: 0
    
    Toggles contribution of the emission color. When off, the material will not be emissive.

::Emission Intensity:
    #hprop: ogl_emit_intensity
    #default: 1
    
    The emission intensity multiplies the __Emission__ color, allowing it to be easily adjusted without affecting the its hue or saturation.


::Roughness:
    #hprop: ogl_rough
    #default: 0.2
    
    Specular roughness. Rougher surfaces have larger but dimmer specular highlights. The valid range is 0 to 1.

::Shininess:
    #hprop: ogl_shiny
    #default: 20
    
    Specular shininess, which is just the inverse of __Roughness__
    (1/ogl_rough). If __Roughness__ is also present it takes precedence. This
    property is for backwards compatibility with shaders that use shininess
    instead of roughness.

::Use Geometry Color:
    #hprop: ogl_use_geo_color
    #default: 1
    
    When enabled, the color on the geometry (`Cd`) is multiplied by the material color. When off, it is ignored.
      
::Use Packed Color:
    #hprop: ogl_use_packed_color
    #default: 1
    
    When enabled, the color on the packed primitive (`Cd`) is multiplied by the material color. When off, it is ignored.
      
::Alpha:
    #hprop: ogl_alpha
    #default: 1
    
    Opacity of the surface. Opaque surfaces have an opacity of 1. Decreasing
    the value will make the material more translucent, and a value of 0 will
    cause it to disappear entirely.

::Alpha Parallel:
    #hprop: ogl_alpha_para
    #default: 1
    Opacity of the surface when the surface is parallel to the viewing direction
    Opaque surfaces have an opacity of 1. Decreasing the value will make the 
    material more translucent, and a value of 0 will cause it to disappear 
    entirely.

::Transparency:
    #hprop: ogl_transparency
    #default: 1
    Defines the transparency of the surface, which overrides the __Alpha__ and 
    __Alpha Parallel__ properties if it is present. A value of zero means the
    surface has no transparency and is thus completely opaque. A value of one
    means that it is completely transparent and only reflections based on the
    __Index of Refraction__ will be seen.

::Enable Alpha and Transparency:
    #hprop: ogl_use_alpha_transparency
    #default: 1
    When disabled, __Alpha__, __Alpha Parallel__, and __Transparency__ will
    have no effect. When enabled, __Transparency__ is respected, and if not
    present, then __Alpha__ and __Alpha Parallel__. This has no effect on
    __Shader Alpha__.

::Shader Alpha:
    #hprop: ogl_alpha_shader
    #default: 1
    
    When present and enabled, this forces a transparency pass. This should be
    used when a custom shader generates alpha information without using the
    known GL alpha and texture parameters. If disabled or absent, the material
    is only considered transparent if one of the alpha parameters is less than 
    one, or the diffuse or opacity texture has non-opaque alpha. If no materials
    are considered transparent, a transparency pass is not performed.

::Use Lighting:
    #hprop: ogl_light
    #default: 1
    
    Whether to use lighting to shade this surface (1), or fill it with a constant color (0).

::Use Emission Map:
    #hprop: ogl_use_emissionmap
    #default: 1

    When enabled, use the map specified in `ogl_emissionmap` for emission. 
    If this property is not present, it is assumed to be enabled.

::Emission Map:
    #hprop: ogl_emissionmap
    #default: 1

    An image file used for emission texturing. Unlike a diffuse map, the 
    emission map is not affected by lighting and appears constant. The RGB
    values of the emission map are multiplied by the `ogl_emit` color which
    defaults to (0,0,0), so this should be set to (1,1,1) if an emission map
    is used. The alpha of an emission map is ignored.

::Use Diffuse Map Alpha:
    #hprop: ogl_use_diffuse_map_alpha
    #default: 1

    When enabled, the alpha channel of the base diffuse map is used to determine
    the surface's opacity. When disabled, it is ignored.

::GLSL Shader:
    #hprop: ogl_glsl_shader
    
    Specifies a custom GLSL shader to use for the viewport. The shader can be
    given as a program file (.prog, which contains a list of shader files, 
    inputs and outputs) or as a whitespace separated list of shader files.
    The extensions define the shader stage type:

    - `.vert`: vertex shader
    - `.frag`: fragment shader
    - `.geom`: geometry shader
    - `.tcs`: tessellation control shader (GL4.0+)
    - `.tes`: tessellation evaluation shader (GL4.0+)

    The format for the program file format is documented in the 
    [OpenGL shading|/shade/opengl] section.

::Reflect:
    #hprop: ogl_reflect
    #default: 0

    The reflectiveness of the material, from 0 (not at all reflective) to
    1 (completely reflective).
    
::Reflect Map:
    #hprop: ogl_reflect_map

    Texture map which modulates the reflectiveness of the material. This is
    multiplied by the GL Reflect parameter for the overall reflectivity.
    
::Reflect Multiplies IOR:
    #hprop: ogl_reflect_map_ior
    #default: 0

    When enabled, the reflection map value is multiplied by the __Index of Refraction__ before using IOR in lighting computations. The operation is IOR * (1+reflect), so that a value of zero in the map leaves the IOR as is, negative values decrease IOR, and positive values increase IOR.
    
::Reflect Map Channel:
    #hprop: ogl_reflect_map_comp
    #default: Luminance

    The Texture map channel from which reflectivity is selected, either 
    the luminance of the color or one of the red, green, blue, or alpha
    channels.

::Coat Intensity:
    #hprop: ogl_coat_intensity
    #default: 0.5

    Intensity of coat specular reflections. If the intensity is
    zero, the material does not have a coat. Coat reflections are only 
    supported in High Quality Lighting.

::Coat Roughness:
    #hprop: ogl_coat_roughness
    #default: 0.05

    The roughness of the coat layer, from 0 to 1. Zero is highly reflective
    while one is diffuse. 

::Coat Specular Model:
    #hprop: ogl_coat_model
    #default: GGX

    Specular model of the coat layer, which can be Phong, Blinn, or GGX.

::Use Coat Intensity Map:
    #hprop: ogl_use_coat_intensity_map
    #default: 1

    When enabled, use the map specified in `ogl_coat_intensity_map` for the
    coat intensity. If this property is not present, it is assumed to be
    enabled.

::Coat Intensity Map:
    #hprop: ogl_coat_intensity_map

    Texture map to modulate coat intensity. The texture map value is 
    multiplied by the `Coat Intensity` to produce the final coat intensity 
    value.

::Coat Intensity Channel:
    #hprop: ogl_coat_intensity_comp

    The channel of `Coat Intensity Map` from which coat intensity is selected,
    either the luminance of the color or one of the red, green, blue, or alpha
    channels.

::Use Coat Roughness Map:
    #hprop: ogl_use_coat_roughness_map
    #default: 1

    When enabled, use the map specified in `ogl_coat_roughness_map` for the
    coat roughness. If this property is not present, it is assumed to be
    enabled.

::Coat Roughness Map:
    #hprop: ogl_coat_roughness_map
    
    Texture map to modulate coat roughness. The texture map value is 
    multiplied by the `Coat Roughness` to produce the final coat roughness 
    value.

::Coat Roughness Channel:
    #hprop: ogl_coat_roughness_comp
    #default: Luminance
    
    The channel of `Coat Roughness Map` from which coat roughness is selected, 
    either the luminance of the color or one of the red, green, blue, or alpha
    channels.
   
::Texture Layers:
    #hprop: ogl_numtex
    #default: 1

    Creates multiple layers of diffuse textures.
   
::Use Texture #:
    #hprop: ogl_use_tex#
    #default: 1

    Enable diffuse texture for layer `#`. If this property is not present, the
    map is assumed to be enabled.

::Texture #:
    #hprop: ogl_tex#

    Texture map to use for diffuse layer `#`. UDIM textures can be used by
    placing `%(UDIM)d` in the filename where the UDIM number is, and UVTile
    textures by using `%(UVTILE)d` or `%(U)d` and `%(V)d`. 

::UVSet #:
    #hprop: ogl_texuvset#

    UV Set to use for diffuse layer `#`. The naming scheme for the standard 
    uv sets is `uv`, `uv2`, `uv3`. If no uv set is specified, the default 
    uv set for the layer will be used (eg. uv for layer 1, uv2 for layer 2).

::Minification Filter:
    #hprop: ogl_tex_min_filter#
    #default: Trilinear

    When the texture is applied to geometry such that there are more texels 
    per screen pixels, OpenGL uses a minification filter to reduce aliasing
    noise. By default, trilinear filtering is used to smooth out the texture,
    which requires the `Use Mip Map` display option to be on, otherwise `Linear`
    is used.

::Magnification Filter:
    #hprop: ogl_tex_mag_filter#
    #default: Bilinear

    When the texture is applied to geometry such that a single texel is applied
    to multiple screen pixels, OpenGL uses a magnification filter to reduce
    pixelation in the texture. By default a bilinear interpolation is used,
    but no filtering can also be selected as well. Magnification filtering
    does not use or require mipmapping.

::Texture Wrap:
    #hprop: ogl_tex_wrap#
    #default: repeat

    Defines how textures are displayed outside of the 0-1 range, using one of three wrapping modes. If __Texture V Wrap__ isn't specified, this setting is used for both U and V.

    Repeat:
       The texture is repeated in a tiling pattern.
    Streak:
       The texture coordinate is clamped to 0-1, streaking the edge pixels when outside of this range..
    Decal:
       The texture color is (0,0,0,0) outside of 0-1.
    Mirror:
       The texture is repeated in a tiling pattern, flipping the texture each time.

::Texture V Wrap:
    #hprop: ogl_tex_vwrap#
    #default: repeat

    Defines how texutres are sampled when the V coordinate is outside of [0,1]. If this is not specified, __Texture Wrap__ is used for U and V, otherwise __Texture Wrap__ only applies to U and this parameter controls V.

::Normal Map Style:
    #hprop: ogl_normalmap_style
    #default: Normal
    Selects between using a __Bump Map__ or a __Normal Map__ for perturbing
    geometric normals. The default is to use a normal map.

::Use Normal Map:
    #hprop: ogl_use_normalmap
    #default: 1

    When enabled, use the map specified in `ogl_normalmap` for the
    normal map. If this property is not present, it is assumed to be
    enabled.

::Normal Map:
    #hprop: ogl_normalmap

    Use a normal map to specify normals instead of interpolating normals 
    across a polygon. The RGB values are used for the normal's XYZ vector.

::Normal Map Type:
    #hprop: ogl_normalmap_type
    #default: uvtangent
    Specifies the space that the normal map operates in: __UV Tangent__,
    __World__, or __Object__ space.

::Normal Scale:
    #hprop: ogl_normalmap_scale
    #default: 1

    Scales the X and Y components of a tangent normal map to increase or decrease the effect the normal map has on the normals.

::Normal Map Range:
    #hprop: ogl_normalbias
    #default: 0

    The range of the normal map is either 0-1 (8b map) or -1 to 1 (floating
    point map). This bias must match the type of normal map used.

::Flip Normal Map X:
    #hprop: ogl_normalflipx
    #default: 0

    Flip the normal's X direction when applying the normal map. This may be 
    needed for normal maps generated by other applications. 

::Flip Normal Map Y:
    #hprop: ogl_normalflipy
    #default: 0

    Flip the normal's Y direction when applying the normal map. This may be 
    needed for normal maps generated by other applications. 

::Normal Layer:
    #hprop: ogl_normallayer
    #default: 0

    The texture layer that the UV coordinates for the normal map are sourced 
    from.

::Use Bump Map:
    #hprop: ogl_use_bumpmap
    #default: 1

    When enabled, use the map specified in `ogl_bumpmap` for the
    bump map. If this property is not present, it is assumed to be
    enabled.

::Bump Map:
    #hprop: ogl_bumpmap

    Use a bump map to perturb normals to give the illusion of depth to a flat
    polygon. 

::Bump Scale:
    #hprop: ogl_bumpscale
    #default: 1

    Scales the bumps to increase or decrease the apparent size of the bumps.

::Bump Layer:
    #hprop: ogl_bumplayer
    #default: 0

    The texture layer that the UV coordinates for the bump map are sourced 
    from.

::Invert Bumps:
    #hprop: ogl_bumpinvert
    #default: 0

    Inverts the bumps so that they appear to be going into the object instead of out. 

::Use Roughness Map:
    #hprop: ogl_use_roughmap
    #default: 1

    When enabled, use the map specified in `ogl_roughmap` for the
    roughness map. If this property is not present, it is assumed to be
    enabled.

::Roughness Map:
    #hprop: ogl_roughmap
    
    Texture map for Roughness. Rougher surfaces have larger but dimmer specular highlights. This overrides the constant `ogl_rough`.

::Invert Roughness Map (Glossiness):
    #hprop: ogl_invertroughmap
    #default: 0

    Invert the roughness map so that it is interpreted as a gloss map - 
    zero is no gloss (dull), one is very glossy (shiny).

::Roughness Channel:
    #hprop: ogl_roughmap_comp
    #default: Luminance

    Texture component used for Roughness within the Roughness texture map, 
    which can be the luminance of RGB, red, green, blue or alpha. This allows
    roughness to be sourced from packed texture maps which contain parameters 
    in the other texture channels.

::Use Metallic Map:
    #hprop: ogl_use_metallicmap
    #default: 1

    When enabled, use the map specified in `ogl_metallicmap` for the
    metallic map. If this property is not present, it is assumed to be
    enabled.

::Metallic Map:
    #hprop: ogl_metallicmap

    Texture map for Metallic. The GL Metallic parameter is multiplied by the
    texture map value.

::Metallic Channel:
    #hprop: ogl_metallicmap_comp
    #default: Luminance

    Channel of the metallic texture map to sample (luminance, red, green, blue,
    alpha).

::Use Occlusion Map:
    #hprop: ogl_use_occlusionmap
    #default: 1

    When enabled, use the map specified in `ogl_occlusionmap` for the
    occlusion map. If this property is not present, it is assumed to be
    enabled.

::Occlusion Map:
    #hprop: ogl_occlusionmap

    Texture map for Occlusion. The diffuse color is multiplied by the 
    occlusion.

::Occlusion Channel:
    #hprop: ogl_occlusionmap_comp
    #default: Luminance

    Channel of the occlusion texture map to sample (luminance, red, green, blue,
    alpha).

::Use Specular Map:
    #hprop: ogl_use_specmap
    #default: 1

    When enabled, use the map specified in `ogl_specmap` for the
    specular map. If this property is not present, it is assumed to be
    enabled.
   
::Specular Map:
    #hprop: ogl_specmap
   
    The image file to use for modifying specular reflections. The RGB values of
    the file are multiplied by the specular colors of lights when shading.

::Specular Layer:
    #hprop: ogl_speclayer
    #default: 0

    The texture layer that the UV coordinates for the specular map are sourced 
    from.

::Use Opacity Map:
    #hprop: ogl_use_opacitymap
    #default: 1

    When enabled, use the map specified in `ogl_opacitymap` for the
    opacity map. If this property is not present, it is assumed to be
    enabled.

::Opacity Map:
    #hprop: ogl_opacitymap
    
    The image file to use for the opacity of the material. Only the alpha 
    channel is used in an RGBA image file. The map values are multiplied by
    both `ogl_alpha` or `ogl_transparency`, and `point/vertex alpha`,
    if present.

::Invert Opacity Map:
    #hprop: ogl_opacitymap_invert
    #default: 0
    
    Invert the values of the opacity map so that zero is opaque and one is
    completely transparent. When off, zero is completely transparent and one
    is opaque.

::Opacity Layer:
    #hprop: ogl_opacitylayer
    #default: 0

    The texture layer that the UV coordinates for the opacity map are sourced 
    from.

::Use Environment Map:
    #hprop: ogl_use_envmap
    #default: 1

    When enabled, use the map specified in `ogl_envmap` for the
    environment map. If this property is not present, it is assumed to be
    enabled.

::Environment Map:
    #hprop: ogl_envmap

    The image file that defines an environment map for reflection mapping. If 
    the image file is an RGBA image, it is assumed to be a lat-long map. If
    a deep raster image with 6 planes is specified, it is assumed to be a 
    cube map if the planes are named Left, Right, Top, Bottom, Front, and Back.

    The reflection color is multiplied by the specular map's RGB, 
    if one is present.

::Env Map Rotation:
    #hprop: ogl_envrotate
    #default: (0,0,0)

    Rotates the environment map using Euler rotation angles.

::Env Rotate Order:
    #hprop: ogl_envrotorder
    #default: xyz

    The rotation order for the Euler rotation angles. Can be one of `xyz`, `xzy`, `yxz`, `yzx`, `zxy`, `zyx`.

::Reflection Intensity:
    #hprop: ogl_envscale
    #default: 0.1

    Scales the reflection color sourced from the environment map to alter the
    intensity of reflections.

::Use Displacement Map:
    #hprop: ogl_use_displacemap
    #default: 1

    When enabled, use the map specified in `ogl_displacemap` for displacement
    mapping.

::Displacement Map:
    #hprop: ogl_displacemap

    The image file that defines a height-based displacement. The surface 
    will be tessellated and displaced along the normal by the height when
    this map is valid.
    
::Displace Scale:
    #hprop: ogl_displacescale
    #default: 1

    Factor applied to the height sampled from the displacement map, after
    `ogl_displaceoffset` has been added. This affects the scale of the 
    displacement.

::Displace Offset:
    #hprop: ogl_displaceoffset
    #default: -0.5
    
    Value added to the height sampled from the displacement map. Usual values
    are 0 and -0.5, depending on whether the height in the map is centered
    around 0 or 0.5.

::Displace Method:
    #hprop: ogl_displace_method
    #default: disp
    Displacement can be done along the surface normal ("Along Normal") or using
    full vector displacement ("Vector").

::Displace Vector Space:
    #hprop: ogl_displace_space
    #default: uvtangent
    For full vector displacement, the vector can be relative to the UV tangent
    space, object space, or world space.

::Displace Up Vector:
    #hprop: ogl_displace_up
    #default: xyz
    Allows the vector to be interpreted as XYZ or XZY. Some applications export
    vector displacement in XZY order. Houdini uses XYZ by default.

== OpenGL Hair ==

::Diffuse Intensity:
    #hprop: ogl_hair_diff_intensity
    #default: 0.5

    Controls the intensity of the diffuse component of the hair.

::Diffuse Root Color:
    #hprop: ogl_hair_diff_root_color
    #default: (0.8 0.8 0.8)

    Diffuse color of the hair at its root (u=0).

::Diffuse Tip Color:
    #hprop: ogl_hair_diff_tip_color
    #default: (1,1,1)

    Diffuse color of the hair at its tip (u=1).

::Use Diffuse Map:
    #hprop: ogl_hair_use_diff_map
    #default: False

    Enable the use of a texture map lookup for the overall diffuse color of the hair.

::Diffuse Map:
    #hprop: ogl_hair_diff_map
    #default: ""

    The texture map for the overall diffuse color of the hair. It is multiplied by the blended diffuse root and tip color. The map lookup is based on the hair's UV value.

::Diffuse Blend Ramp:
    #hprop: ogl_hair_diff_blend_ramp

    An `op:` reference to a ramp parameter which controls the blending between the root and tip diffuse colors.

::Specular Intensity:
    #hprop: ogl_hair_spec_intensity
    #default: 0.2

    Controls the intensity of the specular component of the hair.

::Specular Angle:
    #hprop: ogl_hair_spec_angle
    #default: 0.05

    Produces a specular highlight when the reflected ray is within a certain
    number of degrees of the eye ray. 0 maps to 0 degrees (no specular produced)
    and 1 maps to 180 degrees (all angles produce some specular reflection).
    The specular lobe uses a Gaussian falloff.

::Specular Shift:
    #hprop: ogl_hair_shift
    #default: 0.0

    Shifts the specular highlight up or down the hair.

::Specular Root Color:
    #hprop: ogl_hair_spec_root_color
    #default: (1 1 1)

    Color of the specular highlight of the hair at its root (u=0).

::Specular Tip Color:
    #hprop: ogl_hair_spec_tip_color
    #default: (1,1,1)

    Color of the specular highlight of the hair at its tip (u=1).

::Use Specular Map:
    #hprop: ogl_hair_use_spec_map
    #default: False

    Enable the use of a texture map lookup for the overall specular color of the hair. 

::Specular Map:
    #hprop: ogl_hair_spec_map
    #default: ""

    The texture map for the overall specular color of the hair. It is multiplied by the blended specular root and tip colors. The map lookup is based on the hair's UV value.

::Specular Blend Ramp:
    #hprop: ogl_hair_spec_blend_ramp

    An op: reference to a ramp parameter which controls the blending between the root and tip specular colors.

::Alpha:
    #hprop: ogl_hair_alpha
    #default: 1.0

    Makes hair translucent if less than 1.0 (opaque). The viewport uses a sample-masking technique to approximate transparency which is more accurate as the number of samples in the framebuffer increase. The default is 4 samples.

::Alpha Blend Ramp:
    #hprop: ogl_hair_alpha_blend_ramp

    An op: reference to a ramp parameter which controls the falloff of opacity from root (0.0) to tip (1.0). 

::Randomize Diffuse Hue:
    #hprop: ogl_hair_diff_random_hue
    #default: False

    When enabled, the hue of the final diffuse hair color is adjusted slightly by a random amount. The hue range is specified by `ogl_hair_diff_random_hue_range`.

::Diffuse Random Hue Range:
    #hprop: ogl_hair_diff_random_hue_range
    #default: ( -0.05, 0.05 )

    Controls the amount of random hue variation of the final diffuse hair color when `ogl_diff_random_hue` is enabled.

::Randomize Diffuse Saturation:
    #hprop: ogl_hair_diff_random_sat
    #default: False

    When enabled, the saturation of the final diffuse hair color is adjusted slightly by a random amount. The saturation range is specified by `ogl_hair_diff_random_sat_range`.

::Diffuse Random Sat Range:
    #hprop: ogl_hair_diff_random_sat_range
    #default: ( 0.5, 1.0 )

    Controls the amount of random saturation variation of the final diffuse hair color when `ogl_diff_random_sat` is enabled.

::Randomize Diffuse Intensity:
    #hprop: ogl_hair_diff_random_int
    #default: False

    When enabled, the intensity of the final diffuse hair color is adjusted slightly by a random amount. The intensity range is specified by `ogl_hair_diff_random_int_range`.

::Diffuse Random Int Range:
    #hprop: ogl_hair_diff_random_int_range
    #default: ( 0.5, 1.0 )

    Controls the amount of random intensity variation of the final diffuse hair color when `ogl_diff_random_int` is enabled.

::Randomize Specular Intensity:
    #hprop: ogl_hair_spec_random_int
    #default: False

    When enabled, the intensity of the final specular hair color is adjusted slightly by a random amount. The intensity range is specified by `ogl_hair_spec_random_int_range`.

::Specular Random Int Range:
    #hprop: ogl_hair_spec_random_int_range
    #default: ( 0.5, 1.0 )

    Controls the amount of random intensity variation of the final specular hair color when `ogl_spec_random_int` is enabled.

== RIB Bounds ==

::Bounding Box:
    #hprop: ribproc_boxstyle
    
    How the bounding box for the procedural is specified.
    
::SOP Bounds:
    #hprop: ribproc_soppath
    
    Path to a SOP which defines the bounds.
    
::Min Bounds:
    #hprop: ribproc_minbound
    
    Min bounds.

::Max Bounds:
    #hprop: ribproc_maxbound
    
    Max bounds.

== Shading ==

::Co-Shader Handle:
    #hprop: ri_coshader_handle
    #status: nd
