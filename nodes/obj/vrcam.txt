#type: node
#context: obj
#internal: vrcam
#icon: SHOP/vrlens

#tags: cameras

= VR Camera =

"""Camera supporting VR image rendering."""

This camera enables the rendering of VR images. There are a range of projection formats offering stereoscopic output for different devices.

NOTE:
    All VR-specific controls are located under the __VR__ tab.

[Include:/shelf/lightsandcameras#includeme]

@parameters

== Transform ==

* [Include:common#xord]
* [Include:common#t]
* [Include:common#r]
* [Include:common#p]
* [Include:common#pretransform]
* [Include:common#keeppos]
* [Include:common#childcomp]
* [Include:common#constraints_on]
* [Include:common#constraints_path]

== Render ==

[Include:common#display]

[Include:misc_parms]

== View ==

* [IncludeProp:iconscale]
* [IncludeProp:res]
* [IncludeProp:aspect]
* [IncludeProp:projection]
* [IncludeProp:lensshader]
* [IncludeProp:focal]
* [IncludeProp:focalunits]
* [IncludeProp:aperture]
* [IncludeProp:orthowidth]
* [IncludeProp:near]
* [IncludeProp:far]
* [IncludeProp:win]
* [IncludeProp:winsize]
* [IncludeProp:winmask]
* [IncludeProp:cropl]
* [IncludeProp:cropr]
* [IncludeProp:cropb]
* [IncludeProp:cropt]
* [IncludeProp:cropmask]

NOTE:
    You can optionally add the spare parameter __Visible Objects__ from the Parameter Interface. This allows you to control which objects are displayed in the viewport when looking through the camera.

== Sampling ==

* [IncludeProp:shutter]
* [IncludeProp:focus]
* [IncludeProp:fstop]
* [IncludeProp:vm_bokeh]
* [IncludeProp:vm_bokehfile]
* [IncludeProp:vm_bokehrotation]

== VR ==

Mode:
    #id: mode
    Selects the layout of stereo pairs. __Stereo__ outputs pairs side-by-side. __Left Over/Right Under__ outputs pairs with left on top and right on bottom. __Right Over/Left Under__ outputs pairs with right on top and left on bottom. __Left Eye__ outputs only the left eye. __Right Eye__ outputs only the right eye.

Projection:
    #id: projection
    Selects the type of projection to use for stereo pairs. __Latlong__ uses a spherical projection. __Perspective__ uses a standard perspective projection. __Cube Map - NVIDIA__ uses a cube format like the 'NVIDIA Texture Tools' utility. __Cube Map - 3x2__ uses a stacked cube format.

Preserve Aspect Ratio:
    #id: preserveAspectRatio
    Toggling this parameter will keep the camera's image aspect ratio the same independent of the __Projection__ type.

Merge Mode:
    #id: mergeMode
    The type of correction to apply at the poles of the projection. __None__ disables correction. __Linear__ blends the correction between __Merge Angle__ and the poles. __Smooth__ blends the correction using a smooth curve between __Merge Angle__ and the poles.

Merge Angle:
    #id: mergeAngle
    The angle (in degrees) from the poles beyond which correction is applied.

Field Of View:
    #id: perspectiveFOV
    When __Projection__ is set to __Perspective__ this controls the field of view of the camera.

Near Clipping:
    #id: perspectiveClipNear
    When __Projection__ is set to __Perspective__ this controls the near clipping plane of the camera.

Far Clipping:
    #id: perspectiveClipFar
    When __Projection__ is set to __Perspective__ this controls the far clipping plane of the camera.

Distortion:
    #id: perspectiveDistort
    When __Projection__ is set to __Perspective__ this controls the distortion of the lens. Positive values result in a "barrel" distortion effect. Negative values result in a "pin-cushion" distortion effect.

Cubic Distortion:
    #id: perspectiveDistortCubic
    When __Projection__ is set to __Perspective__ this controls the cubic coefficient of the lens distortion.

Eye Separation:
    #id: eyeSeparation
    Determines the distance between left and right eyes, or "interpupillary distance" (IPD), of the viewer. This should be set according to the scale of your scene. The default value is set based on average human metrics in meters.

Eye To Neck Distance:
    #id: eyeToNeckDistance
    Determines the distance from the eyes to the neck of the viewer. The camera will be offset in Y along this distance, and if rotated will pivot from the base of the neck, not the eye-nodal point. This should be set according to the scale of your scene. The default value is set based on average human metrics in meters.

@related
- Camera [Node:obj/cam]
- Stereo Camera [Node:obj/stereocamrig]
