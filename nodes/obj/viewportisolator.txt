= Viewport Isolator =

#type: node
#context: obj
#internal: viewportisolator
#icon: VIEW/display_objects
#tags: viewing

"""A Python Script HDA providing per viewport isolation controls from selection."""

The Viewport Isolator builds a __Visible Objects__ list and applies it to the current viewport's __Optimize__ > __Visible Objects__ [display option|/ref/windows/displayopts_3d].

The best way to use the Viewport Isolator is to create a single instance in `/obj` and popup it's parameter interface as a top level window by clicking ((RMB)) in the network editor and selecting __Parameters and Channels__ > __Parameters...__

You can then select the objects in the viewport or in the node editor and click the __Isolate__ button. Isolating an object will only affect its visibility in the current viewport. You can continue to refine the isolation by redoing the Isolate operation. 

TIP:
    You can append an object that wasn't part of the original isolation if you go in the network editor, select it, and press the __Append__ button.

TIP:
    You can also hide an object within the current isolation by selecting it and clicking on the __Exclude__ button.

Each operation adds an __Isolation Filter__ that you can edit or mute individually by turning on the __More...__ checkbox. At any point, clicking the __Clear__ button gets you out of the Isolation mode.

NOTE:
    The Viewport Isolator is similar to the viewport's __View Mode__ display option that lets you ghost or hide other objects, but it doesn't restrict you by the OBJ hierarchy.

@parameters

== Buttons ==
Isolate:
    #id: isolate

    Isolates the selected objects in the active viewport by adding an entry to the list of __Isolation Filters__.


Append:
    #id: append

    Appends the selected objects in the active viewport by adding an entry to the list of __Isolation Filters__.

Exclude:
    #id: exclude

    Excludes the selected objects in the active viewport by adding an entry to the list of __Isolation Filters__.

Clear:
    #id: clear

    Clears all the Isolation Filters and resets the state __Visible Object__ to show all the objects.

Save History:
    #id: save

    Saves the current values to a __History Entry__ using the __History Label__. A saved history can be recalled by using the __Load History__ dropdown menu.  Click the __Load__ buttons next to the history multi-instance parameter.

Load History:
    #id: load

    Load History is a dropdown menu that lists the available saved histories on the node. Loading an item overwrites the current parameter values and reapplies the viewport isolation. This is a quick way to go between different isolations.

More...:
    #id: more
    A checkbox that will display advanced options when enabled. If this checkbox is off, only the buttons and the __Visible Objects__ parameter are visible. This mode is typically preferred for quick viewport work, where you isolate and clear a lot and don't care about building reusable __Isolation Filters__.
    If this checkbox is on, all the __Isolation Filters__ and __History__ parameters are visible. This mode is useful if you want to debug isolation filters, or to tweak filters manually.

== Viewport Isolator ==

Enable Visible Objects:
    #id: enable
    If this checkbox is on, the __Isolation Filters__ are applied to build the __Visible Objects__ string. If it's off, no isolation is performed. This checkbox provides a way to disable the __Isolation Filters__ without clearing them.

Visible Objects:
    #id: isolatestring
    A disabled parameter showing the result of the viewport isolator. This parameter is also copied on the viewport's __Optimize__ > __Visible Objects__ [display option|/ref/windows/displayopts_3d].

Viewports:
    #id: viewports
    The viewports on which the __Visible Objects__ will be copied. It is recomputed every time a button is pressed.

History Label:
    #id: label
    The name to use when saving a history entry. The name is also updated when loading an entry, and is displayed in the __Load History__ dropdown menu.

== Filters ==

Isolation Filters:
    #id: filters
    A list of isolation filters. An isolation filter is created every time one of the __Isolate__/__Append__/__Exclude__ buttons are pressed. The list is used to generate the __Visible Objects__ string. Filters are executed from `filter1` to the last filter.
    The __Visible Objects__ string always start as a `*` string.


Isolation Filter/Enable:
    #id: filter#
    Enables the isolation filter multi parameter instance.

Isolation Filter/Mode:
    #id: mode#
    Defines the type of isolation filter.
    An __Isolate__ filter completely overrides the current string with the filter string.  An __Append__ filter appends the filter string to the current string. An __Exclude__ filter appends the filter string to the current string but prefixes every string with the caret  character (`^`).


Isolation Filter/Filter:
    #id: mask#
    Defines the isolation filter string. It accepts bundle names, wildcards, and the caret character (`^`) for exclusion. The caret character isn't needed when the mode is set to __Exclude__, since it's added by the script.

== History ==

History:
    #id: history
    A list of history and corresponding load buttons. Each string represents a saved entry and is simply a list of `;` separated values. You can change the history label of each entry by changing the first token of the string.

