= Mocap Acclaim =

#type: node
#context: obj
#internal: mcacclaim
#icon: SHELF/motion_capture
#tags: character, animation

"""Import Acclaim motion capture."""

This asset imports multiple motion capture files and generates an animated rig driven by CHOPs using inverse or forward kinematics.

It generates the rig inside its own subnet.

You can get Acclaim motion files from: [CMU Graphics Lab Motion Capture Database|http://mocap.cs.cmu.edu/]

@parameters

== Controls ==

Skeleton File .asf:
    #id: asf
    The Acclaim Skeleton file to load.

Framerate:
    #id: framerate
    Motion files usually have an higher framerate than the render framerate.
    Set the rate to match the motion data.

Mocap Clip:
    #id: animation
    A dynamic menu listing all the CHOP nodes inside the nested mocap CHOPnet.
    Selecting an entry toggles the Export flag on the associated CHOP node and modifies the global animation range to fit the animation. You can disable CHOP export by selecting __None__.

Reload:
    #id: load
    Clears the content of the subnet and reloads the mocap rig and animation from files.

Clear:
    #id: clear
    Clears the content of the subnet.

Reload when Loading Scene:
    #id: reload
    Forces reloading of the mocap rig and animation when opening the scene.


Automatically Load Motion Files from Skeleton Folder:
    #id: autoloadmotions
    Automatically search for .amc files in the folder of the .asf file when reloading.
    It will also look for an `index.txt` file to rename the clips based on the amc filenames.
    If you have `126_01.amc` and `126_02.amc`, the files should have the following format:
    {{{
    126_01<tab>This is the description for Animation 01
    126_02<tab>This is the description for Animation 02
    }}}

FK/IK Mode:
    #id: ikmode
    The rig can be generated using FK or IK.

Dual bone chains with twist affectors:
    #id: dualchains
    IK Bone chains with 2 bones can be generated with a twist affector.

Define IK Chains (More than 2 bones):
    #id: ikchains
    Enables the manual definition of IK bone chains with more than 2 bones.
    This reduces the number of IK affectors on the chains with more than 2 bones.

IK Chains List:
    #id: ikchainslist
    A multi line string where each line represent an IK bone chain.
    Use the chain root name and the chain end affector name separated by a space.
    {{{
    <IK Chain Root Joint> <IK Chain End Affector>
    }}}

Bone Length:
    #id: bonelen
    The rig's bone lengths can be driven using CHOP if the mocap included translation data.

    Don't Overrride Channels:
	    Don't animate/override bone lengths.

    Always Overrride Channels:
	    Always animate/override bone lengths, even if the bone lengths don't change.
    
    Automatically Override Channels:
	    Detect if bone lengths are animated and override bone lengths.

Output Folder:
    #id: outdir
    Specify a writable folder where animation and temporary files are generated.

Keep Temporary Files (.cmd, .txt):
    #id: keeptmp
    Keep temporary files generated by the mcacclaim utility and by this script.

Load Motion Files from Skeleton Folder:
    #id: load_amc
    Manually reload the .amc files from the skeleton folder.
    It populates the motions files entries.

Number of Motion Files:
    #id: motionnum
    List of pairs of motion file path and motion name to create.
    You can generate multiple motions during a single import.

motion1:
    #id: motion1
    Path to a .amc motion file.

name1:
    #id: name1
    Node name to use for the corresponding CHOP file node.

Convert Log:
    #id: cmdout
    Command line output of mcacclaim utility.
    It can output errors or warnings.


== Transform ==

[Include:common#transform_tab]

== Misc ==

[Include:misc_parms]

@related
    - [mcacclaim Utility|/ref/utils/mcacclaim]

