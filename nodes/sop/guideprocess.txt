#type:     node
#context:  sop
#internal: guideprocess
#icon:     FUR/comb

= Guide Process =

#type: node
#context: Sop
#internal: guideprocess

"""Modifies guide or hair using one or more operations."""

This node modifies guide curves using one or more of the following operations:

* Rotating guides to point in a certain direction
* Altering how far guides lift of the skin
* Length or shorten guides
* Smooth guides
* Bend guides

All operations can be masked with paintable skin attributes and textures. Operations
can also affect parts of a guide curve with varying intensity.

@parameters

== General ==

Group Type:
    #id: grouptype

    The type of input group.

Group:
    #id: group

    A group to use for masking. Any operations will only be applied to the
    primitives or points within this group.

Random Seed:
    #id: seed

    Use this seed for all random operations. This causes random operations like
    __Set Length__ (with __Randomize__ enabled) to have a different effect on
    each curve.

Visualize Masks:
    #id: vismasks

    Visualize the effect of Skin Mask, Curve Mask and Noise Mask by coloring
    curves in the viewport.

== Input Mask ==

Blend:
    #id: blend

    [Include:fur_common#opblend]

    [Include:fur_common#parmoverride]

[Include:/nodes/sop/fur_common#curvemask]

== Noise Mask ==

Use Noise Mask:
    #id: usenoisemask
    When enabled masks the effect of any operation using a noise function.

Amount:
    #id: noisemaskamount
    Blends the effect of the noise mask.

    [Include:fur_common#parmoverride]

Noise Mask Frequency:
    #id: noisemaskfreq

    The frequency of the noise.

Gain:
    #id: noisemaskgain
    High values result in more contrasted noise and fewer areas with medium
    values.

Bias:
    #id: noisemaskbias
    Biases the noise towards low or high values.

== Operations ==

It's possible to apply multiple operations using a single instance of this node.

=== Common Parameters ===

The following parameters apply to all operations.

Active:
    #id: active#
    Controls whether this operation is applied.

Solo:
    #id: solo#
    If any operations have the 'Solo' enabled only those operations are
    applied.

Operation:
    #id: op#
    The operation to apply.

    Set Direction:
	Rotate curves towards a direction.

    Set Lift:
	Lift curves off the skin or flatten curves against the skin.

    Set Length:
	Lengthen or shorten curves.

    Displace:
	Push curve points along the skin normal.

    Wave:
	Displaces using a wave pattern.

    Smooth:
	Average neighboring curves.

    Frizz:
	Offset curve points using noise.

    Bend:
	Bend curves.

    Set Simulation Attributes:
	Sets attributes that are used by hair simulation.

NOTE:
    The following parameters are specific to each operation. They are only displayed when the corresponding operation is chosen from the __Operation__ dropdown menu.

=== Set Direction ===

Blend:
    #id: setdir_blend#

    [Include:fur_common#opblend]

Uniform Direction:
    #id: setdir_uniformdir#
    A uniform direction to rotate towards.

Direction Attribute:
    #id: setdir_skinattrib#
    A direction to rotate towards.

Direction Amount:
    #id: setdir_blenddir#
    Amount to rotate towards a direction around the skin normal. This only
    changes direction in the skin plane without changing how far the curve
    lifts off the skin.

    [Include:fur_common#parmoverride]

Lift Amount:
    #id: setdir_blendlift#
    Lift curves off the skin or flatten curves against the skin to match the
    given direction. This only rotates away from or towards the skin but
    doesn't change the orientation around the skin normal.

    [Include:fur_common#parmoverride]

Mode:
    #id: setdir_mode#

    Rigidly Rotate:
	Rotates the entire curve around it's root.

    Rotate Each Segment:
	Rotates each segment, allowing individual segments to rotate by
	different amounts when using a __Curve Mask__.

=== Lift ===

Blend:
    #id: lift_blend#

    [Include:fur_common#opblend]

Randomize:
    #id: lift_randomize#
    Randomizes the effect per curve.

Lift:
    #id: lift_value#
    The global lift value to blend towards.

    [Include:fur_common#parmoverride]

Min Lift:
    #id: lift_liftrandmin#
    When __Randomize__ is enabled, this is the lowest lift value used.

Max Lift:
    #id: lift_liftrandmax#
    When __Randomize__ is enabled, this is the highest lift value used.

Follow Skin Contour:
    #id: lift_followskincontour#
    Causes flattened curves to follow the contour of the skin, rather than
    just pointing straight in the direction of the skin tangent.

    Results in a more natural effect but is a bit slower to compute.

    [Include:fur_common#parmoverride]

=== Set Length ===

Mode:
    #id: setlength_mode#

    Set:
	Set curve length to an absolute value.

    Add:
	Lengthen curves by the specified amount.

    Subtract:
	Shorten curves by the specified amount.

    Multiply:
	Scale curves by the specified amount.

Method:
    #id: setlength_method#

    Scale:
	Uniformly scale curves around the root point.

    Cut Or Extend:
	Cut or extend curves at the tip.

Blend:
    #id: setlength_blend#

    [Include:fur_common#opblend]

Randomize:
    #id: setlength_randomize#

    Randomizes the operation's effect.

Length:
    #id: setlength_length#

    The length to change curves to. In __Add__ or __Subtract__ mode, this is the
    amount to change length by.

    [Include:fur_common#parmoverride]

    NOTE:
        This doesn't apply to __Multiply__ mode.

Min Length:
    #id: setlength_lengthrandmin#

    The smallest length to use when __Randomize__ is enabled.

    [Include:fur_common#parmoverride]

    NOTE:
        This doesn't apply to __Multiply__ mode.

Max Length:
    #id: setlength_lengthrandmax#

    The greatest length to use when __Randomize__ is enabled.

    [Include:fur_common#parmoverride]

    NOTE:
        This doesn't apply to __Multiply__ mode.

Scale Factor:
    #id: setlength_scalefactor#
    Scale curve length by this factor.

    [Include:fur_common#parmoverride]

    NOTE:
        This only applies to __Multiply__ mode.

Min Scale Factor:
    #id: setlength_scalefactorrandmin#

    The highest scale factor used when __Randomize__ is enabled.

    [Include:fur_common#parmoverride]

    NOTE:
        This only applies to __Multiply__ mode.

Max Scale Factor:
    #id: setlength_scalefactorrandmax#

    The lowest scale factor used when __Randomize__ is enabled.

    [Include:fur_common#parmoverride]

    NOTE:
	Only applies to __Multiply__ mode.

Cull Threshold:
    #id: setlength_cullthreshold#

    After changing curve lengths, cull any curves that are shorter than this value.

=== Displace ===

Amount:
    #id: displace_amount#

    [Include:fur_common#blendop]

    [Include:fur_common#parmoverride]

=== Make Wavy ===

Frequency X:
    #id: makewavy_freqx#

    The frequency of waves tangential to the skin.

Amplitude X:
    #id: makewavy_ampx#

    The amplitude of waves tangential to the skin.

Frequency Y:
    #id: makewavy_freqy#

    The frequency of waves in the normal direction of the skin.

Amplitude Y:
    #id: makewavy_ampy#

    The amplitude of waves in the normal direction of the skin.

=== Straighten ===

Tangent Straightness:
    #id: straighten_tangent#

    Straightens curves in the skin plane.

    [Include:fur_common#parmoverride]

Normal Straightness:
    #id: straighten_normal#

    Straightens curves in the skin normal's direction.

    [Include:fur_common#parmoverride]

=== Smooth ===

Blend:
    #id: smooth_blend#

    [Include:fur_common#opblend]

Smoothing Mode:
    #id: smooth_mode#

    Object Space:
	Average the shape and orientation of neighboring curves.

    Skin Space:
	Average the shape of neighboring curves while preserving their
	orientation relative to the underlying skin.

Search Radius:
    #id: smooth_radius#

    Search for neighbors within this radius. The search is performed on curve
    roots, so this specifies distance between roots.

Num Neighbours:
    #id: smooth_numneighbours#

    The maximum number of neighbors to take into account. The actual number may
    may be lower when fewer neighbors are found within the __Search Radius__.

=== Frizz ===

Frequency:
    #id: frizz_freq#

    The frequency of the noise function.

    [Include:fur_common#parmoverride]

Random Frequency:
    #id: frizz_freqrand#

    Add a random value to __Frequency__. The random value is generated
    between the negated and positive value of this parameter.

    [Include:fur_common#parmoverride]

Limit Frequency To Representable Values:
    #id: frizz_limitfreq#

    Clip the frequency to a range that can be represented using the number of
    points per unit length found on each curve. Without this, high values
    can result in random values instead of predictable noise.

Amplitude:
    #id: frizz_amp#

    The maximum distance to offset curve points.

    [Include:fur_common#parmoverride]

Random Amplitude:
    #id: frizz_amprand#

    Add a random value to __Amplitude__. The random value is generated between
    the negated and positive value of this parameter.

    [Include:fur_common#parmoverride]

=== Bend ===

Blend:
    #id: bend_blend#

    [Include:fur_common#opblend]

Bend Axis Mode:
    #id: bend_axismode#

    Bend in Root Direction:
	Bend in the direction the root points in, relative to the skin.

    Uniform Axis:
	Specify a uniform, global axis around which to rotate all guides.

    Curve Attribute:
	Use an attribute on each curve as its bend axis.

    Skin Attribute:
	Use a skin attribute as the bend axis.


Bend Axis:
    #id: bend_axis#

    The bend axis to use when __Bend Axis Mode__ is set to __Uniform Axis__.

Axis Attribute:
    #id: bend_axiscurveattrib#

    A attribute vector attribute on the curves to use as the bend axis.


Axis Attribute:
    #id: bend_axisskinattrib#

    A attribute vector attribute on the skin geometry to use as the bend axis.

Angle:
    #id: bend_angle#

    Bend curves by this angle. This is the angle across the entire length of
    the curve.

    [Include:fur_common#parmoverride]

Random Angle:
    #id: bend_anglerand#

    Add a random value to __Angle__. The random value is generated between
    the negated and positive value of this parameter.

    [Include:fur_common#parmoverride]

Randomness Bias:
    #id: bend_anglerandbias#

    Biases the __Random Angle__ towards the bottom or top end of the range.

    [Include:fur_common#parmoverride]

=== Set Simulation Attributes ===

Simulation Attributes:
    #id: simattrib_numattribs

    The list of attributes to set or modify.

Active:
    #id: simattrib_active#_#

    Enable this attribute.

Attribute:
    #id: simattrib_attrib#_#

    The attribute to set. The dropdown provides a list of all attributes used
    by the [Wire Solver|Node:/dop/wiresolver].

    See the [Wire Object|Node:/dop/wireobject#attributes] help for details on
    how these attributes influence wire behavior.

Class:
    #id: simattrib_class#_#

    This attribute class to create.

    This parameter is disabled for some attributes, since they must be of a specific class.
    
    Please see the [Wire Object|Node:/dop/wireobject#attributes] help for details.

==== Scalar Attribute Parameters ====

Mode:
    #id: simattrib_scalarmode#_#

    Controls how scalar values are combined with any existing attribute values.

    Set:
	Set the attribute, disregarding existing attribute values.

    Add:
	Set the attribute to the sum of the parameter value and the existing
	attribute value.

    Minimum:
	Set the attribute to the minimum of the parameter value and the
	existing attribute's value.

    Maximum:
	Set the attribute to the maximum of the parameter value and the
	existing attribute's value.

    Multiply:
	Set the attribute to the product of the parameter value and the
	existing attribute's value.


Value:
    #id: simattrib_scalarvalue#_#

    The value to use for scalar attributes. Note that this may be modified
    by the __VEXpression__ below and combined with existing attributes, as
    specified by the __Mode__ parameter.

VEXpression:
    #id: simattrib_scalarsnippet#_#

    The output of this VEX expression is evaluated and combined with existing
    attribute values as specified by the __Mode__ parameter.

    The variable `value` represents the __Value__ parameter.

    See [VEX snippets|/vex/snippets] for information on special syntax in the
    snippet parameter.  See [the VEX chapter|/vex/] for information on the VEX
    language.

==== Toggle Attribute Parameters ====

Mode:
    #id: simattrib_togglemode#_#

    Controls how toggle values are combined with existing attribute values.

    Set:
	Sets the attribute to the parameter value, disregarding any existing
	attribute values.

    Minimum:
	Set the attribute to the minimum of the parameter value and the
	existing attribute's value.

    Maximum:
	Set the attribute to the maximum of the parameter value and the
	existing attribute's value.

    Toggle:
	Toggles the existing attribute value.

Value:
    #id: simattrib_togglevalue#_#

    The value to use for toggle attributes. Note that this may be modified
    by the __VEXpression__ below and combined with existing attributes, as
    specified by the __Mode__ parameter.


VEXpression:
    #id: simattrib_togglesnippet#_#

    The output of this VEX expression is evaluated and combined with existing
    attribute values as specified by the __Mode__ parameter.

    The variable `value` represents the __Value__ parameter.

    See [VEX snippets|/vex/snippets] for information on special syntax in the
    snippet parameter.  See [the VEX chapter|/vex/] for information on the VEX
    language.

@related
- [Node:sop/guidegroom]
- [Node:sop/hairclump]
- [Node:sop/guidecollidevdb]
