#type:     node
#context:  sop
#internal: guidemask
#icon:     SOP/guidemask

= Guide Mask =

"""Creates masking attributes for other grooming operations."""

This operator creates and manipulates attributes that can be used to drive
other grooming operations.

@parameters

== General ==

=== Group ===

Group Type:
    #id: grouptype

    The type of input group.

Group:
    #id: group

    A group to use for masking. Any operations will only be applied to the
    primitives or points within this group.

Set Ungrouped to Zero:
    #id: zeroungrouped

    Sets the mask value of any primitives or points not specified within the
    __Group__ parameter to zero.

=== Input Mask ===

Input Mask:
    #id: inputmask

    The initial value of the mask. Other masking operations are multiplied with
    this value.

    [Include:fur_common#parmoverride]

=== Output ===

Visualize Mask:
    #id: vismasks

    Visualize mask values in the viewport.

Output Type:
    #id: outattribtype

    The type of attribute to create.

    Primitive:

	Create a primitive attribute.

    Point:

	Create a point attribute.

Output Attribute:
    #id: outattrib

    The name of the output mask attribute.

Create Group of Affected Primitives:
    #id: createprimgroup

    Create a group of all primitives that have non-zero mask values.

    When __Output Type__ is __Point__, any primitives that have any point
    with a non-zero value are added to this group.

Group:
    #id: outprimgroup

    The name of the group of affected primitives.

Output Integer Attribute:
    #id: createintattrib

    Create an integer attribute with a specific value for any affected
    primitives.

Integer Attribute:
    #id: intattrib

    The name of the integer attribute.

Value:
    #id: intattribvalue

    The value to set the integer attribute to.

Mask Threshold:
    #id: intattribthresh

    The integer attribute is only set on primitives that have at least this
    mask value.

== Additional Masks ==

=== Noise Mask ===

Use Noise Mask:
    #id: usenoisemask

    Masks using a noise function. When a 'rest' attribute it exists it is
    used as the noise space.

Amount:
    #id: noisemaskamount

    The amount of noise to apply.

    [Include:fur_common#parmoverride]

Frequency:
    #id: noisemaskfreq

    The frequency of the noise.

Gain:
    #id: noisemaskgain

    Contrast of the noise function.

    [Include:fur_common#parmoverride]

Bias:
    #id: noisemaskbias

    Bias the noise towards low or high values.

    [Include:fur_common#parmoverride]

Center Noise Around One:
    #id: noisemaskcenterone

    Create noise with an average around `1.0`. This is useful for creating
    attributes that are used as scale factors rather than masks.

    With this disabled, noise is in the `0` to `1` range, with it enabled it
    is `0` to `2`.

Fractal Noise:
    #id: noisemaskfractal

    Apply fractal noise on top of the base noise.

Max Octaves:
    #id: noisemaskoct

    Maximum number of octaves to generate.

Lacunarity:
    #id: noisemasklac

    The frequency increment of each successive fractal noise octave.

Roughness:
    #id: noisemaskrough

    [Include:fur_common#parmoverride]

=== Length Mask ===

Use Length Mask:
    #id: uselengthmask

    Mask curves based on their length.

Mode:
    #id: lengthmode

    Controls how curve length is compared against the __Length__ parameter below.

    Longer Than:
	    Select curves that are longer than the length specified by __Length__ below.

    Same As:
	    Select curves that are about the same length the one specified by __Length__ below.

    Shorter Than:
	    Select curves that are shorter than the length specified by __Length__ below.

    Normalized Ramp:
	    Maps the length of each curve to ramp parameter. The ends of the ramp correspond to the shortest and longest curve in the input geometry.

    Range Ramp:
	    Maps the length of each curve to ramp parameter. The ends of the ramp correspond to the are explicitly specified by the __Minimum Length__ and __Maximum Length__ parameters.

Length:
    #id: lengthref

    The reference length to compare against.

    [Include:fur_common#parmoverride]

Falloff Range:
    #id: lengthfalloffrange

    [Include:fur_common#parmoverride]

Falloff Decay:
    #id: lengthfalloffdecay

    [Include:fur_common#parmoverride]

Minimum Length:
    #id: lengthrangemin

    The start of the ramp when __Mode__ is set to  __Range Ramp__.

Maximum Length:
    #id: lengthrangemax

    The end of the ramp when __Mode__ is set to  __Range Ramp__.

Presets:
    #id: lengthpresets

    A set of useful presets for the __Length Ramp__ parameter.

    Selecting an item from the drop-down applies the preset.

Apply:
    #id: lengthapplypreset

    Apply the selected preset again.

Length Ramp:
    #id: lengthramp

    The ramp that curves are mapped to in __Normalized Ramp__ mode and __Range Ramp__ mode.


=== Skin Curvature ===

Use Skin Curvature Mask:
    #id: useskincurvmask

    Mask curves based on the skin curvature at their root position.

Concave Maximum:
    #id: skincurvconcavemax

    The maximum concave curvature to consider. Any curvature beyond this
    is mapped to the start of the ramp.

Convex Maximum:
    #id: skincurvconvexmax

    The minimum convex curvature to consider. Any curvature beyond this
    is mapped to the end of the ramp.

Smoothing Strength:
    #id: skincurvesmoothstrength

    Smooth curvature values. This can be useful to smooth out spikes in curvature which can be caused by certain topological features.

Presets:
    #id: skincurvpresets

    A set of useful presets for the __Curvature Ramp__ parameter.

    Selecting an item from the drop-down applies the preset.

Apply:
    #id: skincurvapplypreset

    Applies the selected preset again.

Curvature Ramp:
    #id: skincurvramp

    Curvature is mapped to this ramp. Maximally concave areas are mapped to the start of the ramp, flat areas to the center and maximally convex areas to the end.

    TIP:
	    Try out some of the __Presets__ above to get a feeling for how this ramp affects the mask.

=== Geometry Mask ===

Use Geometry Mask:
    #id: usegeomask

    Mask curves on the inside or outside of a surface geometry connected to the fourth input.

Voxel Size:
    #id: geovoxelsize

    The voxel size used to generate a VDB SDF representation of the connected geometry.

Interior Range:
    #id: geointrange

    Controls how far into the interior of the surface the mask is applied. The band specified by exterior range and interior is mapped to the __Depth Ramp__ below.

Exterior Range:
    #id: geoextrange

    Controls how far outside of the surface the mask is applied. The band specified by exterior range and interior is mapped to the __Depth Ramp__ below.

Presets:
    #id: geodepthramppresets

    Applies useful presets to the __Depth Ramp__.

Depth Ramp:
    #id: geodepthramp


Blur Voxel Values:
    #id: geodoblur

    Blur the generate mask volume.

Blur Radius:
    #id: geoblurradius

    Blur voxel values within this radius.

Blur Iterations:
    #id: geobluriters

    The number of times to blur voxel values.

=== Random Mask ===

Use Random Mask:
    #id: userandommask

    Mask a percentage of randomly selected primitives.

Previous Masks:
    #id: randommaskcombine

    Controls how other masks influence are combined with the random values.

    Multiply Fraction And Value:
	
	    The fraction is multiplied with any other masks, meaning fewer primitives will be selected in areas that have low mask values.

	    The output mask value is also multiplied by the previous mask values.

    Multiply Fraction:
	
	    The fraction is multiplied with any other masks, meaning fewer primitives will be selected in areas that have low mask values.

	    The output value of selected primitives is not influenced by previous masks. It is purely defined by the __Variation__, and __Gain__ parameters of the random mask.

    Multiply Value:

	    The defined by the __Fraction__ parameter is used as is. Only the output values are multiplied with the previous mask values.


Seed:
    #id: randommaskseed

    The seed value to use for the random mask. This is combined with the primitive number or the 'id' attribute of the primitive to generate random values.

Fraction:
    #id: randommaskfrac

    The fraction of primitives select. `1.0` selects all primitives.

Variation:
    #id: randommaskvar

    Creates some variation in the output values of selected primitives. At `0.0`, all primitives are set to a mask value of `1.0`.

Gain:
    #id: randommaskvargain

    The contrast of output values when __Variation__ is set to a value higher than `0.0`.

=== Curve Mask ===

Use Curve Mask:
    #id: usecurvemask

    Mask curves along their length using a ramp parameter.

Range In Absolute Length:
    #id: curvemaskabsrange

    __Range Min__ and __Range Max__ are specified in terms of the length of the curve, rather than as normalized value between `0.0` and `1.0` for the start and end of each curve.

Range Min:
    #id: curvemaskrangemin

    Specifies the start position of the __Curve Mask Ramp__ along the length of the curve.

Range Max:
    #id: curvemaskrangemax

    Specifies the end position of the __Curve Mask Ramp__ along the length of the curve.

Effect Position:
    #id: curvemaskeffectpos

    Specifies the position where the highest mask value is applied within the range.

Falloff:
    #id: curvemaskfalloff

    Specifies how the ramp drops of from the peak point.

Influence Width:
    #id: curvemaskwidth

    Specifies how wide the area of influence is.

Curve Mask Ramp:
    #id: curvemaskramp

    Controls how point along the length of the curve is affected. This can be controlled directly or set via the parameters above.

@related
- [Node:sop/guideprocess]
- [Node:sop/hairclump]
