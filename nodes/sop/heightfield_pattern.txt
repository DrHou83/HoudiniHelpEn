= HeightField Pattern =

#type:     node
#context:  sop
#internal: heightfield_pattern
#icon:     SOP/heightfield_pattern

"""Adds displacement in the form of a ramps, steps, stripes, Voronoi cells, or other patterns."""

This node can be useful for creating ramps, steps, and filling out backgrounds to create more visual interest.

[Image:/images/nodes/sop/heightfield_pattern.jpg]

TIP:
    You could also use this node with a mask layer to, for example, make a gradient mask using the ramp pattern.


@parameters

Pattern Layer:
    #id: layer
    
    The name of the layer to displace.

[Include:_heightfield_common#masklayer]
    
[Include:_heightfield_common#combine]   
    
[Include:_heightfield_common#blend]

Height:
    #id: height
    
    The distance to displace the layer, in meters.

Base Height:
    #id: baseheight
    
    The offset from the initial heightfield's elevation that the displacement will start.
    
Post Blur Radius:
    #id: postblurradius
    
    After the displacement how much blurring should occur. Usually used to smooth out sharp peaks due to low grid resolution.


~~~ Pattern ~~~

Pattern:
    #id: pattern
    
    The displacement pattern to apply to the input.
    
    :fig:[Image:/images/nodes/sop/heightfield_pattern_ramp2.jpg]
        A linear, concentric, or radial ramp.
    
    :fig:[Image:/images/nodes/sop/heightfield_pattern_expramp.jpg]
        Exponential ramp.
    
    :fig:[Image:/images/nodes/sop/heightfield_pattern_steps.jpg]
        Linear steps.
    
    :fig:[Image:/images/nodes/sop/heightfield_pattern_stripes.jpg]
        Strips of displacement and no displacement.
    
    :fig:[Image:/images/nodes/sop/heightfield_pattern_stars.jpg]
        Displacement in the shape of stars or other radially symmetrical polygons.
    
    :fig:[Image:/images/nodes/sop/heightfield_pattern.jpg]
        Voronoi cells.

Rotate:
    #id: rotate
    
    Rotates the pattern around the center of the input volume.
    
Size:
    #id: size
    
    Uniform size of the pattern. The "Step" pattern ignores this parameter and uses its own __Rise over run__ and __Step height__ parameters to scale the steps.
    
Scale:
    #id: scale
    
    Lets you stretch the pattern in one direction or the other.
    
Center:
    #id: t
    
    Moves the pattern across the volume grid.
    
Phase:
    #id: phase 
    
    For certain repeating periodic patterns, offsets the start of the pattern, so you can move the points of repetition across the grid.

~~~ Ramp ~~~

Mode:
    #id: rampmode
    
    Whether to ramp linearly (across the grid), concentrically (from the center of the grid outward), or radially (sweeping around the grid in a circle).

Repeat:
    #id: ramprepeat
    
    Repeats the ramp outside the specified size. When this is off, the pattern streaks the first and last values.

Mirror:
    #id: rampmirror
    
    :fig:[Image:/images/nodes/sop/heightfield_pattern_mirror.jpg]
        When __Repeat__ is on, this reverses every other ramp so the starts and ends of the repetitions line up.

Ramp Remapping:
    #id: rampremap
    
    Shape of the ramp to displace.

~~~ Steps ~~~

Use the __Phase__ to offset the pattern horizontally.

Rise over Run:
    #id: riseoverrun
    
    Proportion of height change to step distance. Use the __Step height__ to set the actually size of the steps.
    
Step Height:
    #id: stepheight
    
    Height of each individual step in meters.
    
Step Reference Height:
    #id: steprefheight

    Vertical offset for the step pattern.

~~~ Stripes ~~~

Use the __Phase__ to offset the stripe pattern.

Stripe Width:
    #id: stripewidth

    Scaling factor on the __Size__ parameter, controlling the width of the spaces between the stripes.

~~~ Stars ~~~    

Shape Size:
    #id: shapesize
    
    Size of the individual stars.

Size Randomness:
    #id: shapesizerandom
    
    Varies the size of each star randomly. Larger numbers give more variation.
    
Shape Rotate:
    #id: shaperotate
    
    Rotates the individual stars in the pattern. To rotate the star placement, use the __Rotate__ parameter.
    
Rotate Randomness:
    #id: shapeangleradom
    
    Varies the rotation of each star randomly. Larger numbers give more variation.
    
Shape Jitter:
    #id: shapejitter
    
    Varies the placement of each star randomly. Larger numbers give more variation.
    
Sides:
    #id: shapesides
    
    Number of points on each star.
    
Roundness:  
    #id: shaperoundness
    
    The concavity or convexity of the sides of the star.
    
Starness:
    #id: shapehexness
    
    How much to inset the sides of the stars.

~~~ Voronoi ~~~

Jitter:
    #id: voronoijitter
    
    How much each cell varies from a square. A value of 0 gives a square grid of cell walls. Higher values vary the size of each cell randomly.
    
Wall:
    #id: voronoiwall
    
    Scaling factor on the __Size__ parameter, controlling the thickness of the walls between cells.
    
~~~ Distortion ~~~

Enable Distortion:
    #id: dodistortion
    
    Add noise to the displacement pattern to make it look like mathematical.
    
Noise Type:
    #id: distort_curl
    
    The type of noise to add to the displacement pattern.
    
Amplitude:
    #id: distort_amp
    
    The strength of the noise.
    
Element Size:
    #id: distort_element_size
    
    Period (wavelength) of the noise.
    
Element Scale:
    #id: distort_element_scale
    
    Stretches the noise in different axes.

Offset:
    #id: distort_offset
    
    Offsets the noise pattern in world space.

Roughness:
    #id: distort_rough

    Controls the coarseness of the noise.

Max Octaves:
    #id: distort_maxoctave
    
    Limits the noise to a fixed number of iterations.
    
Substeps:
    More substeps give more accurate and stable results, but are slower. However, sometimes the chunkiness of a low step size creates an aesthetically interesting effect.


