= Invoke Compiled Block =

#type:     node
#context:  sop
#internal: invoke
#icon:     SOP/invoke

"""Processes its inputs using the operation of a referenced compiled block."""

== Overview ==

This node runs a compiled block defined elsewhere to process this node's inputs, as if the referenced block was wired in instead of this node.

This is useful in two ways:

* You can use it to duplicate a block of functionality in different places in the network without having to copy or reference nodes.

* You can create a digital asset with a parameter that accepts a reference to a compiled block, and then use that block as part of the asset's operation. For example, if you made an asset that generated a tree, you could allow the user to pass in an optional block to process each leaf as the asset generates it.

NOTE:
    The parameters on the nodes in the invoked block will be evaluated _in their original locations_.


== Inputs ==

* You can specify a number of inputs on this node. Each input can "override" the input of a [Block Begin Compile node|Node:sop/compile_begin] in the referenced block. (Remember that a compiled block must have a Begin Compile node at each "entry point" into the block.)

* The inputs are matched to the Begin Compile nodes by the value of their __Input name__ parameters.

    For example, if you set the __Input name__ parameter on a [Block Begin Compile node|Node:sop/compile_begin] in the block to `piece`, and then create an input on this node and also set its __Input name__ to `piece`, it will override the input for that Begin Compile node when this node executes the block.

* If the block has a [Block Begin Compile node|Node:sop/compile_begin] that is not overriden by an input to this node, it will execute using _its own input where the block is defined_.

    For example, if the block has two Begin Compile nodes with __Input name__ values of `foo` and `bar`, but this node only has one input that overrides `foo`, when this node executes the block, the Begin Compile node with __Input name__ `foo` will have its input override this node's input, but the Begin Compile node with __Input name__ `bar` will cook its actual input.


@parameters

Compile Block:
    #id: blockpath
    
    A path to the _last_ node in the compiled block you want to execute. 

Number of inputs:
    #id: inputs
    
    Controls the number of inputs this node has.

Input Name:
	#id: name#
    
    The value of the __Input name__ on the [Block Begin Compile node|Node:sop/compile_begin] you want to override with this input. This is _not_ a path to the Begin Compile node itself.

Input Path:
	#id: inputpath#

	If you leave this blank, this input uses its connected geometry, if any. However, if you specify a path to a geometry node here, it will use that geometry as input instead.

Unload Behaviour:
    #id: unload
    
    Whether to unload the executed block's intermediate data (or cache it on this node). Since compiled blocks are usually used for repeated sections that shouldn't cache, this parameter defaults to _always unload_. This setting uses less memory.

    Never:
        Don't unload (that is, cache the executed block's intermediate data).

    Use node's flag:
        Check this node's [Unload flag|/network/flags#sop_other] for whether to unload the cache.
    
    Always:
        Always unload the intermediate data (this is, do not cache).


@related
- [Node:sop/compile_end]
- [Node:sop/compile_begin]

