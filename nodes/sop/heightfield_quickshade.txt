= HeightField Quick Shade =

#type:     node
#context:  sop
#internal: heightfield_quickshade
#icon:     SOP/heightfield_quickshade

"""Applies a material that lets you plug in textures for different layers."""

This node applies a pre-made material to the input height field. The material lets you set base colors, and then associate textures with different layers. For example, with mountainous terrain you could use height field nodes to generate "snow", "treeline", and "valley" layers, and assign them different texture maps in the material.

This node has the material's controls in its parameter interface, so you can edit the material in SOPs.

The material has the basic controls usually found in terrain shaders for game engines.

== Tips ==

* The __Ambient__, __Diffuse__, and __Specular__ colors at the top of the interface are _tints_ multiplied by _all_ textures. You will usually want to leave them as white or grey. To control the base color of the height field, specify a texture on the __Base texture__ tab.

* The textures will tile if they don't fully cover the surface area.

* Instead of applying textures to different layers, you can leave the __Terrain mask__ field blank and simply layer the texture over the base texture everywhere.


@parameters

Ambient:
    #id: ogl_amb
    
    Ambient response color.
    
Diffuse:
    #id: ogl_diff
    
    Diffuse tint color.

Specular:
    #id: ogl_spec
    
    Specular reflection tint color. You can specify a specular map on the __Light textures__ tab.

Specular Model:
    #id: ogl_spec_model
    
    Specular model used for specular reflections, Phong, Blinn, or GGX.

Roughness:
    #id: ogl_rough
    
    Specular roughness. Higher roughness diffuses highlights, lower roughness sharpens highlights. Terrain usually has a very high roughness (close to 1). Low roughness will tend to look like plastic. You can specify a roughness map on the __Light textures__ tab.


== Base Texture ==
    
Map Name:
    #id: base_map
    
    Turn on the checkbox to use this texture image file.

Projection:
    #id: base_triplanar
    
    How to project the texture onto the height field geometry.

    Terrain UV Coords:
        Use the terrain grid is implicit UVs (the default). You can use the texture translation controls below to position, scale, and rotate the texture onto the terrain.
       
    Triplanar:
        Use the surface geometry and normals to generate texture coordinates. This is good for steep terrain. You should use square textures with this option.
       
    Ortho X:
        Project the texture along the X axis.
       
    Ortho Y: 
        Project the texture along the Y axis.
       
    Ortho Z: 
        Project the texture along the Z axis.

UV Scale:
    #id: base_uv_scale
    
    Scales the implicit UVs to make the texture bigger or smaller.
    

UV Translate:
    #id: base_uv_trans
    
    Offsets the implicit UVs to make the texture move across the surface.
    
UV Rotate:
    #id: base_uv_rot
    
    Rotates the implicit UVs to make the texture rotate across the surface. 
    
Triplanar Texture Size:
    #id: base_tp_scale
    
    When __Projection__ is "triplanar", the size of the texture in world space (in meters).
    
Triplanar Sharpness:
    #id: base_tp_sharp
    
    Controls how textures blend at the corners of the projected cube. Higher values give a smaller blending region, lower values produce a more gradual blend.

Triplanar Offset:
    #id: base_tp_offset
    
    Offsets the projected cube to move the texture across the surface.

Triplanar Axis Blend:
    #id: base_tp_blend
    
    Scaling factors for each axis. Setting them all to 1 does a true triplanar projection. Setting an axis to 0 will result in no texture projection in that direction.


== Texture 1-3 ==

Terrain Mask:
    #id: tex1_mask
    
    The name of the layer to fill with this texture. If you leave this field blank, the texture will layer over the base texture across the entire surface. The material multiplies the layer values by the texture, so layer opacity controls texture opacity.
    
Texture 1-3:
    #id: tex1_map
    
    Turn on the checkbox to use this texture image file.
        
Use Triplanar Projection:
    #id: tex1_triplanar
    #contentfrom: #base_triplanar
    
UV Scale:
    #id: tex1_scale
    #contentfrom: #base_uv_scale
    
UV Translate:
    #id: tex1_trans
    #contentfrom: #base_uv_trans
    
UV Rotate:
    #id: tex1_rot
    #contentfrom: #base_uv_rot
   
Triplanar Texture Size:
    #id: tex1_tp_scale
    #contentfrom: #base_tp_scale
        
Triplanar Sharpness:
    #id: tex1_tp_sharp
    #contentfrom: #base_tp_sharp

Triplanar Offset:
    #id: tex1_tp_offset
    #contentfrom: #base_tp_offset

Triplanar Axis Blend:
    #id: tex1_tp_blend
    #contentfrom: #base_tp_blend


== Light Textures ==
    
Roughness Map:
    #id: roughmap
    
    Turn on the checkbox to use this texture image to control roughness.
    
Invert Roughness Map (Glossiness):
    #id: invert_roughmap
    
    By default the material interprets roughness maps as 1 is rough, 0 is glossy. This inverts that so 1 is glossy and 0 is rough.

Roughness Channel:
    #id: roughmap_comp
    
    Which channel in the image to use as the roughness: Luminance, Red, Green, Blue or Alpha.

Specular Map:
    #id: specmap
    
    Turn on the checkbox to use this texture image to control specular.

Use Emission Map:
    #id: ogl_useemissionmap
    
    Enable the emission map. When off, it has no effect.
    
Emission Map:
    #id: emissionmap
    
    Turn on the checkbox to use this texture image to control emission. This should be an RGB texture map. The material adds the texture to all diffuse and specular reflections after it computes lighting. It is not affected by lights. You can use this to add "glow". 


== Tinting ==

Visualization tinting:
    Performs different tinting operations depending on the menu choice.
    
    Unchanged:
        Do not add or remove any tinting.
    
    Mask:
        Tint the areas covered by the mask layer red.
    
    Color:
        Look for three layers named `C.r`, `C.g`, and `C.b` and use them to tint the output.
    
    None:
        Removing any existing tints.



