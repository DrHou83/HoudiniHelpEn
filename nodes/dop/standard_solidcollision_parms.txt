#type: include

Collide with objects:
    #id: collideindependent

    If enabled, the geometry in this object will collide with all other objects. These other objects may belong to the same solver or they may be be [Static Objects|Node:dop/staticobject], [RBD Objects|Node:dop/rbdobject], or the [Ground Plane|Node:dop/groundplane]. When the __Collision Detection__ parameter on the Static Object is set to __Use Volume Collisions__, then the polygon vertices will be tested for collision against the signed distance field (SDF) of the Static Object. When __Collision Detection__ is set to __Use Surface Collisions__, then geometry-based continuous collision detection is used. The geometry-based collisions collide points against polygons, and edges against edges.
    
    When surface-based collisions are used, only polygons and tetrahedrons in the [Static Object|Node:dop/staticobject] are considered. Other types of primitives, for example spheres, are be ignored. The geometry of the external objects (e.g. Static Object) is treated as being one-sided; only the outsides of the polygons, determined by the winding order, oppose collisions.

    When volume-based collisions are enabled, only points will be colliding against the volumes, not the interiors of polygons and tetrahedrons. When colliding against small volumes, this may mean that you need to increase the number of points on your mesh to get accurate collision results.

Collide with other objects with same solver:
    #id: collidecodependent

    When enabled, this object will collide with other objects that have the same solver. These collisions are handled using continuous collision detection, based on the geometry (polygons and/or tetrahedrons). For collisions between objects on the same solver, the polygons are treated as two-sided. Both sides of the polygons collide. The surface of a tetrahedral mesh only collides on one side: the outside.

Collide within this object:
    #id: collideself

    If disabled, no two tetrahedrons within this object can collide with each other.
    
Collide within each component:
    #id: collideselfcomponent

    If disabled, no two tetrahedrons that belong on the same connected component may collide with each other.
 
Collide within each fracture part:
    #id: collideselffracturepart

    This option only has an effect when fracturing is enabled on the solver. If disabled, no two tetrahedrons that belong on the same fracture part may collide with each other. Fracture parts are controlled by the integer-valued `fracturepart` primitive attribute.


