#type: include

:null:
    #id: displacetype_bump

    A fast alternative to displacement that only modifies normals to give the appearance of surface height variations. The surface offset is defined by the __value__ input. The position isn't modified.

:null:
    #id: displacetype_normal

    Sets the normal to the vector __value__, after converting from the set __Normal Space__ and applying any flipping as defined by __Flip X__ and __Flip Y__. The normal is applied relative to the chosen __Space__.

:null:
    #id: displacetype_dispnormal

    Offsets __P__ by a component of __value__ in the direction of __N__. Updates __N__ to fit the new surface positions.

:null:
    #id: displacetype_dispvector

    Offsets __P__ by the __value__ vector. The __value__ is applied in the chosen __Space__.

:null:
    #id: aniso

    Causes reflections to be stretched in the direction defined by __Anisotropy Direction__.

    This simulates microscopic bumps with a directional bias, causing light to be scattered more in the defined direction. This is typical of brushed metals.

    [Image:/images/nodes/vop/principled_shader_aniso.png]

:null:
    #id: aniso_notes

    The effect of this parameter increases with __Roughness__. It has no effect at all when __Roughness__ is `0.0`.

:null:
    #id: anisodir

    Controls the direction of __Anisotropy__ relative to the UV coordinates of the surface. At `0.0`, reflections are stretched in the __U__ direction. At `0.5`, the direction is rotated by `90 degrees` to the __V__ direction. `1.0` equals `180` degrees. Since the effect is symmetrical this produces the same result as `0.0`.

    The direction of rotation also depends on the UV layout. When the UVs are layed out such that textures appear on the surface without mirroring, higher values rotate counter-clockwise.

    [Image:/images/nodes/vop/principled_shader_anisodir.png]

    The effect of this parameter diminishes with decreasing __Roughness__ and __Anisotropy__.

:null:
    #id: frontface_shader

    Shade both sides of a surface as if they were the front side.

    Any transparent part of the shader is unaffected, since transparency relies
    on the orientation of surfaces to function correctly.

:null:
    #id: transcolor

    Tint rays with this color as they pass through an object. The amount
    of tinting depends on the distance a light ray travels within the object. You can scale the tinting using __At distance__.

:null:
    #id: transdist
    
    A ray must travel this distance within the object before it is completely colored by the __Transmission color__. Shorter distances give less tinting, longer distances give a darker and more saturated version of the __Transmission Color__.

    [Image:/images/render/mug/nested_dielectrics/AtDistanceExamples.jpg]

    TIP:
	Colors that are not fully saturated work best with the __At Distance__ parameter.

	Color components that are set to `0.0` aren't absorbed at all, while components set to `1.0` are fully absorbed. This means that __At Distance__ has no effect on those components.

:null:
    #id: dispersion
    
    Spreads and colors refraction rays to simulate the effect of a spectrum of
    wavelengths within the refracted light. The larger this value, the larger the spectral separation.
    
    When this parameter is set to a non-zero value, refracted rays are tagged with a single wavelength in the visible spectrum. Each of these wavelengths modify the underlying index of refraction (IOR) causing the rays to separate as they travel through the refractive material. 
    
    [Image:/images/render/mug/nested_dielectrics/DispersionCompare.jpg]

:null:
    #id: priority

    The shaded surface's place in an order of precedence for overlapping transparent materials. A value of 0 means the surface priority should be ignored. Surfaces with lower numbers (higher priority) "override" surfaces with higher numbers (lower priority). Mantra will only calculate the shaders for the highest priority object in a given area, creating the effect of higher priority objects overriding and removing lower priority objects in the same overlapping space.
    
    [Image:/images/render/mug/nested_dielectrics/NestedOrderTest.jpg]

    :fig:[Image:/images/render/mug/nested_dielectrics/NestedRenderAWithLabel.jpg]

        In this render, the red sphere and the blue box have the same surface priority. This causes problems with refraction and absorption, because it's not clear to Mantra which surface is inside or outside.

    :fig:[Image:/images/render/mug/nested_dielectrics/NestedRenderBWithLabel.jpg]

        In this example, the red sphere has a higher priority than the blue box (lower numbers mena higher priority) so it "carves out" its volume from the box (Mantra simply ignores whichever parts of the box have overlapped the sphere). The absorption and refraction is now correct for the red sphere being embedded in the blue box. This setup would work well for something like ice cubes floating in water.

    :fig:[Image:/images/render/mug/nested_dielectrics/NestedRenderCWithLabel.jpg]

        In this example, the surface priority values are switched so the blue box has higher priority. This has the effect of removing any parts of the red sphere which overlapped the blue box. This setup would work for something like water droplets resting on the surface of a glass.

    This parameter only takes effect when __Enable Absorption and Nested Dielectrics__ is turned on in the [Mantra render node|Node:out/ifd].
