#type: node
#context: vop
#internal: pworleynoise
#icon: VOP/pworleynoise

= Periodic Worley Noise =

"""Computes 1D, 3D, and 4D tileable Worley noise, which is synonymous
with "cell noise"."""

This operator computes 1D, 3D, and 4D tileable Worley noise, which is
synonymous with "cell noise".

Periodic Worley noise works by scattering points randomly through
space according to a nice Poisson distribution, generating cell-like
patterns. In addition to regular Worley noise, this version smoothly
repeats itself subject to given repetition period values. The generated
noise is not anti-aliased. For best shading results, use the
anti-aliased Celluar Noise instead.

The input period values are how long it takes for the pattern to repeat
itself in a certain dimension. These values must be non negative
integers. A value of 0 for the period in a given dimension means that
the pattern does not repeat itself in that dimension.

The metric option let's users choose which distance metric to use when
calculating distance between points. Euclidean (default), Manhattan, 
and Chebyshev are the options.

The main return values represent the distances to the N closest points,
where N is 2 or 4. The distances are sorted from closest to farthest,
such that:

{{{
dist1 <= dist2 <= dist3 <= dist4
}}}
If only two points are scattered, dist3 and dist4 are undefined. It is
possible to combine these distances to generate noise patterns. The
noise generated tends to be very cellular in nature. In fact, one
attractive feature is that you can determine cell boundaries by using
the expression:

{{{
if (dist2 - dist1 < tolerance) ...
}}}
which will be true if the point in space is crossing the boundary
between two cells. You can look at dist1 as the amount of generated
noise (see other pattern generators such as Boxes or Stripes), which can
be connected to a mixing bias (see Mix), a displacement amount (see
Displace Along Normal), or other float inputs.

The seed associated with the first closest point is also returned. The
seed is pretty much guaranteed to be unique for every point, meaning
that it is unlikely that two points close by will have the same seed
associated with them.

The relative costs for computing noise of different types is roughly:

{{{
Cost | Noise Type
-----+-------------------------
 1.0 | Perlin Noise             (see Periodic  Noise operator)
 1.1 | Original Perlin Noise    (see Turbulent Noise operator)
 1.8 | Worley Noise             (see Worley    Noise operator)
 1.8 | Periodic Worley Noise
 1.9 | Voronoi Noise            (see Voronoi   Noise operator)
 2.1 | Sparse Convolution Noise (see Turbulent Noise operator)
 2.3 | Alligator Noise          (see Turbulent Noise operator)
}}}


@related
    - [Node:vop/cellnoise]
    - [Node:vop/periodicnoise]
    - [Node:vop/aanoise]
    - [Node:vop/turbnoise]
    - [Node:vop/voronoise]
    - [Node:vop/worleynoise]

