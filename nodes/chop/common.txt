#type: include

== Channel == (channel)

Align:
    The alignment option to use.

    Extend to Min/Max:
        Find the earliest start and latest end, and extend all
        inputs to that range using the extend conditions.
    Stretch to Min/Max:
        Find the earliest start and latest end, and stretch every
        channel's start and end to that range.
    Shift to Minimum:
        Find the earliest start and shift all channels so they all
        start at that index. All channels are extended to the length
        of the longest one.
    Shift to Maximum:
        Find the latest end and shift all channels so they all end
        at that index. Extend all channels to the length of the
        longest one.
    Shift to First Interval:
        Shift all channels to the start of the first channel and
        sample all inputs using the first input's range.
    Trim to First Interval:
        Trim all channels to first channel's range.
    Stretch to First Interval:
        Stretch all channels to the first channel's range.
    Trim to Smallest Interval:
        Trim all channels to the smallest start/end interval. The
        start and end values may not come from the same channel.
    Stretch to Smallest Interval:
        Stretch all channels to the smallest start/end interval. The
        start and end values may not come from the same channel.

Range:
    Specifies the range of data to generate.

    Use Full Animation Range:
        All of the animated range.
    Use Current Frame:
        Only the sample at the current frame.
    Use Start/End:
        The range is specified from the __Start__ and __End__
        parameters.
    Use Value Animation:
        The range is taken from range of keys available in the
        evaluated Value parameters.
Start:
    #channels: /start

    The start time of the channel range.

End:
    #channels: /end

    The end time of the channel range.

Sample Rate:
    #channels: /rate

    The sample rate of the CHOP.

Number of Threads:
    The number of separate threads to use to evaluate the channel samples.
    The default is no threading.

    Since Houdini evaluates the VEX program for each sample in the input
    geometry, it can benefit greatly from threading on a multi-processor
    or multi-core machine when the CHOP nodes have many samples.

== Common == (common)

Some of these parameters may not be available on all CHOP nodes.

Scope:
    To determine which channels get affected, some CHOPs have a scope string. Patterns can be used in the scope, for example `*` (match all), and `?` (match single character). 
    
    The following are examples of possible channel name matching options:
    
    `chan2`:
        Matches a single channel name.
    
    `chan3 tx ty tz`:
        Matches four channel names, separated by spaces.
    
    `chan*`:
        Matches each channel that starts with `chan`.
        
    `*foot*`:
        Matches each channel that has `foot` in it.
    
    `t?`:
        The `?` matches a single character. `t?` matches two-character channels starting with t.  
    
    `r[xyz]`:
        Matches channels `rx`, `ry` and `rz`.
        
    `blend[3-7:2]`:
        Matches number ranges giving `blend3`, `blend5`, and `blend7`.
        
    `blend[2-3,5,13]`:
        Matches channels `blend2`, `blend3`, `blend5`, `blend13`.
    
    `t[xyz]`:
        `[xyz]`matches three characters, giving channels `tx`, `ty` and `tz`.
    
    
Sample Rate Match:
    The Sample Rate Match Options handle cases where multiple input CHOPsâ€™ sample rates are different.
    
    Resample At First Input's Rate:
        Use rate of first input to resample others.
        
    Resample At Maximum Rate:
        Resample to highest sample rate.
    
    Resample At Minimum Rate:
        Resample to the lowest sample rate.
        
    Error if Rates Differ:
        Does not accept conflicting sample rates.
    
Units:
    The units for which time parameters are specified.
    
    For example, you can specify the amount of time a lag should last for in seconds (default), frames (at the Houdini FPS), or samples (in the CHOP's sample rate).
    
    NOTE:
        When you change the Units parameter, it does not convert the existing parameters to the new units.
    
Time Slice:
    Time Slicing is a feature which boosts cooking performance and reduces memory usage. Traditionally, CHOPs calculate the channel over its entire frame range. If the channel does need to be evaluated every frame, then cooking the entire range of the channel is unnecessary. It is more efficient to calculate only the fraction of the channel that is needed. This fraction is known as a Time Slice.

Unload:
    Causes the memory consumed by a CHOP to be released after it is cooked and the data passed to the next CHOP.

Export Prefix:
    
    The Export prefix is prepended to CHOP channel names to determine where to export to. 
    
    For example, if the CHOP channel was named `geo1:tx`, and the prefix was `/obj`, the channel would be exported to `/obj/geo1/tx`.
    
    NOTE:
        You can leave the __Export Prefix__ blank, but then your CHOP track names need to be absolute paths, such as `obj:geo1:tx`.

Graph Color:
    Every CHOP has this option. Each CHOP gets a default color assigned for display in the Graph port, but you can override the color in the Common page under Graph Color. There are 36 RGB color combinations in the Palette.

Graph Color Step:
    When the graph displays the animation curves and a CHOP has two or more channels, this defines the difference in color from one channel to the next, giving a rainbow spectrum of colors.

== Transform Order == (transformorder)

Transform Order:
    #id: xord

    The left menu chooses the order in which transforms are applied. For example: scale, then rotate, then move. This can change the position and orientation of the object, in the same way that going a block and turning east takes you to a different place than turning east and then going a block.

    The right menu chooses the order in which to rotate around the X, Y, and Z axes. Certain orders can make character joint transforms easier to use, depending on the character.

== Transform == (transform)

Translate:
    #id: t

    Translation along XYZ axes.

Rotation:
    #id: r

    Degrees rotation about XYZ axes.

Scale:
    #id: s

    Non-uniform scaling about XYZ axes.

== Transform Pivot == (transformpivot)
Pivot:
    #id: p

    Local origin of the object.
    See also [setting the pivot point|/basics/objects] .

== Rotation Blending3 == (rotblend3)

Rotation Blending:
    Rotation channels typically don't blend well when treated as Euler angles, and straight linear blending can result in flips and odd rotations. Instead, shortest path blending can be used to properly blend orientations represented by Euler rotation angles.

    Euler:
        Rotation channels are blended like any other channel.

    Shortest Path (Linear):
        Two inputs are blended using shortest path rotation blending. If more than two blend inputs are connected, use __Fast Linear__.

    Shortest Path (Fast Linear):
        Multiple inputs are blended together using shortest path rotation blending.

== Rotation Blending2 == (rotblend2)

Rotation Blending:
    Rotation channels typically don't blend well when treated as Euler angles, and straight linear blending can result in flips and odd rotations. Instead, shortest path blending can be used to properly blend orientations represented by Euler rotation angles.

    Euler:
        Rotation channels are blended like any other channel.

    Shortest Path:
        Two inputs are blended using shortest path rotation blending.

== Blend Mask == (blendmask)

Mask:
    #id: mask

    Define which of the transform components (TX,TY,TZ,RX,RY,RZ,SX,SY,SZ) to blend.

