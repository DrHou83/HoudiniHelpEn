= Particle Tips and tricks =

== Individualized random behavior ==

To randomize behavior/parameters per particle, use the particle ID as part in the seed of the [rand|Exp:rand] function:

{{{
#!exp
rand($ID + <<some number>>)
}}}

For parameters with three components, you can add different offsets to each component to make sure they're seeded differently:

- `rand($ID + 1.0001)`
- `rand($ID + 10.0001)`
- `rand($ID + 100.0001)`

The [rand|Exp:rand] function always returns a value from 0 to 1. To quickly convert that number to some other range, use the
[fit01|Exp:fit01] function. For example, to make a random number between 0.2 and 0.8:

{{{
#!exp
fit01(rand($ID + 492.58), 0.2, 0.8)
}}}

== Scale effects by mass ==

It is often useful to use the __Scale__ parameter of various nodes to scale the effect of the node as a function of the particle's mass, as set with the [Icon:POP/property][Property POP|Node:pop/property].

For example, if all your particles have a mass between 0.2 and 0.8, you can make a node such as [Icon:POP/torque][Torque|Node:pop/torque] affect "heavy"
particles less by setting the __Scale__ parameter to:

{{{
#!exp
1 - $MASS
}}}
    
== Manually delete problem particles ==

As you fine tune a simulation close to a good solution, you may find that your network is working great except for a few rogue particles (for example, you have have collisions working perfectly except for one or two escaping particles).

Depending on time constraints, you may find that instead of going back and refining the network again, it's easier to just delete the particles manually before they can cause trouble.

steps>>
    #  [Go up|/ref/panes/network]  to the geometry level above your POP network.

    # Add a [Icon:COMMON/delete][Delete node|Node:sop/delete] after the POP network and turn on its  [display and render flags|/nodes/sop].

    # Run the [animation|/anim] with point numbers on in the viewer. Note the particle numbers of the particles causing problems.

    # In the parameter editor, set __Entity__ to Points and turn on the __Enable__ checkbox on the __Number__ tab. In the __Pattern__ field, enter the space separated list of points to delete.

== Reading the `pstate` attribute ==

Houdini calculates the value of `pstate` by adding up the following values for each flag that is on:

table>>
    tr>>
        th>>Flag
        th>>Value
    tr>>
        th>>Primary
        th>>`1`
    tr>>
        th>>Stopped
        th>>`2`
    tr>>
        th>>Stuck
        th>>`4`
    tr>>
        th>>Just hit
        th>>`8`

