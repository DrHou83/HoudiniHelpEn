= Using groups to organize particle behavior =

== Overview ==

You can divide particles into groups. The [Icon:POP/group][Group POP|Node:pop/group] lets you sort its input particles into groups based on an various criteria. The [Icon:POP/proximity][Proximity POP|Node:pop/proximity] creates a group for each particle containing other particles that are nearby. Other operators may create groups as a side effect as they work. For example, the [Icon:POP/kill][Kill POP|Node:pop/kill] lets you create a new group with the killed particles.

Groups are very useful because almost every node gives the option to apply the node's effects only to one or more groups in the input stream, instead of every particle in the stream. So, you can identify groups of particles based on certain properties, and then only apply some nodes to those groups, and not other particles.

For example, if you only want a node to affect particle older than one second, you could create a [Icon:POP/group][Group POP|Node:pop/group], set the group name to `old_enough`, and set the rule to `$AGE > 1`. Then, downstream from the group node, you can set the __Source group__ parameter of another node to `old_enough` to have it only act on the particles in that group (that is, particles older than one second).

== How to create particle groups ==

:task:Create a group based on an expression:
    # Create a [Icon:POP/group][Group node|Node:pop/group] and connect the particle stream to its input.

    # In the [parameter editor|/ref/panes/parms], enter the __Group Name__, then turn on the __Enable__ checkbox on the __Rule__ sub-tab of the __Create__ tab.

    # Enter an [expression|/expressions] in the __Rule__ field, or choose a commonly-used rule from the pop-up menu.

      The node will evaluate this [expression|/expressions] on each input particle, and if the expression returns true (non-zero), it puts the particle in the new group.

:task:Create a group from the particles inside a boundary shape:
    # Create a [Icon:POP/group][Group node|Node:pop/group] and connect the particle stream to its input.

    # In the [parameter editor|/ref/panes/parms], enter the __Group Name__, then turn on the __Enable__ checkbox on the __Bounding__ sub-tab of the __Create__ tab.

    # Use the parameters to set up the bounding shape. You can use an abstract box or sphere, an object, or metaballs.

      The node will put any particles inside the bounding shape into the new group.

:task:Create a group for each particle containing its closest neighbors:
    # Create a [Icon:POP/proximity][Proximity Node|Node:pop/proximity] and connect the particle stream to its input.

    # Set the __Group Name Root__. 
        
        This is the base name for the new groups that will be created, one for each input particle. The group names are created by appending the particle's ID to this name.

:task:Divide particles into multiple groups:
    # Create a [Icon:POP/group][Group node|Node:pop/group] and connect the particle stream to its input.

    # In the [parameter editor|/ref/panes/parms], enter the __Group Name__, then turn on the __Enable__ checkbox on the __Random__ sub-tab of the __Create__ tab.

    # Set the __Number of Groups__. 
            
        The groups will use the __Group Name__ with a number appended.

    # The default simply sorts the particles in order into the
      different groups (the first particle goes in the first group, the second particle goes in the second group, and so on). See the documentation for the __Group Index__ field for how to control the sorting with an expression.

:task:Group particles based on the node that created them:
    # Create a [Icon:POP/group][Group node|Node:pop/group] and connect the particle stream to its input.

    # In the [parameter editor|/ref/panes/parms], enter the __Group Name__, then turn on the __Enable__ checkbox on the __Generator__ sub-tab of the __Create__ tab.

    # In the __Generators__ field, enter a space-separated list of the generators whose progeny you want to group together.

      The node will put any particles in the input stream that were originally created by the generators into the new group.

:task:Group particles based on their instanced geometry:
    # Create a [Icon:POP/group][Group node|Node:pop/group] and connect the particle stream to its input.

    # In the [parameter editor|/ref/panes/parms], turn on the __Enable__ checkbox on the __Instances__ sub-tab of the __Create__ tab.

    # In the __Instances__ field, enter a space-separated list of the instanced objects whose particles you want to group together.

      The node will put any particles in the input stream whose instance attribute matches a value in the list into the new group.

== How to combine and filter particle groups ==

The controls on the [Icon:POP/group][Group POP|Node:pop/group]'s __Combine__ tab let you create a group that is a combination of existing groups.

steps>>
    # Create a [Icon:POP/group][Group node|Node:pop/group] and connect the particle stream to its input.

    # In the [parameter editor|/ref/panes/parms], click the __Combine__ tab.

    # Enter the name of the new group to create in the left-hand field on the first row.

    # Enter the name of the group from which to take particles in the right-hand field (or click the box beside the equal sign so the exclamation point is visible if you want to start with particles _not_ in the right-hand group).

      Once you set up the top row, additional rows become available to further combine and/or filter the contents of the new group.

    # For the additional rows, on the right-hand side, enter the name of another group of particles you want to combine with or filter from the new group.

    # Use the menu on the left side to choose how to combine/filter the groups.

    # Use the menu to choose how to combine this group with the new group.

      Click the box beside the equal sign so the exclamation point is visible if you want to do the logical opposite of the operation in the menu.

= How to use groups to control a particle simulation =

Almost all particle operators include a __Source group__ parameter that lets you limit the effect of a node to only the members of a given group in the input stream. So once you've grouped the particles, you can apply different nodes selectively to the particles in the groups.

Some complex operators such as the [Icon:POP/follow][Follow POP|Node:pop/follow], [Icon:POP/orbit][Orbit POP|Node:pop/follow], and [Stream POP|Node:pop/stream] use groups to divide the input stream into distinct classes (such as followers and leaders).

