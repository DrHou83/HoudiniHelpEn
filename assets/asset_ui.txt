= Edit an asset's user interface =

== Overview ==

Once you [create a digital asset|create], you can use the [Type properties window|/ref/windows/optype] to edit the new node's parameter interface. You can _promote_ parameters from the node inside the asset up to the asset's user interface. You can also add [render properties|/props/] to object assets for control over how they're rendered.

Right click an instance of the asset and choose __Type properties__, the click the __Parameters__ tab.

As you edit the asset's interface, remember that you need to click __Apply__ or __Accept__ in the type properties window to see the changes on the node.

== Create and promote parameters ==

:task:Promote a parameter:
    In the network editor, dive inside the asset and select the node with the parameter you want to promote. Find the parameter in the parameter editor pane. Then do one of the following:

    * Drag the parameter from a parameter editor into the parameter list of the type properties window.
    
        For parameters with multiple components (such as an X,Y,Z position parameter or an R,G,B color parameter), you can promote all components by dragging the _parameter label_, or a single component by dragging the component's text box.
    
    ~~ Or ~~

    * Right-click parameter and choose __Export Parameter to Type Properties__.

:task:Promote all parameters of a node:
    In the network editor, dive inside the asset and select the node with the parameter you want to promote. Then drag the node into the parameter list of the type properties window.

    If you drag a nested digital asset into the list, Houdini will promote the parameters from the nested asset with their organization intact.

:task:Promote hidden or un-draggable parameters:
    In the type properties window, on the __Parameters__ tab, click the __From nodes__ subtab under __Create parameters__. This shows a tree view of _every parameter_ on every node in the entire scene. Use it to find the node and parameter you want and drag it into the parameter list under __Existing parameters__.

:task:Create a new parameter from scratch:
    In the type properties window, on the __Parameters__ tab, click the __By type__ subtab under __Create parameters__. Drag the type of parameter you want to create into the parameter list under __Existing parameters__.
    
    You can channel reference the value of the parameter on nodes inside the asset, or use it in scripts.

:task:Make a menu parameter:
    # Create/promote an integer, string, file, or node path parameter.
    
    # Select the parameter under __Existing parameters__.
    
    # Under __Parameter description__, click the __Menu__ sub-tab.
    
    # Turn on __Use menu__, then choose a menu type from the popup menu next to it.
    
    # Click __Menu items__ to set up a static list of value/label pairs, or click __Menu script__ to write a script to generate the pairs dynamically. See the [help for the menu tab|/ref/windows/optype#menu_tab] for more information.
    
    You can channel reference the value of the parameter on nodes inside the asset, or use it in scripts.

== Organize parameters ==

:task:Organize parameters into groups:
    # In the type properties window, on the __Parameters__ tab, click the __By type__ subtab under __Create parameters__.
    
    # Drag a Folder into the parameter list under __Existing parameters__. 
    
    # With the folder selected, the controls under __Parameter description__ let you edit its type, label, and so on. The __Type__ lets you present folders as tabs, collapsible headings, boxed groupings, and other looks.
    
    # Drag existing parameters into the new folder.

    You can also drag a Separator into the parameter list to create a separator line between groups of parameters.

:task:Put consecutive parameters side-by-side to save space:
    # Select the first parameter and turn on __Horizontally join to next parameter__.

    # If you want to hide the label on a "side" parameter, turn off
      the checkbox next to the __Label__ option for that parameter.

== Set up the asset for animation ==

:task:Make a parameter [auto-scope|/anim/scope] in the channel editor:
    # Select the parameter under __Existing parameters__.
    
    # In the options under __Parameter description__, click the __Channels__ sub-tab.
    
    # Turn on the [Icon:BUTTONS/scope] Autoscope icon next to the channel(s).

== Add scripted controls and behavior ==

:task:Run a script whenever a parameter changes:
    In the type properties window, select the parameter under __Existing parameters__, then under __Parameter description__, on the __Parameter__ sub-tab, enter a script in the __Callback script__ field.
    
    The pop-up menu to the right of the __Callback script__ field lets you choose whether the script is HScript or Python.
    
    See the help for the [Parameters sub-tab|/ref/windows/optype#ref_win_optype_parm] for more information. See the HOM documentation for [information on Python parameter callback scripts|/hom/locations#parameter_callback_scripts].

:task:Run a script when an instance is created or destroyed:
    See the HOM documentation for [Python event handlers|/hom/locations#python_event_handlers].

== Handles and HUD sliders ==

You can also promote [handles|/basics/handles] and HUD sliders from nodes inside the asset, so they appear in the viewport when the asset is selected. The type properties window must be open.

If you want a handle to drive parameters on nodes inside the asset, you must first promote the parameters onto the asset, then you can bind them to a handle.

NOTE:
    Handles and HUD sliders only appear when you are using the [Icon:TOOLS/handles] Handles tool, unless you right-click them and turn on "Persistent".

:task:Promote handles or HUD sliders from inside the asset:
    # Dive inside the asset and select the node with the handle/slider you want to promote. Make the handle visible in the viewport.
    
        For HUD sliders, make sure their position and settings are what you want for the asset before promoting them.
    
    # Right-click the handle or slider and choose __Export handle to digital asset__.
    
    # Click __Apply__ or __Accept__ in the type properties window.
    
    You may need to deselect and reselect the node for the handle/slider to show up.

:task:Create a handle for parameters on your asset:
    # In the type properties window, click the __Handles__ tab.
    
    # Click __Create handle__ and choose the type of handle.
    
    # On the right under __Bindings__, you can choose which parameters will be modified when the user drags different parts of the handle. Click the drop down menu next to a binding field to choose from all the parameters on the asset.

== HUD slider default field ==

#display: hidden

When you promote a HUD slider, Houdini puts information about the slider in the slider's __Default__ field on the __Handles__ tab.

As long as you set up the slider the way you want before you promote it, you don't need to mess with this field. But if you need to edit it for some reason, it uses the following format:

`hudx(105) hudy(130)` |
    Position in the viewer pane.
`hudw(120) hudh(16)` |
    Width and height.
`hudnameside(3) hudvalueside(2)` |
    Where the labels are positioned.
`hudharbourname('name') hudharbourx(105) hudharboury(130)` |
    Assigns the slider to a group. Sliders in the same group will dock together.
`hudlocklow(1) hudlockhigh(1)` |
    High and low value limits.
`hudrangehigh(10) hudrangelow(1)` |
    Slider range.
`ownerop('geo/tube1')` |
    The original owner of the parameter being controlled.
