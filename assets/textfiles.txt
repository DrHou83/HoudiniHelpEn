= Working with files and assets as text =

"""You can save HIP files as plain text, and expand asset files into a directory of plain files. This makes it easier to use diffing and source control on Houdini files."""


== Overview ==

Normally, scene (`.hip`) files and asset libraries are stored as single binary files. This is the most efficient form, but it makes a few things difficult:

* Can't use text diffing tools to compare files.

* Can only check assets into source controls as monolithic binary blobs.

* Can only manipulate assets using Python scripting in Houdini.

For scenarios where you need these abilities, you can save a scene file as plain text, and convert an asset between plain text and binary.


== Converting ==

:task: Save a HIP file as plain text:
    Choose __File > Save as text__.

    Once a file is saved as text, future saves will also be as text, and __Save as text__ becomes __Save as binary__.

:task: Convert an asset library to unpacked plain text format:
    # In the main menus choose __Assets > Manage asset libraries__.
    
    # In the "Operator type libraries" tree, find the `.hda` library you want to convert.
    
    # Right-click the item in the tree and choose __Convert to unpacked format__.
    
    Houdini replaces the single binary file with a directory of the same name, containing files with various information about the asset(s) in the library.

:task: Convert an unpacked plain text asset library to a single binary file:
    # In the main menus choose __Assets > Manage asset libraries__.
    
    # In the "Operator type libraries" tree, find the `.hda` library you want to convert.
    
    # Right-click the item in the tree and choose __Convert to packed format__.

:task: Convert asset libraries on the command line:
    To convert an `.hda` file to unpacked format:
    
    {{{
    #!sh
    hotl -t unpacked_dir_name source_hda_file
    }}}
    
    To convert a directory back to single file:
    
    {{{
    #!sh
    hotl -l source_unpacked_dir_name hda_file
    }}}
    
    If you are merging HDAs using `hotl -m` you can use unpacked directories and packed single binary files as sources interchangeably.


== Comparing assets in Houdini ==

You can run an external diff tool from within Houdini.

Diffs results for scene files and assets may not be very clear or understandable, but hopefully can give a sense of what's changed.

:task: Set up your diffing program:
    In the main menus, choose __Edit > Preferences > External tools__.
    
    Set up the "File compare" and "Folder compare" sections with information about your preferred diff program:
    
    * Set the __Executable path__ to the path to the file path of your diff program. If the program is in the executable search path, you can just type the program name.
    
    * Set the __Command line arguments__ based on the command line interface of the diff program. You can use the following variables:
    
        `$OLDPATH`:
            The path to the first file/directory to compare.
    
        `$NEWPATH`:
            The path to the second file/directory to compare.
    
        `$OLDTITLE`:
            If your diff tool supports displaying a title for the first file/directory.
    
        `$NEWTITLE`:
            If you diff tool supports display a title for the second file/directory.
    
        Typically, the command line arguments will simply be `$OLDPATH $NEWPATH`.

:task: See what you've changed in an unlocked asset:
    Right-click the asset and choose __Show changes__.

:task: See what you've changed in the current scene file:
    In the main menu, choose __File > Show changes__.

:task: Compare an asset to a backup version:
    Houdini automatically saves backups when you modify assets. You can see what's changed in the asset definition since a previous backup.

    # In the main menus choose __Assets > Manage asset libraries__.
    
    # In the "Operator type libraries" tree, find the asset you want to check.
    
    # Right click the asset and choose __Compare__.
    
    # Click __Against: Backup__.
    
    # Choose the backup date from the pop-up menu.
    
    # Click __Compare__.
    
:task: Compare two assets:
    # In the main menus choose __Assets > Manage asset libraries__.
    
    # In the "Operator type libraries" tree, find the asset you want to check.
    
    # Right click the asset and choose __Compare__.
    
    # Click __Against: Asset__.
    
    # Click the [Icon:BUTTONS/chooser] chooser icon to the right of __Against:__ to select the asset to compare against.
    
    # Click __Compare__.


== Tips and notes ==

* Changes to the asset library in Houdini (for example, adding a section in the __Extra files__ tab of an asset) will still update the contents of an expanded asset library.

* Currently, the files contained and file formats used inside an asset library directory are undocumented and subject to change without notice. Some of it is fairly straightforward, but just remember that if you try to develop scripts that modify assets by editing the expanded files directly, those scripts could possibly break in a future version of Houdini. Also note that any changes you make inside the directory could be overwritten if the asset library is edited in Houdini at the same time.



