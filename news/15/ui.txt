= What's new in Houdini 15 |> User experience =

== Scene view ==

=== Display quality ===
#display: pull left

:new:
    GGX and PBR in the viewport. More to come in future releases.
    
    [Image:images/garg.jpg]

:new:
    The viewport now displays mitred joints on open curves with thickness.

:changed:
    In "Normal" lighting quality, environment lights now provide an ambient lighting factor.

:fixed:
    Improved hair shading in the viewport. Hair shading is now on by default on the [Fur object|Node:obj/fur]. Hair thickness, subdivision curves, and hair shadows display properly in the viewport's high quality display mode.
    
    [Image:images/hair_closeup.jpg]

:fixed:
    High quality lighting mode again supports and unlimited number of lights.

:fixed:
    Normal quality lighting will now display lighting from an environment light with an environment map. This is currently limited to one light. The __Roughness__ parameter controls the blurriness of the map.

:fixed:
    Default Phong/Lambert lighting models in the viewport are now more energy preserving. Specular highlights will look more subtle overall.

=== Textures ===
#display: pull left

:new:
    The viewport can now display UDIM textures. If an object's __OGL Texture__ parameter has `%(UDIM)d` or `%(UDIM)2d` in the string, it will be treated as a UDIM texture. For example, instead of `/path/to/texture1001.exr`, you would use `/path/to/texture/texture%(UDIM)d.exr`.

:new:
    The viewport can also display Mari-style tiled textures. You can use `%(U)d_%(V)d` or `%(UVTILE)d`.

:new:
    New options in the [display options|/ref/windows/displayopts_3d] to highlight geometry/UV boundaries, and highlight overlapping UVs.

:new:
    The viewport can now display world-space [normal maps|/shade/normalmaps].

=== Tab menu ===
#display: pull left

:new:
    In the ((Tab)) menu you can press ((Ctrl + Enter)) to invoke the highlighted tool in the same way as ((Ctrl))-clicking a tool on the shelf. For example, pressing ((Ctrl + Enter)) on the Sphere tool will create the sphere immediately at the origin instead of entering a placement mode.

== Visualizers ==

=== New visualizers ===
#display: pull left

:new:
    :fig:[Image:/images/ui/volume_visualizer.png]
        Volume visualizer displays a color map or vectors showing the values along a slice of a volume.

:new:
    :fig:[Image:/images/ui/tag_visualizer.png]
        Tag visualizer displays a label pointing to the target. You can set the label to be visible even when the target is outside the view. This is useful for keeping track of light names.

=== Visualizers tab ===
#display: pull left

:new:
    When a visualizer is attached to a node, a __Visualizers__ tab appears in the node's parameters containing the visualizer controls.

=== Quick visualization ===
#display: pull left

:new:
    You can hover over a geometry node, dynamics node, or VOP output and press ((X)) to attach a visualization node to it. Pressing ((X)) on something else in the network moves the visualization node. This is a quick way to move through the network inspecting geometry.

=== New options ===
#display: pull left

:new:
    Added a menu of ramp presets to the [color visualizer|/visualizers/color] interface.

:new:
    Added options to the [marker visualizer|/visualizers/marker]:
    
    * Color vectors and vector trails by vector values, vector directions, or a second attribute (for example `Cd`). This supports converting multi-component values, and mapping onto a ramp.
    
    * Color point trails by vector values, direction, or an attribute.
    
    * Normalized vector lengths.
    
    * New __Unit length__ parameter makes it easier to distinguish between per-frame and per-second unit vectors.

    * In the axes visualization style, you can now enter a space-separated list of three vector attribute names in the __Attribute__ field. The three barbs of the axis will align to the three vectors. Other styles ignore all but the first name.

=== Improvements ===
#display: pull left

:fixed:
    The default attribute type is now "Auto", which guesses the attribute type from the name. This means you only have to change it if you have two different types of attribute with the same name.

:fixed:
    A higher-priority visualizers will no longer override other visualizers (or `Cd`) if the attribute it's visualizing does not exist.

== Network and parameters ==

=== Match transform ===
#display: pull left

:new:
    Objects now have buttons in the parameter editor to copy the [Smallicon:BUTTONS/match_transform] position, [Smallicon:BUTTONS/match_rotation] rotation, [Smallicon:BUTTONS/match_scale] scale, and [Smallicon:BUTTONS/match_pivot] pivot from another object in the viewport.

=== @ syntax ===
#display: pull left

:new:
    There are now `@attribute` alternatives to all local variables. For example, you can use `@P.y` instead of `$Y`, `@Cd.r` to get the red component, and `@name` to get the name string.

:changed:
    `@Frame` is now a floating point value, to match the VEX equivalent.

:fixed:
    `@Frame` and `@Time` now work properly in nodes that don't have local variables.

=== Auto connect ===
#display: pull left

:new:
    In the ((Tab)) menu you can press ((Shift + Enter)) on the highlighted node to automatically place it and append it to the previously selected node.

=== Context menu ===
#display: pull left

:changed:
    The ((RMB)) context menu for nodes has been reorganized using submenus to hide infrequently used options, making the menu much smaller.
    
    You can copy `$HFS/houdini/OPmenu.xml` into your user preferences folder and edit it to customize the context menu. See the [menu configuration XML format||/basics/config_menus].

== Digital assets ==

=== Black box ===
#display: pull left

:new:
    You can now create "black box" assets that can be freely distributed and used without a license, but cannot be inspected or modified. Select an instance of an asset and choose __Assets > Create black-boxed asset__.

=== Show on connect ===
#display: pull left

:new:
    The __Disable when__ and __Hide when__ syntax now supports the pseudo-functions `ninputs()` and `hasinput(<<n>>)` to allow hiding/disabling depending on whether an input is wired.

=== .hda ===
#display: pull left

:changed:
    Houdini now saves asset libraries with a `.hda` extension instead of `.otl`. Houdini still recognizes and loads files with the old extension.
    
    (Setting the `HOUDINI_USE_OTL_AS_DEFAULT_HDA_EXT` environment variable will restore the old `.otl` extension. This is a temporary stop-gap for studios that have infrastructure that relies on the old extension.)

=== User data ===
#display: pull left

:dev:
    You can use the [Hom:hou.HDADefinition#setUserInfo] and [Hom:hou.HDADefinition#userInfo] methods to store and retrieve arbitrary text data on an asset. This might be more convenient than using a section. Note that adding user info will make an asset unreadable by earlier versions of Houdini.

== Customization ==

=== Python panels ===
#display: pull left

:new:
    [Python panels|/pypanel/] can now use [Hom:hou.ui#createQtIcon] to access Houdini icons a `QIcon`s.

:new:
    Python panels now support drag and drop from Houdini into the panel.

:changed:
    The menu of available pane types now includes Python panels.

=== New parameter type ===
#display: pull left

:new:
    This version of Houdini introduces initial support for a "data" parameter type you can use to store binary data in a node. For example, the Curve Groom SOP uses this to store stroke data.

=== Menu customization ===
#display: pull left

:changed:
    Improvements to the menu customization XML format:
    
    * Now supports multiline context expressions.
    
    * The `<menu>` and `<subMenu>` elements now have an `allowRedundantSeparators` attribute. When this is `"true"`, Houdini will not automatically remove redundant separator items from the menu.

    * You can now add dynamic menu strip elements as children of the `<menu>` element.

    * You can now use a `<labelExpression>` element in place of a `<label>` to dynamically generate the label from a Python expression.
    
    * The parameter context menu configuration (`PARMmenu.xml`) now supports an `<expression>` element inside the `<context>` element. This lets you use a Python expression to show or hide menu items based on the type of parameter the user right-clicked.
    
    See [customizing menus|/basics/config_menus] for more information.

=== HDK ===
#display: pull left

:dev:
    HDK plugins can now register mouse hooks in the viewport.

== Other changes and improvements ==

=== Tree view ===
#display: pull left

:fixed:
    You can now select multiple items (in the same network) in the tree view.

=== Handles ===
#display: pull left

:changed:
    By default, rotation ring handles that are straight on to the view are no longer drawn. You can turn off __Hide rotate handle rings parallel to the view direction__ in the Handles preferences to disable this.

=== Group list ===
#display: pull left

:fixed:
    You can now use numeric ranges and attribute expressions (such as `@area>0.1`) in the group mask field.

=== Deprecation ===
#display: pull left

:changed:
    Houdini will now display a warning if you load a scene file containing deprecated nodes (nodes that we intend to remove from Houdini in a future version). You can turn this off in the "Save and Load" preferences.

=== Expression literals ===
#display: pull left

:new:
    You can now use `_` as a number separator in Houdini expressions, for example `rand(1_000_000)`, to make long numbers more readable.

=== Version number ===
#display: pull left

:new:
    The version number is now part of the application icon.

:new:
    A new environment variable `$HOUDINI_VERSION` contains the full version number (for example `15.0.123`).

:changed:
    The viewport no longer displays environment maps as background images for light types other than Environment.

=== Misc ===
#display: pull left

:new:
    The `hgpuinfo` utility prints information about OpenGL and OpenCL support on the current machine. You can also test for feature support using the exit code.

:changed:
    The [Cache SOP|Node:sop/cache] generates a warning if you try to cache packed primitives in point mode.
    
:changed:
    Re-enabled checks for stereo framebuffer support and quad buffer stereo mode.

:changed:
    Houdini now assumes parameters starting with `stdswitcher` are auto-generated folder parameters, so it doesn't consider their deletion or change as changes to the asset.

:fixed:
    Distance lights in the viewport now properly ignore attenuation.

:fixed:
    Instanced geometry that's animated at the geometry level now updates properly in the viewport.

:fixed:
    Adaptive subdivision surfaces now look correct in "wireframe ghost" and "hidden line invisible" display modes.

:fixed:
    Dragging ((MMB)) in the viewport now works with distance handles.

:fixed:
    The __Attribute class__ option for visualizers now defaults to "Auto", which figures out the type of the attribute based on the name, so you shouldn't have to change it unless you have two different types of attributes (for example point and primitive) with the same name.

:fixed:
    HUD sliders now work in the UV viewport.

:fixed:
    The viewport now returns to the previous state after the user uses the reselect button on a group parameter.

:fixed:
    Fixed display of multiple selections (for example, where a tool asks for a set of "source" primitives and then a set of "destination" primitives) when using modeling tools in the viewport.

:fixed:
    The "Lock camera/light to view" button to the right of the viewport now affects all linked viewports with a camera.

:fixed:
    Point trails now work on packed fragments.

:fixed:
    Fixed display of bump maps with XY deltas.

:fixed:
    Improved startup times by caching information about plugins.

:fixed:
    The __Assets__ menu now lists assets from read-only libraries.

:fixed:
    The level of detail display option is now saved in the `.hip` file.
