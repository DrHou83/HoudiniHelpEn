= What's new in Houdini 15 |> Geometry =

See also [what's new in the user interface|ui].

== Interactive ==

=== New poly tools ===
#display: pull left

:new:
    The [Poly Bridge|Node:sop/polybridge] node builds sheets or columns connecting edges or faces. The node has controls for the shape and topology of the bridge, including following a curve.
    
    [Image:/images/model/polybridge.png]

:new:
    New [Poly extrude|Node:sop/polyextrude] version extrudes sheets or columns from selected edges or faces. The node has controls for the shape and topology of the extrusion, including following a curve.
    
    [Image:/images/model/polyextrude.png]

:new:
    New [Poly Expand 2D|Node:sop/polyexpand2d] node dilates or expands the outlines polygons. It can also create width from lines, making it ideal from creating roads from path lines.
    
    [Image:/images/model/polyexpand2d.png]

=== Basic modeling ===
#display: pull left

:new:
    The [Edit|Node:sop/edit] node has a more free-flowing interaction like a "tweak" tool.
    
    * You can select faces, edges, or points on-the-fly instead of switching between different components.
    
    * You can slide edges and edge loops across the surface.
    
    * The geometry under the mouse highlights in the viewport to show what will be selected.
    
    * You can constrain points and faces to slide across adjacent faces.
    
    * A __Hide handle on immediate selection drag__ parameter lets you hide the handle while you're tweaking.
    
    [Image:/images/model/edge_sliding.png]

:new:
    The [Soft Transform|Node:sop/softxform] and [Soft Peak|Node:sop/softpeak] nodes now let you visualize the falloff using a visualizer on a new `vis_falloff` attribute, instead of overwriting the color attribute (`Cd`).
    
    [Image:/images/model/soft_tweak.png]

:changed:
    Using the ((T)), ((R)), and ((S)) keys in the [Edit|Node:sop/edit], [Transform|Node:sop/xform], [UV Transform|Node:sop/uvtransform], or [UV Edit|Node:sop/uvedit] tools now changes the handle within that tool, instead of switching to the general Move, Rotate, or Scale tool.

:changed:
    When you're working in the Edit, UV Edit, or brush tools, the ((Q)) (Repeat current operation) and ((Shift + Q)) (Branch and repeat current operation) hotkeys will now create a new node instance.

:changed:
    The [Edit|Node:sop/edit] tool now hides the handle while you're pressing the loop selection hotkey ((A)).

=== Selection ===
#display: pull left

:changed:
    Houdini now preserves the component selection across cooks, and remembers different selections for each component type, instead of converting the current selection when you change types.
    
    Basically, you should be able to select faces, go to a different object or change to a different component type, come back, and still have the same faces selected.
    
    (You can still convert the selection to a different type using an item in the ((RMB)) context menu.)

:changed:
    Edge selections now show the direction of each edge. You can change the direction of a selected edge direction by ((Shift))-clicking the edge.

:fixed:
    Edge selection now does a better job of preserving selection order.

=== Group list ===
#display: pull left

:new:
    You can now select whole branches of attribute hierarchies in the group list interface, for example with an Alembic path attribute.

:new:
    There is now an option in the group list's settings menu to highlight group names in the list as you move the mouse over components, instead of changing the contents of the list to only show the groups containing the component under the mouse.

:new:
    You can now customize the colors assign to groups in the group list. Click the color swatch to change the color. ((Ctrl))-click to clear the custom color. You can use the [Hom:hou.hipFile#groupColorTable] and [Hom:hou.hipFile#setGroupColorTable] HOM functions to script the color overrides.

:new:
    You can now collapse and expand branches of Alembic hierarchies in the group list.

:changed:
    Changed default group list colors to prevent confusion with the selection.

=== Quick visualize ===
#display: pull left

:new:
    [Visualize geometry node|Node:sop/visualize] helps visualize the output of different nodes in the network. Any visualizations you attach to this node will be applied to the node it's wired from. You can hover over a geometry (SOP) node and press ((X)) to rewire the visualize node onto that node.
    
    The intention is to later replace this somewhat inefficient method with something more integrated with the [visualization editor|/basics/visualizers].

=== Bend node ===
#display: pull left

:new:
    [Bend|Node:sop/bend] node is a more interactive version of [Twist|Node:sop/twist]. It lets you define two planes and twist, bend, or taper any geometry between them.
    
    [Image:/images/model/bend_flounder.png]

:changed:
    The Twist, Linear Taper, and Bend tools on the __Deform__ shelf tab now use the new [Bend node|Node:sop/bend].

=== Smooth ===
#display: pull left

:fixed:
    Improvements to the [Smooth|Node:sop/smooth] geometry node:
    
    * Much faster and partly parallelized for large models.
    * Can smooth multiple attributes.
    * Works with polygon soup tetrahedrons.
    * Respects primitive groups when smoothing vertex attributes.
    * Supports attributes with tuple size of 4 or more.

=== Selection settings ===
#display: pull left

:new:
    There is now an "Objects and geometry" preference to always start with area selection set to visible geometry only (so box selection won't select polygons through the other side of visible geometry).

== Procedural ==

=== Looping ===
#display: pull left

:new:
    [Block Begin|Node:sop/block_begin] and [Block End|Node:sop/block_end] nodes allow looping the nodes between them. See the [documentation on looping|/model/looping]. This block functionality is easier to use than previous solutions such as the [For Each subnet|Node:sop/foreach] and [Solver SOP|Node:sop/solver].

=== Group syntax ===
#display: pull left

:new:
    The [group selection syntax|/model/groups#manual] now supports using `@attr=<<val>>,<<val>>,<<val>>` to compare an attribute to a list of possible values. For example, `@id=1,2,90,120`. For string attributes, you must enclose values containing spaces in double quotes, for example `@path=/foo/*,/bar,"some string"`.

:fixed:
    You can now use "intrinsic" attributes in [group selection syntax|/model/groups#manual] like regular attributes. For example `@intrinsic:indexorder<100`.
    
    You can display available intrinsic attributes in the [geometry spreadsheet|/ref/panes/geosheet] using the __Intrinsic__ menu.

=== Wranglers ===
#display: pull left

:new:
    The wrangler nodes now have a button next to the VEX snippet to generate parameters from any `ch()` references in the code.

:new:
    The [Deformation Wrangle|Node:sop/deformationwrangle.txt] node lets you write VEX code to modify point positions, and then takes care of the details of transforming other attributes and updating packed primitive intrinsics.
    
    This uses the new [Transform by Attribute|Node:sop/xformbyattrib] node which takes a point attribute and transforms all transformable point and vertex attributes and updates intrinsics on packed primitives.

:new:
    The [Attribute VOP SOP|Node:sop/attribvop], [Attribute Wrangle SOP|Node:sop/attribwrangle], [Geometry VOP DOP|Node:dop/geometryvop], and [Geometry Wrangle DOP|Node:dop/geometrywrangle] have a new __Run over > Numbers__ mode, which runs the VEX code a certain number of times. In this mode, `@elemnum` is the current iteration number (starting at `0`), and `@numelem` is the total number of iterations. This mode only binds detail attributes and binds them as read-only.

=== Sourcing ===
#display: pull left

:new:
    [Points from Volume|Node:sop/pointsfromvolume] has a new __Construction method__ parameter. The default for new nodes is "Sparse volume" which is more efficient for sparse inputs than the original method, which is now available as "Dense grid". The [Fluid Source|Node:sop/fluidsource] and [Grain Source|Node:sop/grainsource] nodes have this new parameter as well.
    
    When the method is "Sparse volume", the node also has new parameters for only creating points within a certain slice of the volume.

:new:
    The [Voronoi Fracture|Node:sop/voronoifracture] node now has a separate option to compute vertex normals on the surface (exterior) geometry. When this is on and the input doesn't have normals, the cusp angle for the interior normals won't be used for the exterior.

=== Technical nodes ===
#display: pull left

:new:
    [Find shortest path|Node:sop/findshortestpath] has a [new parameter|Node:sop/findshortestpath#outputprevptnum] to create a point attribute indicating the previous point number in the path. This is easier to traverse in VEX than output polygons.

:new:
    New [Shrink Wrap|Node:sop/shrinkwrap] version 2.0, using the convex hull algorithm from the Bullet solver. This is significantly faster and produces simpler geometry over convex hulls.

:new:
    [Attribute Swap|Node:sop/attribswap] node swaps, moves, or copies attributes efficiently with support for pattern matching.

:changed:
    The [Attribute Copy|Node:sop/attribcopy] node now lets you specify a new name for the copied attribute. The defaults have been streamlined.

:fixed:
    [Point Deform|Node:sop/pointdeform] now transforms all transformable point and vertex attributes, and properly deforms packed primitives.

== UVs ==

=== UV Editing ===
#display: pull left

:new:
    You can now fluidly select different component types (faces, edges, points) like in the [Edit|Node:sop/edit] node.

:new:
    The [UV Flatten|Node:sop/uvflatten] node has a new option to use existing UVs. This lets you use the node's pin and cutting tools on existing UVs.

:new:
    The [UV Layout|Node:sop/uvlayout] node has a new parameter to "correct" the size of UV islands based on their 3D areas.

:new:
    Added visualization of the soft radius falloff to the [UV transform|Node:sop/uvtransform] and [UV Edit|Node:sop/uvedit] geometry nodes. The nodes now create an attribute you can see with a [visualizer|/basics/visualizers].

:new:
    Added visualization of UV boundaries in the viewport.

:changed:
    The [UV Quickshade|Node:sop/uvquickshade] node's default texture is now a high-res checkerboard. this is also the background for UV viewports.

:fixed:
    The [UV Layout|Node:sop/uvlayout] node is better at packing UV islands together.

== Subdivision curves == (subd_curves)

=== Polylines as curves ===
#display: pull left

:new:
    Support for subdivision curves in Mantra, the viewport, and the [Subdivide|Node:sop/subdivide] and [Resample|Node:sop/resample] nodes. This displays/renders polylines as subdivided curves.
    
    This lets you store low-res polylines but display and render them as high-res curves. The [Fur object|Node:obj/fur] now uses subdivision curves instead of NURBS for large performance gains.

    The __Display as > Subdivision surface__ option on objects is now "Subdivision surface/curves". When this option is on, polylines in the object will display/render as subdivided curves.

=== Resample from subdivided curve ===
#display: pull left

:changed:
    The [Resample node|Node:sop/resample] has a new option to resample input polylines as straight segments (the existing behavior), or as if they were subdivided curves.
    
    There is also an option to resample such that, if the output is subdivided later, the subdivision curve will pass through the sampled points. When you're down-sampling curves to save space and rendering as subdivision curves later, this helps the subdivided curve better match the shape of the original.

== Alembic and packed geometry ==

=== Alembic I/O ===
#display: pull left

:new:
    User properties on Alembic hierarchies now import and export as custom parameters on nodes or attributes on packed primitives.

:new:
    The [Alembic geometry node|Node:sop/alembic] can now specify the geometry types to load. You can also now load only transforming or only deforming geometry.
    
    The node now has an __Object exclude__ parameter which can hide some objects in the __Object path__. Both __Object path__ and __Object exclude__ have buttons that let you choose objects either from a tree or from the viewport.

    The node has a new group naming mode which uses the shape's base name (without the full path).

:new:
    Option on the [Alembic Archive object|Node:obj/alembicarchive] to load the entire hierarchy in a single [Geometry object|Node:obj/geo]. If the Alembic file contains cameras, they will still be loaded as separate objects.

:new:
    Added __Reload geometry__ button on the [Alembic Archive object|Node:obj/alembicarchive] that reloads shape data without rebuilding or changing the object hierarchy.

:new:
    Alembic export now adds an `X.samples` property on the archive to match Maya's custom tag. This lets you query how many samples are stored in the archive.

:new:
    When you save an Alembic archive with "full bounds", the child bounds for the entire archive are stored on the root node. This lets you query the entire archive's bounds.

:new:
    Added parameter on the [Alembic render node|Node:out/alembic] to select additional UV attributes.

:changed:
    The [Alembic render node|Node:out/alembic] now uses indexed samples when writing UV attributes.

:fixed:
    Although Alembic doesn't natively support volumes, Houdini will now properly export the transform on VDB primitive volumes.

:fixed:
    Restored proper handling of topology information on non-animated geometry in Alembic packed primitives.

:fixed:
    When using Alembic Archive with object hierarchy (as opposed to subnetworks), the camera and geometry objects are now in the hierarchy instead of a subnet.

:fixed:
    Houdini now writes Maya-specific metadata so Maya recognizes vertex colors without needing the `-rcs`/`-recreateAllColorSets` flag.

:fixed:
    Houdini now preserved Maya-specific locator properties when exporting Alembic archives.

:fixed:
    When you're exporting the output of a single geometry node, Houdini ignores whether the parent object is displayed or not.

:dev:
    You can now get frame ranges in Python scripting. If you specify an object path, it returns the time range for that object, otherwise it specifies the range for the entire archive.
    
    {{{
    #!python
    from _alembic_hom_extensions import alembicTimeRange
    start, end = alembicTimeRange(filename, objectPath=None)
    }}}

=== Packed primitives ===
#display: pull left

:new:
    The [Pack node|Node:sop/pack] can now transfer attributes to the detail containing the packed primitives.

:new:
    New [Pack Points|Node:sop/packpoints] and [Unpack Points|Node:sop/unpackpoints] nodes allow efficient use of only the points in a specific spatial region. This supports on-demand loading of very large particle sets, for example much faster flipbooking of FLIP simulations with many millions of points.

:new:
    New parameters on the [Unpack|Node:sop/unpack] node let you optionally apply and attach a [stylesheet|/shade/stylesheets] to the unpacked primitives.

:new:
    You can now unpack geometry inside the [gplay|/ref/utils/gplay] utility. This lets you view attributes on the unpacked geometry.

:new:
    [Packed Disk Edit|Node:sop/packeddiskedit] node lets you change the source file for an on-disk packed primitive.

:changed:
    Packed primitives now cache and save their bounding boxes (if computed). This can make some operations faster.

:changed:
    The __3D Viewport__ parameter of the [Packed Edit|Node:sop/packededit] node is now animatable.

== Possibly breaking changes ==

=== P attribute ===
#display: pull left

:changed:
    The `P` attribute now has 3 components instead of 4. A separate `Pw` attribute is automatically created when needed. This eliminates many issues caused by `P` not having the same size as related attributes.
    
    Most things that used the `w` component of `P` will still work, but now use `Pw`. Reading old files will create a 3-component `P` and (if the fourth component was not `1.0`), a `Pw` attribute.
    
    This may break things where you already had an attribute named `Pw`, or where you were accessing the fourth component of `P` by index.

== Other changes and improvements ==

=== Geometry spreadsheet ===
#display: pull left

:new:
    Group membership now appears as a special `group:<<name>>` column in the [geometry spreadsheet|/ref/panes/geosheet], where each row has `1` if the point/primitive is in the group, or `0` if it's not. You can hide or show the groups using patterns in the __Attributes__ filter field. For example, `^group:*` to hide all group columns, or `* group:door` to show all regular attributes and also the `door` group.

:changed:
    Detail attributes are listed vertically in the geometry spreadsheet to make them easier to read.

:fixed:
    The [geometry spreadsheet|/ref/panes/geosheet] is now orders of magnitude faster at displaying very large numbers of points (in the hundreds of millions). It is no longer limited to 99 million points.

:fixed:
    The geometry spreadsheet can now sort integer values larger than 32 bits.

=== VDB ===
#display: pull left

:changed:
    The [Convert VDB geometry node|Node:sop/convertvdb] now has an __Activate inside voxels__ parameter. You can turn this off when converting an SDF with __Signed flood fill__ to only activate the voxels containing the SDF shell.

=== FBX ===
#display: pull left

:new:
    Added [Hom:hou.hipFile#importFBX] HOM function to replace [Cmd:fbximport] HScript command. This function is more useful because it returns the subnet containing the imported nodes as well as the list of load messages.

:changed:
    Added options to the [Cmd:fbximport] HScript command.

:changed:
    UVs and vertex colors are now output in a consistent order.

:fixed:
    When importing FBX that uses Softimage hierarchical scaling for transforms, we now resample at playback sample boundaries to avoid interpolation errors.

:fixed:
    Houdini no longer writes out extra, unused `P_<<n>>` user data.

=== Interface ===
#display: pull left

:new:
    The File and Alembic geometry nodes are available as tools at the Object level. The tool will automatically create a new [Geometry Object|Node:obj/geo] with the chosen geometry node inside.

:new:
    Improvements to the [Smallicon:BUTTONS/reselect] Reselect button next to __Group__ fields:
    
    * You can now ((Shift))-click the button to start selection with the "Select Groups" option on.
    * More fields have the button.

:new:
    Handle improvements, including a new orient handle type.

=== Node changes ===
#display: pull left

:changed:
    The [Transform|Node:sop/xform] and [Soft Transform|Node:sop/softxform] nodes now support transforming a subset of the transformable attributes. For example, you can tweak normals or scale velocities without affect the point positions.

:changed:
    The [Transform Axis|Node:sop/xformaxis] node now has the same __Recompute affected normals__ parameter as the [Transform|Node:sop/xform] node. This only recomputes normals on the boundaries of the transformed region.

:changed:
    The [Soft Transform node|Node:sop/softxform] now defaults to only recomputing normals on primitives affected by the transformation.

:changed:
    The "select from viewport" button next to the [Material|Node:sop/material] node's __Group__ field now selects by the `path` attribute (if present), or by groups (if present), then by 3D connectivity. You can ((Shift))-click the button to get standard behavior.

:changed:
    New [Divide|Node:sop/divide] nodes in "Compute dual" mode will swap point and primitive attributes and groups, and transfer vertex attributes and groups to the new vertices.

:changed:
    The [Visibility|Node:sop/visibility] node is now animatable.

:changed:
    The [Blend Shapes|Node:sop/blendshapes], [Sequence Blend|Node:sop/sblend], and [Time Blend|Node:sop/timeblend] nodes now have an option for __Shortest path transform blending__ (spherical linear interpolation).

:changed:
    The [Sequence Blend|Node:sop/sblend] has a new option to use spherical linear interpolation when blending primitive transforms.

:changed:
    Added "Texture UV" tangent style to [Poly Frame|Node:sop/polyframe]. This supports the tangent format used by other 3D packages.

:changed:
    Newly created [Cache|Node:sop/cache] nodes have a simpler interface. The default behavior is now to cache every frame and clear the cache on any change to the first input. To get the old behavior, turn off __Cache any frame__ and __Clear cache when change upstream__.

:changed:
    Newly created [Transform|Node:sop/xform], [Soft Transform|Node:sop/softxform], [Transform Axis|Node:sop/xformaxis], and [Transform by Attribute|Node:sop/xformbyattrib] nodes now have names with `transform` instead of `xform`.

:changed:
    The [Attribute reorient node|Node:sop/attribreorient] now creates any attributes missing from the first input.

:changed:
    The [Bounds node|Node:sop/bound] now has an option to not create the box if the input is empty.

:changed:
    The [Attribute Randomize node|Node:sop/attribrandomize] now defaults to the `Cd` attribute and a "Uniform (Continuous)" distribution. The user interface was rearranged to put distribution settings on their own tab.

:changed:
    Added a parameter to [Resample|Node:sop/resample] node to fix length of last segment when using certain settings.

:changed:
    The [Sweep|Node:sop/sweep] node now supports transferring attributes and groups from the backbone paths to the new geometry. By default it copies everything except `P`.
    
    Sweep now supports transforming the cross-sections using attributes on the backbone curve, such as `pscale`, `scale`, `N`, `up`, `trans`, `rot`, `orient`, and `pivot` (like the [Copy|Node:sop/copy] node).

:changed:
    The [Group Transfer|Node:sop/grouptransfer] node has a new parameter to create groups even if they're empty.

:changed:
    The [Color|Node:sop/color] node no longer automatically creates `$` local variable equivalents of attributes.

:changed:
    The [Poly Frame|Node:sop/polyframe] node can now calculate UV tangents.

:changed:
    The [Dissolve|Node:sop/dissolve] node now has __Remove inline points__ on by default, and __Collinearity tolerance__ defaults to `1`.

:fixed:
    Better interactive performance in [Transform Axis node|Node:sop/xformaxis] and [Trail node|Node:sop/trail] (when __Compute velocities__ is on).

=== Deprecation ===
#display: pull left

:changed:
    [Tristrip|Node:sop/tristrip] is now deprecated. Support for tristrip and trifan primitive types may be removed in a future version of Houdini. Polygons and Polysoups are much better for most use cases.

=== Misc ===
#display: pull left

:new:
    You can now read an `instrinsic:arclength` attribute on NURBS and Beziér curves.

:new:
    You can now load Protein Data Bank (PDB) files directly in Houdini.

:changed:
    You can now ((Ctrl))-click a node to lock it.

:changed:
    The "Descriptive Name" geometry node flag now controls the display of the colored blob around nodes in a [looping block|/model/looping].

:changed:
    The attributes created by the [Rest node|Node:sop/rest] are now marked as having no transformation type. If you need to transform them, you can set their transformation type using the [Attribute Create node|Node:sop/attribcreate].

:changed:
    The __Apply to all__ button in brush nodes now sets the pressure to 100% to work reliably with tablets.

:changed:
    The [File|Node:sop/file] node will not accept just `default.bgeo` as an output filename. This prevents confusion when the user unknowingly overrides the default geometry. If you really need to do this, use `./default.bgeo`.

:fixed:
    Pasting a parameter value/reference into a focussed parameter field now inserts at the cursor instead of replacing the contents.

:fixed:
    The [Poly Patch|Node:sop/polypatch] node now maintains point, vertex, and primitive groups and attributes. Previously it only maintained float attributes on points and vertices.

:fixed:
    Large speedup in [Blend Shapes|Node:sop/blendshapes] geometry node. Smaller speedups in [Sequence Blend|Node:sop/sblend] and [Time Blend|Node:timeblend] geometry nodes.

:fixed:
    Improved speed for the general use cases of [Object Merge|Node:sop/object_merge], especially when the transform is the same in the source and destination.

:fixed:
    You can now import any geometry type Houdini understands from sections inside [digital assets|/assets/].

:fixed:
    Fixed a bug in the [Transform node|Node:sop/xform] where transforming (but not rotating or scaling) a point or edge group would only update the position (`P`), and not all transformable attributes.

:fixed:
    The [For Each|Node:sop/foreach] and [Each|Node:sop/each] nodes now work with large integer attribute values greater than 24 million. Reduced startup time and memory usage of For Each and slightly sped up Each.
    
:fixed:
    The [Point Cloud Iso|Node:sop/pointcloudiso] node is now interruptible.

:fixed:
    Adding a [Solver SOP|Node:sop/solver] in the viewport now adds it to the current geometry network instead of creating a new object.

:fixed:
    The [Packed Edit|Node:sop/packededit] node now expands relative paths to materials when assigning the attribute value.

:fixed:
    Group fields now accept vertex group names. This is in anticipation of a future version that will allow creation of named vertex groups.

:fixed:
    [Trail|Node:sop/trail] node now support matching by string attributes.
