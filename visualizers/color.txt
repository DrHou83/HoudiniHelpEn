= Color =

#type: visualizer
#internal: vis_color
#icon: VIEW/visualization_color
#tags: visualization, color, ramp
#helpid: h.visualizers.vis_color

"""Visualizes attributes by displaying them as color."""

See [visualizers|/basics/visualizers] for more information.


@parameters

Color Type:
    #id: colortype

    Determines the main method for coloring the displayed geometry.
    
    [Attribute as is|#attr_as_is]:
        Displays attribute values as RGB color values.
        
        This only works properly with floating point attribute types. If the attribute has only one component, it is used as the red channel. If it has two components, they are used as red and green.
    
    [Ramped attribute|#ramped_attr]:
        Looks up attribute values on a color ramp and colors the geometry with the corresponding color.
        
    [Constant|#constant]:
        Colors the geometry with a single color. This may be useful for tracking a certain piece of geometry by giving it a bright color when the visualizer is on.
    
    [Random|#random]:
        Colors each element of the geometry with a random color.
    
    [Random from attribute|#random_attr]:
        Colors attribute values randomly. Attributes with the similar values will have the same color. You can set how different values must be to be colored differently with the __Value separation__ parameter.
    
    [Polygon vertex count|#vertex_count]:
        Colors triangles, quads, and n-gons differently. This makes it easy to find stray n-gons, or find non-tris when you need only tris.
    
    [Texture distortion|#texture_distortion]:
        Tint faces based on how much the texture is being stretched or squashed in that area.

Class:
    #id: class
    
    Whether to visualize a point, primitive, vertex, or detail attribute. This also controls whether the color will be applied to points, vertices, or primitives.


== Attribute as is == (attr_as_is)

Attribute: 
    #id: attrib
    
    Name of the attribute to visualize.


== Ramped attribute == (ramped_attr)

Attribute: 
    #id: attrib
    
    Name of the attribute to visualize.

Range:
    #id: rangespec
    
    To map attribute values onto the ramp, Houdini needs to know the full range of possible values so it can scale that range onto the range of the ramp.
    
    Auto:
        Looks at the actual values of the attribute in the visualized geometry and picks the minimum and maximum.
    
    Min and Max:
        Allows you to manually specify min and max values. This can be useful when there's a "natural" range of values larger than what's currently in the geometry. You can also use a narrower range than what's currently in the geometry as a way of highlighting values outside the range (see the __Out of range values__ paramter).
    
    Center and Width:
        Like Min and Max, except you specify a center value and the width of the range around that value.
    
Min:
    #id: minscalar
    
    The (per component) lower end of the value range, when __Range__ is "Min and Max".
    
Max:
    #id: maxscalar
    
    The (per component) upper end of the value range, when __Range__ is "Min and Max".
    
Center:
    #id: centerscalar
    
    The (per component) center of the range, when __Range__ is "Center and Width".

Width:
    #id: centerscalar
    
    The width of the range centered around __Center__, when __Range__ is "Center and Width".

Out of Range Values:
    #id: clamptype
    
    How to color values outside the given range, when __Range__ is "Min and Max" or "Center and Width". 
    
    Roll Cyclically:
        Color the value as if the ramp repeated endlessly forward and backward. 
    
        [Image:/images/visualizers/out_of_range_cyclic.png]
    
    Black Out:
        Color out of range values black.
    
        [Image:/images/visualizers/out_of_range_blackout.png]
    
    Clamp to Edge Values:
        Use the first color in the ramp for values less than the range, and the last color in the ramp for values greater than the range.
    
        [Image:/images/visualizers/out_of_range_edge.png]
    
Treat As Scalar:
    #id: treatasscalar
    
    Convert vector attribute types (with more than one component) to a single value. This enables a menu for choosing how to convert the values.
    
Using:
    #id: using
    
    How to convert multi-component values to a single number, when __Treat as scalar__ is on.
    
    Component:
        Pick one of the components.
    
    Component Abs.:
        Pick one of the components, and use its absolute value.
    
    Component Sum:
        Sum up the component values.
        
    Component Abs. Sum:
        Sum up the absolute values of the components.
        
    Length:
        Use the length of the vector.
        
    Length Squared:
        Use the square of the length of the vector. 
        
    Dot Product:
        Use the dot product of the vector with a given vector. This may be useful for measuring deviance from a certain direction.

Color Ramp Preset:
    A list of presets for the Color Ramp.

Color Ramp:
    #id: colorramp
    
    The colors to map to attribute values.


== Constant == (constant)

Color:
    #id: constcolor
    
    The color to use for all geometry this visualizer applies to.


== Random == (random)

Random Seed:
    #id: randseed
    
    The seed for the random number generator. Change this value to get different random colors.


== Random from attribute == (random_attr)

Attribute: 
    #id: attrib
    
    Name of the attribute to visualize.

Random Seed:
    #id: randseed
    
    The seed for the random number generator. Change this value to get different random colors.

Value Separation:
    #id: valsep
    
    How far apart two values must be to be colored differently. This is useful for floating point values (for example, you might not care about the difference between 0.0001 and 0.0002). It is also useful for "banding" ranges of attribute values.


== Polygon vertex count == (vertex_count)

Color Triangles:
    #id: colorthreevtx
    
    Visualize three-sided polygons using this color.
    
Color quads:
    #id: colorfourvtx
    
    Visualize four-sided polygons using this color.
    
Color n-gons:
    #id: colornctx
    
    Visualize polygons with more than four sides using this color.


== Texture distortion == (texture_distortion)

Texture attribute:
    #id: uvattrib
    
    The attribute containing the UV coordinates to visualize. The default is `uv`.





