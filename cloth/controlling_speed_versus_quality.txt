= Controlling speed versus quality =

== Substepping ==

The [Cloth Solver|Node:dop/clothsolver] allows control over the substepping by means of a minimum and maximum substepping level along with the default adaptive substepping integrator.

Sub-stepping is the main way to control the trade-off between quality and speed. Whenever a simulation does not look good enough, the first thing to try is to increase the minimum number of substeps and re-run the simulation. However, the resulting increase in quality comes at the cost of an increased simulation time per frame.

Adaptive substepping is enabled by default. During the simulation it dynamically selects a substepping level between the user-specified minimum and maximum substepping level. For a typical cloth simulation with the integrator parameters at their defaults, 2-4 substeps are used. In some cases 1 substep is used. In extreme cases, where there are very stiff cloth forces that need to be resolved, the maximum substep level will be used to maintain stability in the result. 

The __Substep Tolerance__ determines how the adaptive substepping code decides when to increase the rate of substepping. For almost all cases, this parameter can be left alone. For very straightforward cloth simulations, you can try and increase this tolerance to get an increase in performance, at the cost of some quality and stability. Experimentation is key when ultimate performance is desired. In most cases the __Substep Tolerance__ is best left at its default value.

For common types of cloth simulations, you will usually need to touch only the __Minimum Substep__ parameter, increasing it to reduce jitter where necessary. The other substepping parameters are best left at their defaults, unless you know exactly what you're doing.

== Precision ==

Houdini's [Cloth Solver|Node:dop/clothsolver] allows you to control the internal precision that is used for all of the solver's computations. You can set the precision of the integrator to either 32 bit or 64 bit in cases where you have extreme forces, extremely large or small cloth objects, or your cloth objects are very far away from the origin (beyond 12,000 to 13,000 units) where 32 bit precision starts to introduce significant error. However, for most normal cloth simulations, 32 bit precision provides ample precision to maintain a stable cloth simulation. 

<!--
    == Accuracy settings ==
    
    TODO
-->

== Accuracy ==

In each substep, the [Cloth Solver|Node:dop/clothsolver] performs linear solves to find out how forces affect the movement of the cloth. The __Accuracy__ tab allows you to control the maximum number of iterations and the convergence threshold for these linear solves. The default linear solve method is a Preconditioned Conjugate Gradient (PCG) method. 

