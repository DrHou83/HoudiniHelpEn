= Overriding material parameters and properties =

"""How to change material parameters on individual objects or pieces of geometry."""


== Overriding material parameters on objects ==

You can assign a material to an object, and then make custom changes to the material's parameters only for that object by adding a parameter to the object that overrides a parameter on the material. For example, you can use the same plastic material on a bunch of spheres, but give each a different color by overriding the material's diffuse color parameter.

# Assign the material to your object.

# Click the dropdown menu at the end of the __Material__ parameter field and choose __Create all local material parameters__ or  __Select and create local material parameters__.

    This adds parameters to the object that override parameters on the material. __Create all local material parameters__ promote all the parameters in your object. __Select and create local material parameters__ lets you pick only the ones that you wish to override.
    
    You can then change the value of the parameters on the object.


== Overriding material parameters on primitives ==

The [Material geometry node|Node:sop/material] lets you assign a material to individual primitives (such as polygon faces).

# Use the [Material geometry node|Node:sop/material] to assign a material to primitives.

# Click the [Smallicon:BUTTONS/add] button next to __Local overrides__ to add an override.

# Click __Choose parameter__ menu and pick the material parameter you want to override.

# Change the value of the parameter.

Overrides at the geometry level have higher priority than overrides on objects.

:dev:
    The overrides are stored as a Python dictionary literal in a `material_override` string attribute on the primitives.


== Material stylesheets ==

[Material stylesheets|stylesheets] provide a global method for overriding material assignments and material parameters, using matching patterns to target certain objects or primitives. If you need to make widespread or programmatic changes, stylesheets may be easier than manually adding overrides to individual objects/primitives.


== Overriding render properties ==

Almost all of Mantra's rendering behavior is defined by _render properties_. For example, the output name, the number of diffuse light bounces, and the noise level are all properties. See the [properties overview|/props/] and the [full list of Mantra properties|/props/mantra] in the properties section.

The most useful Mantra properties are available as parameters on the [Mantra render node|Node:out/ifd]. You can then override those settings as needed by adding render properties to an object, light, or camera.

You can [override properties per-primitive|/props/_index#perprim] by creating a [Properties SHOP|Node:shop/properties] and assigning that SHOP to primitives using a [Material geometry node|Node:sop/material].


== Default render properties on objects ==

Houdini lets you change the default parameter interface for all new nodes of a certain type (for example, all new Geometry objects or all new lights). You can use this to set up objects to show the render properties of a different renderer, or add a render property to all new nodes that isn't part of the default.

# At the object level, create an instance of the object (for example, a [Geometry object|Node:obj/geo]). In the parameter editor, click the [Smallicon:BUTTONS/gear] gear menu and choose __Edit rendering parameters__.

# Set up the parameters the way you want. For example, you might delete the parameters in the __Render__ tab and replace them with render properties from the RenderMan folder in the left pane.

# Click __Accept__ to save the changes to the node.

# In the parameter editor, click the [Smallicon:BUTTONS/gear] gear menu again and choose __Save as permanent defaults__.

TIP:
    This saves a preset file in `$HOUDINI_USER_PREF_DIR/presets/<<table>>/<<name>>.idx` (for example, `presets/Object/geo.idx`), meaning this will be the interface for all new nodes of this type created by this user. If you use Houdini's [project management|/basics/project], you may want to move this to `$PROJECT/presets/<<table>>/<<name>>.idx` so it only applies to the current project.
