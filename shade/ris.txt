= RIS =

== Overview ==

RenderMan's RIS is a rendering mode designed for efficient global illumination. You can use this mode by turning on the __RIS Mode__ checkbox on the [RenderMan node|/nodes/out/rib].

This rendering mode utilizes BxDF shaders, which are implemented as C++ plugins. They are represented in Houdini as digital asset nodes that can be placed inside the [RIS shading network|/nodes/shop/risnet]. In addition to BxDF shaders, which are assigned to geometry (much like surface shaders), there are also integrator shaders that can be referenced in 
the __Integrator__ parameter of the [RenderMan node|/nodes/out/rib]. There are also various pattern and utility shaders that serve as inputs to the BxDF shaders for dynamic calculation of the main shader parameters, and to create shading groups and layers.

In addition to RIS shaders, the [RIS shading network|/nodes/shop/risnet] also allows OSL shaders. The OSL shader can be defined with an [OSL shader|/nodes/vop/ris_OSLshader] node or, if it's compiled as `.oso` file, with a digital asset, similar to RIS shaders.
The only difference is the __Render Mask__ that should be set to `OSL` for OSL shaders (and `RIB` for RIS shaders). OSL shaders are used the same way as RIS pattern shaders.

For more information about RIS, please refer to the [RenderMan for Houdini (RfH)|http://renderman.pixar.com/resources/current/RenderMan/rfhOverview.html] or [RenderMan Wiki|https://rmanwiki.pixar.com/display/RfH/RenderMan+for+Houdini] documentation.

== How to ==

:task:Define a new BxDF, integrator, or a pattern shader node for a corresponding custom C++ plugin:
    # In the main menu, choose __File > New Operator Type...__

    # Specify the name and label for the new node type.

    # Choose __VEX Builder Type__ as the operator style, and __Accept__.

    # In the [properties dialog |/ref/windows/optype] that pops up, go to the __Input/Output__ tab and turn on the __External or Procedural Shader__.
    
    # In the __Node__ tab, specify the C++ plugin name as __Shader Name__.

    # Choose an appropriate __Shader Type__ from the drop down menu (eg, BSDF Shader).

    # Specify `RIB` as __Render Mask__ for the shader to be available to RenderMan .

    # Specify `risnet` as __VopNet Mask__ for the node to appear in the [Tab menu|/basics/tabmenu] inside the [RIS shading network|/nodes/shop/risnet].

	TIP:
	    Click __Apply__ for the render mask to get committed, so that the parameters show the __RMan Type__ option in the next step.

    # In __Parameters__ tab define shader's parameters. Be sure to specify __RMan Type__ as well.

    # In the __Input/Output__ optionally define inputs and outputs.
	
	You can click __Create Inputs from Parameters__ to automatically generate the inputs.
    

:task:Create an OSL shader:
    # In [RIS shading network|/nodes/shop/risnet] press Tab to open [Tab menu|/basics/tabmenu] and create __OSL Shader__.

    # Dive inside the [OSL shader|/nodes/vop/ris_OSLshader] and define the its logic.

    # Use [Parameter VOP|/nodes/vop/parameter] to define shader input parameter.

    # Set __Export__ parameter on the Parameter VOP to __When Input is Connected__ to make it an input-output shader parameter.

	



