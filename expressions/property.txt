= property =

#type: expression

"""Similar to `ch()`, but for render properties, with a default if the property doesn't exist."""

:usage: `property("<<path>>", <<default>>)`
:usage: `propertyf("<<path>>", <<frame>>, <<default>>)`
:usage: `propertyt("<<path>>", <<time>>, <<default>>)`
:usage: `propertys("<<path>>", "<<default>>")`
:usage: `propertysop("<<path>>", "<<default>>")`
:usage: `propertysraw("<<path>>", "<<default>>")`

The `property`, `propertyf`, `propertyt`, `propertys`, `propertysop`, and `propertysraw`  functions are equivalent to the [Exp:ch], [Exp:chf], [Exp:cht], [Exp:chs], [Exp:chsop], and [Exp:chsraw] function but for evaluating [render properties|/props/].

The first argument is a path to a property on a node. Unlike their `ch*` counterparts, these functions take an extra <<default>> argument which the function returns if the property/parameter doesn't exist on the node.

For example, for an object where the `vm_pointscale` attribute exists, but the `vm_samplecovingexpansion` property doesn't exist, you can get a default value back using the `property()` function:

{{{
#!exp
property("/obj/geo1/vm_pointscale", 2.0) == 1
property("/obj/geo1/vm_samplecovingexpansion,", 0.2) == 0.2
}}}

If you use the `ch()` function, it will silently fails and return `0` if the property doesn't exist:

{{{
#!exp
ch("/obj/geo1/vm_pointscale") == 1
ch("/obj/geo1/vm_samplecovingexpansion,") == 0
}}}

See the equivalent `ch` function for more information on each variant.

@related

::[Exp:ch]
::[Exp:chf]
::[Exp:cht]
::[Exp:chs]
::[Exp:chsop]
::[Exp:chsraw]
