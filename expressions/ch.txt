= ch =
#type: expression
#category: parameters

"""Returns the value of a parameter."""

== Overview ==

The `ch` family of functions gets the value of a parameter. This lets you make the values of certain parameters automatically identical to or relative to the value of other parameters.

For example, if you have two [Geometry object nodes|Node:obj/geo] named `geo1` and `geo2`, you can make `geo2` always be 2 units higher than `geo` by setting `geo2`'s __Translate Y__ parameter to:

{{{
#!hscript
ch("../geo1/ty") + 2
}}}

Now when you move `geo1`, `geo2`'s Y position will always be 2 units higher.

Channel references let you create custom [spare parameters|/network/spare] and [digital asset interfaces|/assets/] and have them control other nodes, by using channel references to have the nodes inside the subnetwork/asset reference the "interface" parameters at the higher level.

== Path argument ==

The first argument to the channel functions is a string _path_ to the parameter whose value you want to get.

For parameters on the same node, you can just use the parameter's _internal name_. For example, in an object, you could make the object's X position always match the Y position by setting the __Translate Y__ to the expression:

{{{
#!hscript
ch("ty")
}}}

TIP:
    You can find the internal name of a parameter in the tooltip when you hover the mouse over the parameter in the parameter editor.

To get a parameter on a different node, you need to make a _path_ to the parameter, similar to UNIX directory paths.

For example, to reference the `ty` parameter of a node named `geo2` in the same network:

{{{
#!hscript
ch("../geo2/ty")
}}}

To reference the `tx` parameter of the parent network node:

{{{
#!hscript
ch("../tx")
}}}

== Getting numbers ==

:usage: `ch("path")`

    Returns the _floating point_ value of the given parameter.
    
    For example, to get the __Origin X__ of the `font1` node:
    
    {{{
    #!hscript
    ch("../font1/tx")
    }}}

:usage: `chf("path", frame_num)`

    Returns the floating point value of the given parameter, as computed at the given frame number.
    
    Getting a value from a future time requires [cooking|/basics/cooking] some or all of the scene up to that time, so this function is potentially expensive.
    
    For example, to get the __Origin X__ of the `font1` node from ten frames previous:
    
    {{{
    #!hscript
    chf("../font1/text", $F - 10)
    }}}

:usage: `cht("path", seconds)`

    Returns the floating point value of the given parameter, as computed at the given time (in seconds).
    
    Getting a value from a future time requires [cooking|/basics/cooking] some or all of the scene up to that time, so this function is potentially expensive.
    
    For example, to get the __Origin X__ of the `font1` node from 2 seconds previous:
    
    {{{
    #!hscript
    chf("../font1/text", $T - 2)
    }}}

== Getting strings ==

:usage: `chs("path")`
    
    Returns the _string_ value of the given parameter.
    
    For example, to get the __Text__ of the `font1` node:
    
    {{{
    #!hscript
    chs("../font1/text")
    }}}
    
:usage: `chsraw("path")`

    Returns the "raw" string value of the given parameter, without expanding quotes or variable names. For example, if the parameter contains an expression `$F - 10`, you will get the string `"$F - 10"` (instead of the computed value of the current frame minus ten).

== Getting a node path ==

See [Exp:chsop].

== Getting ramp values ==

See [Exp:chramp], [Exp:chrampf], and [Exp:chrampt].

== Tips ==

* You can automatically create channel-references using the "Copy" and "Paste reference" commands on the parameter ((RMB)) right-click menu.

* See [linking parameter values|/network/parms#link] for more information.

@related

- [Exp:chramp]
- [Exp:chexist]

//- [Exp:chf]
//- [Exp:cht]
//- [Exp:chs]
//- [Exp:chsraw]

