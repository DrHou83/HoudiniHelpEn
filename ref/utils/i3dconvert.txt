= i3dconvert =

== Usage ==

{{{
i3dconvert [-v] [-t|-i] [-d x y z] file1 file2
}}}

The `-v` option will cause verbose output.

== Output ==

Converts 3D texture file formats to geometry (and vice versa).

The -c, -i, or -t or option can be used to generate a specific type of
3D texture image from the geometry file:

`-c`:
    Generate a Point Cloud Texture map.
    
`-i`:
    Generate an irradiance map.

`-t`:
    Generate a .i3d texture file.
    
If you don't specify one of the above options, the program will use the attributes on the geometry to choose the output format.

== Working with 3D texture files (.i3d) ==

The geometry file that is generated will be a set of points with attributes
defined for each channel of the i3d image.  When converting from
a geometry file to a 3d texture, the points must be evenly
spaced in a regular axis-aligned lattice for the program to work.
Currently, only ASCII geometry files can be created, although
it is possible to read any format of geometry files.

The `-d` option allows you to specify the resolution of the target
texture file when converting from a .geo file to a .i3d file.
If the `-d` option is not specified, the resolution of the image will be
determined by analyzing the geometry coordinates.

When converting a cubic point cloud into a .i3d file with i3dconvert without metaballs, the `-d` option for specifying the resolution is not used and returns an error. Specifying a resolution is invalid because you have a regular xyz grid of points so the resolution will be the number of points in each respective axis and there is no filter needed to increase and decrease the resolution. Each point in the cubic point cloud becomes a voxel in the i3d image.

=== Examples ===

{{{  
i3dconvert cloud.i3d stdout.geo | gconvert stdin > cloud.bgeo

i3dconvert cloud.bgeo cloud1.i3d
}}}

== Making point cloud texture maps ==

Point cloud textures are stored in the Tiled Block Format (TBF).
Each channel in the point cloud has a prefix associated with it.  This
prefix is used to differentiate between point and primitive
attributes of the same name.  

The prefix for each geometric element is specified by the following:

`-P <<point_prefix>>`:
    Default `pcloud:`

`-V <<vertex_prefix>>`:
    Default `vertex:`
 
`-R` <<primitive_prefix>>:
   Default `primitive:`
    
`-D` <<detail_prefix>>`:
    Default `detail:`

Currently, only point attributes can be stored in the TBF files.