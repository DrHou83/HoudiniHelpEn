= hou.Dialog =
#type: homclass
#cppname: HOM_Dialog
#group: ui

"""Class representing a Houdini dialog."""

This class represents only dialogs created by [Hom:hou#.ui#createDialog].

Custom dialogs can be created with Houdini's User Interface Script Language.  An overview of the language can be found in the Houdini Development Kit (HDK) documentation, specifically in the "Houdini User Interface -> The .ui Script Language" section.

@methods

::`addCallback(self, name, callback)`:
    #cppname: HOM_Dialog::addCallback
    Register a callback function for the specified UI variable.

    The function is invoked when the value of the UI variable changes and
    receives no arguments.

    Raises [Hom:hou.TypeError] if `name` is `None`.
    Raises [Hom:hou.OperationFailed] if no UI variable with the specified name
    exists.

::`callbacks(self, name)` -> `tuple` of `callbacks`:
    #cppname: HOM_Dialog::callbacks
    Return all callback functions registered with the given UI variable.

    Raises [Hom:hou.TypeError] if `name` is `None`.
    Raises [Hom:hou.OperationFailed] if no UI variable with the specified name
    exists.

::`destroy(self)`:
    #cppname: HOM_Dialog::destroy
    Delete this dialog.

    If you call methods on a Dialog instance after it has been destroyed,
    Houdini will raise [Hom:hou.ObjectWasDeleted].

::`enableValue(self, name, onoff)`:
    #cppname: HOM_Dialog::enableValue
    Enable or disable the specified UI variable.

    Set `onoff` to `True` to enable the variable.
    Set `onoff` to `False` to disable the variable.

    Raises [Hom:hou.TypeError] if either `name` is `None`.
    Raises [Hom:hou.OperationFailed] if no UI variable with the specified name
    exists.

::`menuItems(self, name)` -> `tuple` of `str`:
    #cppname: HOM_Dialog::menuItems
    Return the menu entries for the specified UI variable.

    Raises [Hom:hou.TypeError] if `name` is `None`.
    Raises [Hom:hou.OperationFailed] if no UI variable with the specified name
    exists.
    Raises [Hom:hou.OperationFailed] if the UI variable does not point to a
    menu.

::`removeCallback(self, name, callback)`:
    #cppname: HOM_Dialog::removeCallback
    Remove the specified callback function from the UI variable.

    Raises [Hom:hou.TypeError] if `name` is `None`.
    Raises [Hom:hou.OperationFailed] if no UI variable with the specified name
    exists.
    Raises [Hom:hou.OperationFailed] if the specified callback is not
    registered with the UI variable.

::`setMenuItems(self, name, items)`:
    #cppname: HOM_Dialog::setMenuItems
    Set the menu entries in the specified UI variable.

    Raises [Hom:hou.TypeError] if `name` is `None`.
    Raises [Hom:hou.OperationFailed] if no UI variable with the specified name
    exists.
    Raises [Hom:hou.OperationFailed] if the UI variable does not point to a
    menu.

::`setValue(self, name, value)`:
    #cppname: HOM_Dialog::setValue
    Set the value of the specified UI variable.

    Raises [Hom:hou.TypeError] if either `name` or `value` is `None`.
    Raises [Hom:hou.OperationFailed] if no UI variable with the specified name
    exists.

::`value(self, name)`:
    #cppname: HOM_Dialog::value
    Return the value of the given UI variable.

    Raises [Hom:hou.TypeError] if `name` is `None`.
    Raises [Hom:hou.OperationFailed] if no UI variable with the specified name
    exists.

::`waitForValueToChangeTo(self, name, new_value)`:
    #cppname: HOM_Dialog::waitForValueToChangeTo
    Wait for the specified UI variable to change its value to `new_value`.

    This is a blocking call.  The method will return execution when the
    variable has changed to the desired value.  Note that Houdini will remain
    responsive even when this method is blocked waiting.

    If the variable's current value is already set to `new_value` then this
    method will return immediately.

    Raises [Hom:hou.TypeError] if `name` is `None`.
    Raises [Hom:hou.OperationFailed] if no UI variable with the specified name
    exists.
