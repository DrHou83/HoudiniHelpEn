= hou.Vertex =
#type: homclass
#cppname: HOM_Vertex
#group: geo

"""Existing inside a Geometry object, a Vertex object is contained in
exactly one Prim, and references exactly one Point."""

This setup allows points to be shared between primitives.  For example, a
polygon contains its own list of vertices that are not shared with other
primitives, but vertices in different polygons may refer to the same point.
When that point moves, the corresponding vertices on all adjacent polygons
will also move, preventing polygon edges from separating.

Note that you can use [Hom:hou.Vertex#point] to retrieve a point from a vertex,
but there is no method to retrieve all the vertices referring to a point.
Houdini does not store this information internally, but you can derive it.  The
best way to quickly retrieve this information is to build a dictionary mapping
all points to sets of vertices, and then reuse this dictionary in your
algorithm.

@methods

::`attribValue(self, name_or_attrib)` -> `int`, `float`, `str` or `tuple`:
    #cppname: HOM_Vertex::attribValue
    #replaces: Exp:vertex, Exp:vertexs
    Return the value store in this vertex for a particular attribute.  The
    attribute may be specified by name or by [Hom:hou.Attrib] object.

    Looking an attribute value using a [Hom:hou.Attrib] object is slightly
    faster than looking it up by name.  When looking up attribute values inside
    a loop, look up the [Hom:hou.Attrib] object outside the loop, and pass it
    into this method.

    Raises [Hom:hou.OperationFailed] if no attribute exists with this name.

::`floatAttribValue(self, name_or_attrib)` -> `float`:
    #cppname: HOM_Vertex::floatAttribValue
    Return the vertex attribute value for a particular floating point
    attribute.  The attribute may be specified by name or by [Hom:hou.Attrib]
    object.

    Raises [Hom:hou.OperationFailed] if no attribute exists with this name
    or the attribute is not float of size 1.

    In most cases, you'll just use [Hom:hou.Vertex#attribValue] to access
    attribute values.  Houdini uses this method internally to implement
    attribValue.

::`floatListAttribValue(self, name_or_attrib)` -> `tuple` of `float`:
    #cppname: HOM_Vertex::floatListAttribValue
    Return the vertex attribute value for a particular floating point
    attribute.  The attribute may be specified by name or by
    [Hom:hou.Attrib] object.  The return value is a tuple of floats.

    It is valid to call this method when the attribute's size is 1.  In this
    case, a tuple with one element is returned.

    See also [Hom:hou.Vertex#attribValue].

::`intAttribValue(self, name_or_attrib)` -> `int`:
    #cppname: HOM_Vertex::intAttribValue
    Return the vertex attribute value for a particular integer
    attribute of size 1.  The attribute may be specified by name or by
    [Hom:hou.Attrib] object.  See [Hom:hou.Vertex#floatAttribValue] for more
    information.

::`intListAttribValue(self, name_or_attrib)` -> `tuple` of `int`:
    #cppname: HOM_Vertex::intListAttribValue
    Return the vertex attribute value for a particular integer attribute.
    The attribute may be specified by name or by [Hom:hou.Attrib] object.  The
    return value is a tuple of ints.  See [Hom:hou.Vertex#floatListAttribValue]
    for more information.

::`stringAttribValue(self, name_or_attrib)` -> `str`:
    #cppname: HOM_Vertex::stringAttribValue
    Return the vertex attribute value for a particular string attribute.  The
    attribute may be specified by name or by [Hom:hou.Attrib] object.  See
    [Hom:hou.Vertex#floatAttribValue] for more information.

::`stringListAttribValue(self, name_or_attrib)` -> `tuple` of `str`:
    #cppname: HOM_Vertex::stringListAttribValue
    Return the vertex attribute value for a particular string attribute.  The
    attribute may be specified by name or by [Hom:hou.Attrib] object.  The
    return value is a tuple of strings.

    It is valid to call this method when the attribute's size is 1.  In this
    case, a tuple with one element is returned.

    See also [Hom:hou.Vertex#attribValue].

::`setAttribValue(self, name_or_attrib, attrib_value)`:
    #cppname: HOM_Vertex::setAttribValue
    Store an attribute value in this vertex.  The attribute may be specified
    by name or by [Hom:hou.Attrib] object, and must be an existing vertex
    attribute in the geometry.  You would typically call this method from the
    code of a Python-defined SOP.

    Raises [Hom:hou.OperationFailed] if no attribute exists with this name
    or if the attribute's data type does not match the value passed in.  If the
    attribute's size is more than 1, the attribute value must be a sequence of
    integers/floats, and the size of the sequence must match the attribute's
    size.

    Raises [Hom:hou.GeometryPermissionError] if this geometry is not modifiable.

::`attribType(self)` -> [Hom:hou.attribType] enum value:
    #cppname: HOM_Vertex::attribType
    Return the enumerated value [Hom:hou.attribType#Vertex].  Points,
    primitives, vertices, and geometry support the same set of methods for
    querying their attributes, and this method is one of them.

    See also:
    - [Hom:hou.Point#attribType]
    - [Hom:hou.Prim#attribType]
    - [Hom:hou.Geometry#attribType]
    - [Hom:hou.attribType]

::`point(self)` -> [Hom:hou.Point]:
    #cppname: HOM_Vertex::point
    Return the [Hom:hou.Point] object that this vertex refers to.  Each
    vertex refers to exactly one point.

::`prim(self)` -> [Hom:hou.Prim]:
    #cppname: HOM_Vertex::prim
    Return the [Hom:hou.Prim] object containing this vertex.

    If the primitive is a face, use [Hom:hou.Prim#vertices] to access the other
    vertices in the primitive.  If it is a surface, use
    [Hom:hou.Surface#vertex], [Hom:hou.Surface#numRows], and
    [Hom:hou.Surface#numCols].

::`geometry(self)` -> `Geometry`:
    #cppname: HOM_Vertex::geometry
    Return the [Hom:hou.Geometry] object containing this vertex.

::`number(self)` -> `int`:
    #cppname: HOM_Vertex::number
    Return the number of this vertex within its primitive.
    Vertices in the same primitive are numbered sequentially starting from 0,
    and the vertices returned by [Hom:hou.Prim#vertices] are in order by their
    number.

::`linearNumber(self)` -> `int`:
    #cppname: HOM_Vertex::linearNumber
    Return the number of this vertex within its whole detail.
    Vertices in the detail are sometimes in the same order as they occur
    in primitives, but this is often *not* true.  Linear vertex numbers
    in a detail are sequential, starting from 0, and ending with one
    less than the total number of vertices in the detail.
    This can be useful so that a function that can be applied to point, vertex,
    primitive, or detail attributes doesn't have to take two numbers just
    to handle the vertex case.

::`destroy(self)`:
    #cppname: HOM_Vertex::destroy
    #status: ni

::`normal(self)` -> [Hom:hou.Vector3]:
    #cppname: HOM_Vertex::normal
    #status: ni

