= hou.CompositorViewer =
#type: homclass
#cppname: HOM_CompositorViewer
#superclass: hou.PathBasedPaneTab
#group: image

"""Minimal class representing a compositing view pane."""

This class is currently very simple, implementing a minimal number of methods necessary to support compositing shelf tools. It does not currently allow programmatic control of most functions available in the UI.

You should probably avoid using this object. If you are writing custom tools for the compositing view, the higher-level functions in the `cop2toolutils` module are more useful. 

@methods

::`currentState(self)` -> `str`:
    #cppname: HOM_CompositorViewer::currentState
    
    Returns the name of the tool currently in use in the view. This is an internal, undocumented designation but usually corresponds to the name of a node. You can change to a different tool using [setCurrentState|#setCurrentState].

::`enterViewState(self, wait_for_exit=False)`:
    #cppname: HOM_CompositorViewer::enterViewState
    
    Switch to the view tool.

::`modalImageViewer(self)` -> [Hom:hou.ModalImageViewer]:
    #cppname: HOM_CompositorViewer::modalImageViewer
    #status: ni

::`setCurrentState(self, state, wait_for_exit=False)`:
    #cppname: HOM_CompositorViewer::setCurrentState
    
    Sets the currently active tool in the view. `state` is a string containing an internal, undocumented designation. See [currentState()|#currentState].

