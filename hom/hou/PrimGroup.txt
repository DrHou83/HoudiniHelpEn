= hou.PrimGroup =
#type: homclass
#cppname: HOM_PrimGroup
#group: geo

"""A named group of primitives inside a Geometry object."""

Primitive groups reside inside the geometry, and each primitive group has a
unique name.

Groups are either ordered or unordered.  When asking for the contents of an
ordered group, the results will be returned in the order they were added to
to the group.  For an unordered group, the results will be returned in an
arbitrary order (though it is normally arranged by increasing primitive number).
When creating a group using the group SOP, use the <<Create Ordered>> checkbox
to create an ordered group.  When creating one from Python, Use the
`is_ordered` parameter of [Hom:hou.Geometry#createPrimGroup] to control
whether a group is ordered.

See [Hom:hou.Prim] for more information about primitives.  See also
[Hom:hou.PrimGroup].

@methods

::`name(self)`:
    #cppname: HOM_PrimGroup::name
    Return the name of the group.  Each primitive group has a unique name.

::`geometry(self)` -> [Hom:hou.Geometry]:
    #cppname: HOM_PrimGroup::geometry
    Return the geometry object containing this group.

::`prims(self)` -> `tuple` of [Hom:hou.Prim]:
    #cppname: HOM_PrimGroup::prims
    Return the contents of this group.

::`contains(self, prim)` -> `bool`:
    #cppname: HOM_PrimGroup::contains
    Return whether or not a primitive is in this group.

    Raises [Hom:hou.OperationFailed] if the primitive belongs to a different
    geometry object than this group.

::`add(self, prim_or_list_or_prim_group)`:
    #cppname: HOM_PrimGroup::add
    If given a [Hom:hou.Prim] or a list of [Hom:hou.Prim]'s, add the
    primitive(s) to the group.  If given a [Hom:hou.PrimGroup], merge the
    contents of the other primitive group with this group (the other group is
    unaffected).  You would typically call this method from the code of a
    Python-defined SOP.

    It is okay to add primitives to the group that were already in the group.

    Raises [Hom:hou.GeometryPermissionError] if this geometry is not modifiable.

    Raises [Hom:hou.OperationFailed] if the primitive or primitive group belong
    to a different geometry object than this group.

::`remove(self, prim_or_list_or_prim_group)`:
    #cppname: HOM_PrimGroup::remove
    If given a [Hom:hou.Prim] or a list of [Hom:hou.Prim]'s, remove the
    primitive(s) from the group.  If given a [Hom:hou.PrimGroup], remove all
    primitives in the other group from this group (the other group is
    unaffected).  You would typically call this method from the code of a
    Python-defined SOP.

    It is not an error to try to remove a primitive from the group that wasn't
    already in the group.

    Raises [Hom:hou.GeometryPermissionError] if this geometry is not modifiable.

    Raises [Hom:hou.OperationFailed] if the primitive belongs to a different
    geometry object than this group.

::`clear(self)`:
    #cppname: HOM_PrimGroup::clear
    Remove all primitives from this group.  You would typically call this method
    from the code of a Python-defined SOP.
    
    The primitives remain in the geometry; only the group is affected.

    Raises [Hom:hou.GeometryPermissionError] if this geometry is not modifiable.

::`destroy(self)`:
    #cppname: HOM_PrimGroup::destroy
    Remove this group from the geometry.  You would typically call this method
    from the code of a Python-defined SOP.
    
    Raises [Hom:hou.GeometryPermissionError] if this geometry is not modifiable.

::`options(self)` -> `dict` of `str` to `bool`, `int`, `float`, `str`:
    #cppname: HOM_PrimGroup::options
    Return a dictionary containing the extra options attached to this
    primitive group.

    Note that the contents of this dictionary are saved to geometry files.

    See also [Hom:hou.PrimGroup#option], [Hom:hou.PrimGroup#setOption] and
    [Hom:hou.PrimGroup#removeOption].

::`option(self, name)` -> `bool`, `int`, `float`, `str`, [Hom:hou.Vector2], [Hom:hou.Vector3], [Hom:hou.Vector4], [Hom:hou.Quaternion], [Hom:hou.Matrix3], [Hom:hou.Matrix4], tuple of `int`, or tuple of `float`
    #cppname: HOM_PrimGroup::options
    Return the value of an individual option, on `None` if no such option
    exists.

    See also [Hom:hou.PrimGroup#options], [Hom:hou.PrimGroup#setOption] and
    [Hom:hou.PrimGroup#removeOption].

::`optionType(self, name)` -> [Hom:hou.fieldType] enum value:
    #cppname: HOM_PrimGroup::optionType
    Return a [Hom:hou.fieldType] enumerated value that describes the type
    of data stored in an option.  Returns `hou.fieldType.NoSuchField` if
    no field exists with that name.

::`setOption(self, name, value, type_hint = hou.fieldType::NoSuchField)`:
    #cppname: HOM_PrimGroup::setOption
    Set an entry in the dictionary of options.  See
    [Hom:hou.PrimGroup#options] for more information.

    name:
        The name of the option to set.

    value:
        An integer, float, string, [Hom:hou.Vector2], [Hom:hou.Vector3],
        [Hom:hou.Vector4], [Hom:hou.Quaternion], [Hom:hou.Matrix3],
        [Hom:hou.Matrix4], or sequence of numbers.

    type_hint:
        Used to determine the exact [Hom:hou.fieldType] desired when the
        specified value type is not enough to unambiguously determine it.

::`removeOption(self, name)`:
    #cppname: HOM_PrimGroup::removeOption
    Remove an entry in the dictionary of options.  See
    [Hom:hou.PrimGroup#options] for more information.

    Raises [Hom:hou.OperationFailed] if there is no entry in the dictionary
    with this name.

@replaces

- [Exp:hasprim]
- [Exp:primlist]

