= hou.FloatingPanel =
#type: homclass
#cppname: HOM_FloatingPanel
#group: ui

"""A floating window that contains one or more panes."""

Much like a desktop, a floating panel contains panes.  A floating panel
may be attached to a desktop, in which case it is saved with the desktop,
hidden when the desktop is closed, and shown when the desktop is opened.
You can use floating panels to create desktops that span multiple monitors.

When you create a new floating panel, for example, it contains a single pane,
which in turn contains a single pane tab showing the network editor.

Note that a floating panel may be locked to one particular pane tab.  These
stripped down panels do not display the interface for adding new pane tabs or
splitting panes.  In fact, these stripped down floating panels do not contain
any panes at all, and [Hom:hou.FloatingPanel#panes] will return an empty tuple.
You can create such a stripped down floating panel with
[Hom:hou.Desktop#createFloatingPaneTab].

See [Hom:hou.Desktop] for more information about panes and pane tabs.

@methods

::`name(self)` -> `str`:
    #cppname: HOM_FloatingPanel::name
    Return the name of the floating panel.  The panel's name is displayed in
    its window's title.

::`setName(self, name)`:
    #cppname: HOM_FloatingPanel::setName
    Set this panel's name.  Any characters in the name that are not letters,
    numbers, or underscores are replaced with underscores.

    Raises [Hom:hou.OperationFailed] if the name is an empty string.

::`panes(self)` -> tuple of [Hom:hou.Pane]:
    #cppname: HOM_FloatingPanel::panes
    Return all the panes inside the panel.  As mentioned in the documentation
    for this class, a floating panel may be stripped down and locked to one
    particular pane tab, and these stripped down floating panels do not contain
    any panes.

::`paneTabs(self)` -> tuple of [Hom:hou.PaneTab]:
    #cppname: HOM_FloatingPanel::paneTabs
    Return all the pane tabs that are in this floating panel, regardless of
    which pane they are in.

::`paneTabOfType(self, type, index=0)` -> [Hom:hou.PaneTab] or `None`:
    #cppname: HOM_FloatingPanel::paneTabOfType
    Find and return the pane tab with the desired type or `None` if no such
    pane tab exists.

    type:
	A [Hom:hou.paneTabType] enumerated variable.

    index:
	If there are multiple tabs with the desired type, this parameter
	determines which one is returned.  Use `index=0` to return the first
	found tab, `index=1` to return the second found tab, etc.  By default,
	index is 0.

::`findPaneTab(self, name)` -> [Hom:hou.PaneTab] or `None`:
    #cppname: HOM_FloatingPanel::findPaneTab
    Return the pane tab with the given name, or `None` if no such tab exists.

::`close(self)`:
    #cppname: HOM_FloatingPanel::close
    Close the floating panel's window, closing all the pane tabs inside it.

::`isAttachedToDesktop(self)` -> `bool`:
    #cppname: HOM_FloatingPanel::isAttachedToDesktop
    Return whether or not this panel is attached to the desktop.  Panels
    attached to the desktop are saved with the desktop and are opened when
    the desktop is opened and closed when the desktop is closed.

    See also [Hom:hou.FloatingPanel#attachToDesktop].

::`attachToDesktop(self, on)`:
    #cppname: HOM_FloatingPanel::attachToDesktop
    Attach this panel to the desktop.  See
    [Hom:hou.FloatingPanel#isAttachedToDesktop] for more information.

::`containsPlaybar(self)` -> `bool`:
    #cppname: HOM_FloatingPanel::containsPlaybar
    Return whether or not this panel contains Houdini's playbar.

    See also [Hom:hou.FloatingPanel#setContainsPlaybar].

::`setContainsPlaybar(self, on)`:
    #cppname: HOM_FloatingPanel::setContainsPlaybar
    If `on` is True, move Houdini's playbar to this panel.  Otherwise, move
    it back to the main desktop window.

    See also [Hom:hou.FloatingPanel#containsPlaybar].

::`containsShelf(self)` -> `bool`:
    #cppname: HOM_FloatingPanel::containsShelf
    Return whether or not this panel contains Houdini's shelf.

    See also [Hom:hou.FloatingPanel#setContainsShelf].

::`setContainsShelf(self, on)`:
    #cppname: HOM_FloatingPanel::setContainsShelf
    If `on` is True, move Houdini's shelf to this panel.  Otherwise, move
    it back to the main desktop window.

    See also [Hom:hou.FloatingPanel#containsShelf].

::`containsStatusBar(self)` -> `bool`:
    #cppname: HOM_FloatingPanel::containsStatusBar
    Return whether or not this panel contains Houdini's status bar (the bar
    at the bottom of the desktop for status messages).

    See also [Hom:hou.FloatingPanel#setContainsStatusBar].

::`setContainsStatusBar(self, on)`:
    #cppname: HOM_FloatingPanel::setContainsStatusBar
    If `on` is True, move Houdini's status bar to this panel.  Otherwise, move
    it back to the main desktop window.

    See also [Hom:hou.FloatingPanel#containsStatusBar].

::`containsMenuBar(self)` -> `bool`:
    #cppname: HOM_FloatingPanel::containsMenuBar
    Return whether or not this panel contains Houdini's main menu bar.

    See also [Hom:hou.FloatingPanel#setContainsMenuBar].

::`setContainsMenuBar(self, on)`:
    #cppname: HOM_FloatingPanel::setContainsMenuBar
    If `on` is True, move Houdini's main menu bar to this panel.  Otherwise,
    move it back to the main desktop window.

    See also [Hom:hou.FloatingPanel#containsMenuBar].

::`isFullscreen(self)` -> `bool`:
    #cppname: HOM_FloatingPanel::isFullscreen
    Return whether or not this panel is in full screen mode.

    See also [Hom:hou.FloatingPanel#setIsFullscreen].

::`setIsFullscreen(self, on)`:
    #cppname: HOM_FloatingPanel::setIsFullscreen
    Set whether or not this panel is in full screen mode.

    See also [Hom:hou.FloatingPanel#isFullscreen].


::`position(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_FloatingPanel::position

    Return the desktop position (in pixels) of the floating panel window.


::`setPosition(self, position)`:
    #cppname: HOM_FloatingPanel::setPosition

    Move the floating panel window to the specified desktop position (in
    pixels).

    Raise [Hom:hou.TypeError] if `position` does not contain exactly two values.


::`size(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_FloatingPanel::size

    Return the floating panel window's size (in pixels).


::`setSize(self, size)`:
    #cppname: HOM_FloatingPanel::setSize

    Resize the floating panel window (in pixels).

    Raise [Hom:hou.TypeError] if `size` does not contain exactly two values.
    Raise [Hom:hou.TypeError] if `size` contains a value that is less than or
    equal to zero.
