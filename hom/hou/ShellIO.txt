= hou.ShellIO =
#type: homclass
#cppname: HOM_ShellIO
#group: scripting

"""A proxy object that replaces Python's `stdin`, `stdout`, and `stderr` streams within Houdini."""

This class is mostly an implementation detail of how Houdini replaces Python's standard streams with versions that allow Python input and output in Houdini windows and pane tabs.

The methods that might be useful outside of internal SideFX scripts are [addCloseCallback()|#addCloseCallback], [removeCloseCallback()|#removeCloseCallback], and [callbacks()|#callbacks]. These let you register functions that Houdini calls when the Python shell window or pane tab is closed (the equivalent of `atexit()` scripts in regular Python).

The other methods should be considered internal implementation details, and you should not use them.

@methods

::`addDataForReading(self, data)`:
    #cppname: HOM_ShellIO::addDataForReading
    #status: internal

::`addEOFForReading(self)`:
    #cppname: HOM_ShellIO::addEOFForReading
    #status: internal

::`addCloseCallback(callback)`:
    #cppname: HOM_ShellIO::addCloseCallback
    
    Register a Python callback to be called whenever the last Houdini
    Python Shell is closed.

    The argument is a callable object that expects no parameters.

    {{{
    #!python
    def cleanup():
        # Here is where you would run your cleanup code when
        # the Python shell has closed.
        pass
    
    hou.ui.shellIO().addCloseCallback(cleanup)
    }}}

    You might use this function to cleanly terminate any mechanisms that
    are dependent on the Python shell.  For example, you can register
    a callback which disables an object from logging output messages to
    the shell.

::`closeCallbacks()` -> `tuple` of callback:
    #cppname: HOM_ShellIO::closeCallbacks
    
    Return a tuple of all the Python callbacks that have been registered with
    [Hom:hou.ShellIO#addCloseCallback].

::`getAndClearWrittenData(self)` -> string:
    #cppname: HOM_ShellIO::getAndClearWrittenData
    #status: internal

::`interruptShellThread(self)`:
    #cppname: HOM_ShellIO::interruptShellThread
    #status: internal

::`isatty(self)` -> `bool`:
    #cppname: HOM_ShellIO::isatty

    Implemented as part of the "file-like object" interface.

::`isWaitingForCommand(self)` -> bool:
    #cppname: HOM_ShellIO::isWaitingForCommand
    #status: internal

::`readline(self, size=-1)` -> string:
    #cppname: HOM_ShellIO::readline
    
    Implemented as part of the "file-like object" interface.

::`removeCloseCallback(callback)`:
    #cppname: HOM_ShellIO::removeCloseCallback
    
    Remove a Python callback that was previously registered with
    [Hom:hou.ShellIO#addCloseCallback].  See [Hom:hou.ShellIO#addCloseCallback]
    for more information.

    Raises [Hom:hou.OperationFailed] if the callback was not previously
    registered.

::`setIsWaitingForCommand(self, on)`:
    #cppname: HOM_ShellIO::setIsWaitingForCommand
    #status: internal

::`write(self, data)`:
    #cppname: HOM_ShellIO::write
    
    Implemented as part of the "file-like object" interface.



