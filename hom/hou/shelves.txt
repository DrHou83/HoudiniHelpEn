= hou.shelves =
#type: hommodule
#cppname: HOM_shelves
#group: shelf

"""Contains functions for working with shelf tabs and shelf tools."""

@functions

::`defaultFilePath()` -> `str`:
    #cppname: HOM_shelves::defaultFilePath
    #status: nd

::`newShelf(file_path=None, name=None, label=None)` -> [Hom:hou.Shelf]:
    #cppname: HOM_shelves::newShelf
    
    Returns a new [Hom:hou.Shelf] object using the provided options.
    You must use this function to create new shelf tabs, you can't
    instantiate the `Shelf` class directly.

::`newShelfSet(file_path=None, name=None, label=None)` -> [Hom:hou.ShelfSet]:
    #cppname: HOM_shelves::newShelfSet
    
    Returns a new [Hom:hou.ShelfSet] object using the provided options.
    You must use this function to create new shelf sets, you can't
    instantiate the `ShelfSet` class directly.

::`newTool(file_path=None, name=None, label=None, script=None, language=hou.scriptLanguage.Python, icon=None, help=None, help_url=None, network_categories=(), viewer_categories=(), cop_viewer_categories=(), network_op_type=None, viewer_op_type=None, locations=())` -> [Hom:hou.Tool]:
    #cppname: HOM_shelves::newTool
    
    Returns a new [Hom:hou.Tool] object using the provided options.
    You must use this function to create new shelf tabs, you can't
    instantiate the `Tool` class directly.

::`loadFile(file_path)`:
    #cppname: HOM_shelves::loadFile
    
    Reads a shelf file and adds any shelves and tools defined in that file
    to Houdini.

::`reloadShelfFiles()`:
    #cppname: HOM_shelves::reloadShelfFiles
    
    Reloading the shelf files found in the search path and update the
    shelf UI with any changed information.

::`runningTool()` -> [Hom:hou.Tool] or `None`:
    #cppname: HOM_shelves::runningTool
    #status: nd

::`shelfSets()` -> `dict` of `str` to [Hom:hou.ShelfSet]:
    #cppname: HOM_shelves::shelfSets
    
    Returns a dictionary mapping the internal name of every known shelf
    tab to a corresponding [Hom:hou.Shelf] object.

::`shelves()` -> `dict` of `str` to [Hom:hou.Shelf]:
    #cppname: HOM_shelves::shelves
    
    Returns a dictionary mapping the internal name of every known shelf
    tab to a corresponding [Hom:hou.Shelf] object.

::`tools()` -> `dict` of `str` to [Hom:hou.Tool]:
    #cppname: HOM_shelves::tools
    
    Returns a dictionary mapping the internal name of every known tool to
    a corresponding [Hom:hou.Tool] object.
    
    NOTE:
        If you only want to get a single tool by its internal name,
        use the [tool|#tool] function. Using `shelves.tool(name)` is
        _much_ faster that constructing this dictionary and then
        pulling a single tool out of it.

::`tool(tool_name)` -> [Hom:hou.Tool] or `None`:
    #cppname: HOM_shelves::tool
    
    Gets a reference to a [Hom:hou.Tool] by its internal name.
    
    {{{
    #!pycon
    >>> hou.shelves.tool("geometry_sphere")
    <hou.Tool 'geometry_sphere'>
    }}}

::`beginChangeBlock()`:
    #cppname: HOM_shelves::beginChangeBlock
    
    Prevents Houdini from automatically rewriting shelf information files until
    [endChangeBlock|#endChangeBlock] is called.
    
    Normally, many shelf editing functions and methods cause Houdini to rewrite
    the shelf definition files with the new information. If you're changing
    a lot of shelves/tools at once, it could be quite slow as each individual
    change is written separately.
    
    To speed up "batch" changes, call `beginChangeBlock()` first, then perform
    the edits, then call `endChangeBlock()`. This delays rewriting the shelf
    files until the end when all changes are written at once.
    
    {{{
    #!python
    # Change the icon of every tool to MISC_angry_fruit_salad.
    # DON'T ACTUALLY DO THIS!
    
    # First, turn off writing changes
    hou.shelves.beginChangeBlock()
    
    for shelf in hou.shelves.shelves().values():
        for tool in shelf.tools():
            tool.setIcon("MISC/angry_fruit_salad")
    
    # Finish the change block and write all the changes to disk
    hou.shelves.endChangeBlock()
    }}}
    
    Each call to `beginChangeBlock` must have a matching call to `endChangeBlock`
    or Houdini will never actually write your changes to disk.

::`endChangeBlock()`:
    #cppname: HOM_shelves::endChangeBlock
    
    See [beginChangeBlock|#beginChangeBlock] above.

