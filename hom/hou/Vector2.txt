= hou.Vector2 =
#type: homclass
#cppname: HOM_Vector2
#group: utility
"""A sequence of 2 floating point values, with associated mathematical
operations."""

A Vector2 might be used to represent a position in 2D space, a 2D
direction and length, or the size of a rectangle.  For example,
[Hom:hou.Node#position] returns a position and [Hom:hou.Node#size] returns
the size of a rectangle.

See also [Hom:hou.Vector3] and [Hom:hou.Vector4].

@methods
::`__init__(self, values=(0.0, 0.0))`:
    #cppname: HOM_Vector2::HOM_Vector2
    Return a new Vector2 from a sequence of floats.  If this method is called
    without parameters, the resulting vector contains the values (0.0, 0.0).

    Raises `InvalidSize` if `values` is not 2 elements long, or `TypeError`
    if `values` is not a sequence of floats or ints.

::`__getitem__(self, index)` -> `float`:
    #cppname: HOM_Vector2::__getitem__
    Return the float component at the specified index.  This method makes
    vectors behave as sequences (so you can, for example, use a for loop
    on the elements of a vector, convert a vector to a tuple of floats, etc.)
    and lets you use square brackets to index into a vector.

    {{{
    #!pycon
    >>> v = hou.Vector2((1.0, 2.0))
    >>> v[-1]
    2.0
    }}}

::`__setitem__(self, index, value)`:
    #cppname: HOM_Vector2::__setitem__
    This method lets you use square brackets to set a value on a vector.

    {{{
    #!pycon
    >>> v = hou.Vector2((1.5, 2.5))
    >>> v[0] = 0.5
    >>> print v
    [0.5, 2.5]
    }}}

::`setTo(self, sequence)`:
    #cppname: HOM_Vector2::setTo
    Set the contents of this vector to a sequence of floats.

    Raises `InvalidSize` if `values` is not 2 elements long, or `TypeError`
    if `values` is not a sequence of floats or ints.

::`__len__(self)` -> `int`:
    #cppname: HOM_Vector2::__len__
    Returns 2.  This method lets you call len() on a Vector2.

::`__add__(self, vector2)` -> [Hom:hou.Vector2]:
    #cppname: HOM_Vector2::__add__
    Add two vectors, returning a new vector with each component equal to the
    sum of the corresponding components in the two vectors.  This method lets
    you write `v1 + v2`, where `v1` and `v2` are Vector2 objects.

    This method is equivalent to
    `hou.Vector2(self[0] + vector2[0], self[1] + vector2[1])`.

::`__sub__(self, vector2)` -> [Hom:hou.Vector2]:
    #cppname: HOM_Vector2::__sub__
    Subtract a vector from another, returning a new vector with each component
    equal to the first vector's corresponding component minus the second
    vector's.  This method lets you write `v1 - v2`, where `v1` and `v2` are
    Vector2 objects.

    This method is equivalent to
    `hou.Vector2(self[0] - vector2[0], self[1] - vector2[1])`.

::`__neg__(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_Vector2::__neg__
    Return a vector whose components contain the negative values of this
    vector's components.  This method lets you write `-v`, where `v` is a
    Vector2 object.

    This method is equivalent to `hou.Vector2(-self[0], -self[1])`.

::`__mul__(self, scalar_or_matrix2)` -> [Hom:hou.Vector2]:
    #cppname: HOM_Vector2::__mul__
    Multiply a vector with a float scalar or with a [Hom:hou.Matrix2],
    returning a new vector.  This method lets you write `v * s` where `v` is a
    vector and `s` is a float, or `v * m` where `v` is a vector and `m` is a
    [Hom:hou.Matrix2].

    This method is equivalent to
    `hou.Vector2(self[0] * scalar, self[1] * scalar)`.

::`__rmul__(self, scalar)` -> [Hom:hou.Vector2]:
    #cppname: HOM_Vector2::__rmul__
    Multiply a vector with a float scalar, returning a new vector.  This method
    lets you write `s * v` where `v` is a vector and `s` is a float.

    This method is equivalent to
    `hou.Vector2(self[0] * scalar, self[1] * scalar)`.

::`__div__(self, scalar)` -> [Hom:hou.Vector2]:
    #cppname: HOM_Vector2::__div__
    Divide a vector by a float scalar, returning a new vector.  This method
    lets you write `v / s` where `v` is a vector and `s` is a float.

    This method is equivalent to
    `hou.Vector2(self[0] / scalar, self[1] / scalar)`.

::`length(self)` -> `float`:
    #cppname: HOM_Vector2::length
    Interpret this vector as a direction vector and return its length.
    The result is the same as `math.sqrt(self[0]**2 + self[1]**2)`.

::`lengthSquared(self)` -> `float`:
    #cppname: HOM_Vector2::lengthSquared
    Interpret this vector as a direction vector and return the square of its
    length.  The result is the same as `self[0]**2 + self[1]**2`.

::`normalized(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_Vector2::normalized
    Interpreting this vector as a direction, return a vector with the same
    direction but with a length of 1.

    If the vector's length is 0 (or close to it), the result is the original
    vector.

    For vector's with non-zero lengths, this method is equivalent to
    `self * (1.0/self.length())`.

::`distanceTo(self, vector2)` -> `float`:
    #cppname: HOM_Vector2::distanceTo
    Interpret this vector and the argument as 2D positions, and return the
    distance between them.  The return value is equivalent to
    `(self - vector2).length()`.

::`dot(self, vector2)` -> `float`:
    #cppname: HOM_Vector2::dot
    Return the dot product between this vector and the one in the parameter.

    See [Wikipedia's dot product page|Wp:Dot_product].

::`isAlmostEqual(self, vector2, tolerance=0.00001)` -> `bool`:
    #cppname: HOM_Vector2::isAlmostEqual
    Return whether this vector is equal to another, within a tolerance.
    Verifies that the difference between each component of this vector and the
    corresponding component of the other vector is within the tolerance.

::`x(self)` -> `float`:
    #cppname: HOM_Vector2::x
    Return the first component of the vector. Equivalent to v[0].

::`y(self)` -> `float`:
    #cppname: HOM_Vector2::y
    Return the second component of the vector. Equivalent to v[1].

