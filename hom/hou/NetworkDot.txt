= hou.NetworkDot =
#type: homclass
#cppname: HOM_NetworkDot
#superclass: hou.IndirectInput
#group: nodes

"""A small dot in a network that allows wires to be routed along specific
paths without affecting the data passing through them."""

Network dots are allowed to have a single input, but may have many outputs.
They can be moved around to force a wire connecting two nodes to follow a
specific path. They can also be used as "scaffolding" for a set of nodes
that you want to be able to quickly add or remove in a larger network.

New dots are created by calling [Hom:hou.Node#createNetworkDot] on the node
that will contain the dot. A list of all existing dots in a network can be
generated by calling [Hom:hou.Node#networkDots].

@methods

::`setPinned(self, pinned)`:
    #cppname: HOM_NetworkDot::setPinned
    Sets the boolean pinned state of this dot. Pinned dots are not functionally
    different from unpinned dots, but are treated differently by the network
    editor. A pinned dot remains even if its input and output connections are
    removed. An unpinned dot will be deleted automatically by the network
    editor if its input or last output is cut.

    The following code is a greatly simplified version of the code for
    automatically deleting unconnected dots, which will delete any dots
    that are not pinned and that don't have an input connection:
    {{{
    #!pycon
    >>> net = hou.node('/obj')
    >>> net.createNetworkDot().setPinned(False)
    >>> net.createNetworkDot().setPinned(True)
    >>> net.networkDots()
    (<hou.NetworkDot dot1 in /obj>, <hou.NetworkDot dot2 in /obj>)
    >>> for dot in net.networkDots():
    ...   if not dot.isPinned():
    ...     if dot.inputItem() is None:
    ...       dot.destroy()
    ...
    >>> net.networkDots()
    (<hou.NetworkDot dot2 in /obj>,)
    }}}

::`isPinned(self)` -> `bool`:
    #cppname: HOM_NetworkDot::isPinned
    Returns the pinned state of this dot. See [Hom:hou.NetworkDot#setPinned]
    for a more detailed discussion of the meaning of a pinned dot.
    
::`setInput(self, item_to_become_input, output_index=0)`:
    #cppname: HOM_NetworkDot::setInput
    Connects a network item to the input of this dot. This effectively
    rewires any nodes that are connected to the output of this dot.

    Raises [Hom:hou.InvalidInput] if `output_index` is invalid.  Raises
    [Hom:hou.OperationFailed] if `item_to_become_input` is not in the same
    network as this dot. Raises [Hom:hou.PermissionError] if the dot is
    inside a locked asset.

::`setInput(self, input_index, item_to_become_input, output_index=0)`:
    #cppname: HOM_NetworkDot::setInput
    Connects a network item to the input of this dot, exactly like the two
    parameter form of this function. But this second signature matches the
    signature of [Hom:hou.Node#setInput], which allows code to run on either
    a network dot or a node. The value of the input_index is ignored.

::`insertInput(self, input_index, item_to_become_input, output_index=0)`:
    #cppname: HOM_NetworkDot::insertInput
    Connects a network item to the input of this dot, exactly like the two
    parameter form of `setInput`. But this method name and signature matches
    the signature of [Hom:hou.Node#insertInput], which allows code to run on
    either a network dot or a node. The value of the input_index is ignored.

::`inputConnections(self)` -> tuple of [Hom:hou.NodeConnection]:
    #cppname: HOM_NetworkDot::inputConnections
    Returns a tuple of [Hom:hou.NodeConnection] objects for the connection
    coming into this dot. The tuple will have a length of one if anything is
    connected to the input of this dot. Returns an empty tuple if nothing is
    connected.

::`destroy(self)`:
    #cppname: HOM_NetworkDot::destroy
    Delete this dot. Connections in and out of the dot are automatically
    re-established such that the behavior of the network will be unchanged
    by the removal of this dot.

