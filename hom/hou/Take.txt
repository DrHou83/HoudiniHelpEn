= hou.Take =
#type: homclass
#cppname: HOM_Take
#group: takes

@methods

::`isCurrent(self)` -> `bool`:
    #cppname: HOM_Take::isCurrent
    Return True if the take is the current take and False otherwise.

::`name(self)`:
    #cppname: HOM_Take::name
    Return the name of the take.

::`setName(self, name)`:
    #cppname: HOM_Take::setName
    #replaces: Cmd:takename
    Rename the take.

::`addChildTake(self, name)` -> [Hom:hou.Take]:
    #cppname: HOM_Take::addChildTake
    #replaces: Cmd:takeadd
    Create a new take with the given name and add it as a child to this take.

    If no name is specified then the take will have a generated name based on
    the default take name.

::`addNodeDisplayFlag(self, node)`:
    #cppname: HOM_Take::addNodeDisplayFlag
    #replaces: Cmd:takeinclude
    Include the given node's display flag in this take making it editable in
    this take.

    This method does nothing if the node's display flag is already included in the take.

    Raise [Hom:hou.OperationFailed] if the `node` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`removeNodeDisplayFlag(self, node)`:
    #cppname: HOM_Take::addNodeDisplayFlag
    #replaces: Cmd:takeinclude
    Exclude the given node's display flag from this take making it uneditable
    in this take.

    This method does nothing if the node's display flag is not included in the take.

    Raise [Hom:hou.OperationFailed] if the `node` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`addNodeBypassFlag(self, node)`:
    #cppname: HOM_Take::addNodeBypassFlag
    #replaces: Cmd:takeinclude
    Include the given node's bypass flag in this take making it editable in
    this take.

    This method does nothing if the node's bypass flag is already included in the take.

    Raise [Hom:hou.OperationFailed] if the `node` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`removeNodeBypassFlag(self, node)`:
    #cppname: HOM_Take::addNodeBypassFlag
    #replaces: Cmd:takeinclude
    Exclude the given node's bypass flag from this take making it uneditable
    in this take.

    This method does nothing if the node's bypass flag is not included in the take.

    Raise [Hom:hou.OperationFailed] if the `node` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`addNodeRenderFlag(self, node)`:
    #cppname: HOM_Take::addNodeRenderFlag
    #replaces: Cmd:takeinclude
    Include the given node's render flag in this take making it editable in
    this take.

    This method does nothing if the node's render flag is already included in the take.

    Raise [Hom:hou.OperationFailed] if the `node` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`removeNodeRenderFlag(self, node)`:
    #cppname: HOM_Take::addNodeRenderFlag
    #replaces: Cmd:takeinclude
    Exclude the given node's render flag from this take making it uneditable
    in this take.

    This method does nothing if the node's render flag is not included in the take.

    Raise [Hom:hou.OperationFailed] if the `node` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`parmTuples(self)` -> tuple of [Hom:hou.ParmTuple]:
    #cppname: HOM_Take::parmTuples
    #replaces: Cmd:takels
    Return a tuple of node parameters that are included and editable in this take.

::`hasParmTuple(self, parm_tuple)` -> `bool`:
    #cppname: HOM_Take::hasParmTuple
    #replaces: Cmd:takels
    Return True if the given parameter is included in this take and False otherwise.

    Raise [Hom:hou.OperationFailed] if the `parm_tuple` argument is None.

::`addParmTuple(self, parm_tuple)`:
    #cppname: HOM_Take::addParmTuple
    #replaces: Cmd:takeinclude
    Include the given parameter in this take making it editable in this take.

    This method does nothing if the parameter is already included in this take.

    Raise [Hom:hou.OperationFailed] if the `parm_tuple` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`removeParmTuple(self, parm_tuple)`:
    #cppname: HOM_Take::removeParmTuple
    #replaces: Cmd:takeinclude
    Exclude the given parameter from this take making it uneditable in this take.

    This method does nothing if the parameter is not included in this take.

    Raise [Hom:hou.OperationFailed] if the `parm_tuple` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`addParmTuplesFromTake(self, take, overwrite_existing=True)`:
    #cppname: HOM_Take::addParmTuplesFromTake
    #replaces: Cmd:takeinclude, Cmd:takemerge
    Include all the given take's parameters in this take making the parameters
    editable in this take.

    If `overwrite_existing` is True then parameters that are already included
    in this take will have their values overwritten by the same parameters
    found in the other take.  Otherwise, parameters already included in this
    take will not be affected by the same parameters found in the other take.

    Raise [Hom:hou.OperationFailed] if the `take` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`addParmTuplesFromNode(self, node)`:
    #cppname: HOM_Take::addParmTuplesOfNode
    #replaces: Cmd:takeinclude
    Include all the given node's parameters in this take making them editable
    in this take.

    Raise [Hom:hou.OperationFailed] if the `node` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`removeParmTuplesFromNode(self, node)`:
    #cppname: HOM_Take::removeParmTuplesFromNode
    #replaces: Cmd:takeinclude
    Exclude all the given node's parameters from this take making them uneditable
    in this take.

    Raise [Hom:hou.OperationFailed] if the `node` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is not the current take.

::`children(self)` -> tuple of [Hom:hou.Take]:
    #cppname: HOM_Take::children
    #replaces: Cmd:takels
    Return a tuple of the child takes.

::`destroy(self, recurse=False)`:
    #cppname: HOM_Take::destroy
    #replaces: Cmd:takerm
    Deletes the take.

    If `recurse` is True then all child and descendent takes will be deleted as well. 

::`parent(self)` -> [Hom:hou.Take]:
    #cppname: HOM_Take::parent
    Return the parent take or None if this take is the main (master) take.

::`path(self)` -> `str`:
    #cppname: HOM_Take::path
    Return the path of the take.  The take path consists of the name of this
    take as well as the names of its ancestor takes.

::`insertTakeAbove(self, name)` -> [Hom:hou.Take]:
    #cppname: HOM_Take::insertTakeAbove
    #replaces: Cmd:takeadd
    Create a new take with the given name and add it as a child of this take's parent.
    This take is reparented with the newly created take as the parent.

    Raise [Hom:hou.OperationFailed] if this take is the main (master) take.

::`moveUnderTake(self, take)`:
    #cppname: HOM_Take::moveUnderTake
    #replaces: Cmd:takemove
    Reparent this take to the specified take.

    Raise [Hom:hou.OperationFailed] if the `take` argument is None.
    Raise [Hom:hou.OperationFailed] if this take is the main (master) take.

::`saveToFile(self, filename, recurse=False)`:
    #cppname: HOM_Take::saveToFile
    #replaces: Cmd:takesave
    Save this take to a file on disk.

    If `recurse` is True then any child and descendent takes will also be saved
    to the file.

    Note that the saved file can only be loaded within the same .hip file session.
    If Houdini is restarted or if the .hip file is closed and re-opened then
    the saved file will fail to load.

    Raise [Hom:hou.OperationFailed] if the `filename` argument does not point
    to a valid location on disk.

::`loadChildTakeFromFile(self, filename)` -> tuple of [Hom:hou.Take]:
    #cppname: HOM_Take::loadChildTakeFromFile
    #replaces: Cmd:takeload
    Load a take from a file that is saved to disk and make it a child of this
    take.  This will also load any child and descendent takes that are saved in
    the file.

    Return a tuple of takes that have been loaded from the file.  The first
    take in the tuple is the direct child take of this take.  All takes that
    follow are the children and descendents of the first take.

    Loaded takes will be renamed if there already exists takes with the same names.

    Note that you can only load files that have been saved from the same .hip
    file session.  If Houdini is restarted or if the .hip file is closed and
    re-opened after the save then the file will fail to load.

    Raise [Hom:hou.OperationFailed] if the `filename` argument does not point
    to a valid file on disk.

::`asCode(self)`:
    #cppname: HOM_Take::asCode
    #replaces: Cmd:takescript
    #status: ni

::`asXML(self)`:
    #cppname: HOM_Take::asXML
    #replaces: Cmd:takescript
    #status: ni

::`memoryUsageInBytes(self)`:
    #cppname: HOM_Take::memoryUsageInBytes
    #replaces: Cmd:takels
    #status: ni

@related

- [Hom:hou.takes]



