= hou.PerfMonEvent =
#type: homclass
#cppname: HOM_PerfMonEvent
#group: performance

"""Represents an event that is recorded by the performance monitor and used to generate time and memory growth statistics for profiles."""

Note that all methods in this class may raise an [Hom:hou.OperationFailed] exception if the event was not actually recorded in the Performance Monitor.  This can happen if [Hom:hou.perfMon#startEvent] or [Hom:hou.perfMon#startCookEvent] was called when the Performance Monitor was not recording.

NOTE:
    The stopTime(), memory() and time() methods have been removed.  Memory and
    time values are now returned by the stop() method.

@methods

::`id(self)` -> `int`:
    #cppname: HOM_PerfMonEvent::id

    Return the event's unique identifier which is used internally by the performance monitor.

    This method is deprecated.

::`isAutoNestEnabled(self)` -> `bool`:
    #cppname: HOM_PerfMonEvent::isAutoNestEnabled

    Return True if the event will automatically 'nest' other events that are started and stopped while this event is running.  When the event is stopped, it will decrement the times and memory of its nested events from its total time and memory.  That way, the event's total time and memory will reflect the work performed in the event itself and not in any of its nested events.

::`isRunning(self)` -> `bool`:
    #cppname: HOM_PerfMonEvent::isRunning

    Return true if the event is running, that is, if the event has
    been started but not stopped.

::`isTiming(self)` -> `bool`:
    #cppname: HOM_PerfMonEvent::isTiming

    This method is deprecated in favor of `isRunning`.

::`name(self)` -> `str`:
    #cppname: HOM_PerfMonEvent::name

    Return the event name.

    This method is deprecated.

::`object(self)` -> `str`:
    #cppname: HOM_PerfMonEvent::object

    Return the object that the event applies to.  Return None if the event is not associated with an object.

::`startTime(self)` -> `float`:
    #cppname: HOM_PerfMonEvent::startTime
    
    Return the start time of the event in milliseconds since the epoch date.

    Raises [Hom:hou.OperationFailed] if the event does not contain any time data.  This can happen if the event was started when the Performance Monitor was not recording any time statistics.

::`stop(self)`:
    #cppname: HOM_PerfMonEvent::stop

    Stop the event timer and return a 2-tuple, (<time>, <memory>), containing
    the event's elapsed time and memory growth.
    
    The elapsed time is the number of milliseconds that the event was timing
    for.  The memory growth is the increase in memory usage by Houdini (in
    bytes) from when the event started and when it stopped.
    
    If the event was not recording memory, then the returned memory value is
    0.0.  Likewise, if the event was not recording time, then the returned time
    value is 0.0.

    Raises [Hom:hou.OperationFailed] if the event is already stopped.

@related

    - [Hom:hou.perfMon]
    - [Hom:hou.PerfMonProfile]
    - [Hom:hou.PerfMonRecordOptions]
    - [Performance monitor pane|/ref/panes/perfmon]



