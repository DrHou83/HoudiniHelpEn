= hou.node =
#type: homfunction
#cppname: hom::node
#group: nodes

"""Given a path string, return a Node object.  Return None if the path does not
refer to a node."""

:usage: `node(path)` -> [Hom:hou.Node] or `None`

If the path starts with a `/`, Houdini will look for a node with that exact
path.  Otherwise, the Houdini searches relative to the current path.
See [Hom:hou.pwd] for more information about Houdini's current path.  For each
occurrence of `..` in the path, Houdini will move up one node from the current
location.

Raises [Hom:hou.NotAvailable] if you call it from MPlay.

Be careful not to confuse this function with the class [Hom:hou.Node].

{{{
#!pycon
>>> hou.node("/obj")
<hou.Node at /obj>
>>> hou.node("/obj").createNode("geo")
<hou.ObjNode of type geo at /obj/geo1>
>>> hou.node("/obj").createNode("geo")
<hou.ObjNode of type geo at /obj/geo2>
>>> hou.node("/obj/geo1")
<hou.ObjNode of type geo at /obj/geo1>
>>> hou.cd("/obj")
>>> hou.node("geo1")
<hou.ObjNode of type geo at /obj/geo1>
>>> hou.cd("/obj/geo2")
>>> hou.node("../geo1")
<hou.ObjNode of type geo at /obj/geo1>
>>> print hou.node("../geo3")
None
}}}

@related
- [Hom:hou.item]
- [Hom:hou.items]
- [Hom:hou.nodes]
- [Hom:hou.pwd]
- [Hom:hou.parent]
- [Hom:hou.root]

@replaces
- [Cmd:opfind]
- [Exp:ch]
- [Exp:chs]
- [Exp:chsop]
- [Exp:opexist]

