= hou.Color =
#type: homclass
#cppname: HOM_Color
#group: utility

"""Represents a color value."""

You can get and set the internal values using different color representations such as RGB and L*a*b*.

Note that the constructor takes a single _tuple_ of RGB values, not three arguments. So, for example, to create red you would say:

{{{
#!python
red = hou.Color((1.0, 0, 0))
}}}

You can set the color in one color space and get the color in a different color space to convert between spaces.

See [HSL and HSV|Wp:HSL_and_HSV], [Lab color space|Wp:Lab color space], [CIE 1931 color space|Wp:CIE 1931 color space], and [Color temperature|Wp:Color_temperature] for an introduction to the concepts the methods are based on.

@methods

::`__init__(self, rgb_tuple=(0.0, 0.0, 0.0))` -> `Color`:
    #cppname: HOM_Color::HOM_Color
    
    Creates a color object, optionally from RGB values.
    
    To construct a color using a different representation, first create the object and then use a `set` method:
    
    {{{
    #!python
    c = hou.Color()
    c.setHSV(180, 0.5, 1.0)
    }}}

::`rgb(self)` -> `(float, float, float)`:
    #cppname: HOM_Color::rgb
    
    Returns the color as a tuple of `(red, green, blue)` floating point values, where each value is in the range 0.0 to 1.0.

::`setRGB(self, tuple)`:
    #cppname: HOM_Color::setRGB
    
    Sets the color using a tuple of `(red, green, blue)` floating point values. See the [rgb()|#rgb] method.

::`hsv(self)` -> `(float, float, float)`:
    #cppname: HOM_Color::hsv
    
    Returns the color as a tuple of `(hue, saturation, value)`, where hue is 0 - 360, and saturation and value are 0.0 - 1.0.

::`setHSV(self, tuple)`:
    #cppname: HOM_Color::setHSV
    
    Sets the color as a tuple of `(hue, saturation, value)`. See the [hsv()|#hsv] method.

::`hsl(self)` -> `(float, float, float)`:
    #cppname: HOM_Color::hsl
    
    Returns the color as a tuple of `(hue, saturation, lightness)`, where hue is 0 - 360, and saturation and lightness are 0.0 - 1.0.

::`setHSL(self, tuple)`:
    #cppname: HOM_Color::setHSL
    
    Sets the color as a tuple of `(hue, saturation, lightness)`. See the [hsl()|#hsl] method. 

::`lab(self)` -> `(float, float, float)`:
    #cppname: HOM_Color::lab
    
    Returns the color as a tuple of `(L, a, b)` as defined in the L*a*b* model, where `L` is 0 - 100, and `a` and `b` are unbound. (Note that `a` and `b` are restricted to -128 - 127 in TIFF files).

::`setLAB(self, tuple)`:
    #cppname: HOM_Color::setLAB
    
    Sets the color as a tuple of `(L, a, b)` as defined in the L*a*b* model. See the [lab()|#lab] method.

::`tmi(self)` -> `(float, float, float)`:
    #cppname: HOM_Color::tmi
    
    Returns the color as a tuple of `(temperature, magenta, intensity)`, where each component is -1.0 to 1.0.

::`setTMI(self, tuple)`:
    #cppname: HOM_Color::setTMI
    
    Sets the color as a tuple of `(temperature, magenta, intensity)`. See the [tmi()|#tmi] method.

::`xyz(self)` -> `(float, float, float)`:
    #cppname: HOM_Color::xyz
    
    Returns the color as a tuple of `(x, y, z)` "tristimulus" values, where each component is 0.0 to 1.0 (but may go out of bounds from conversion).

::`setXYZ(self, tuple)`:
    #cppname: HOM_Color::setXYZ
    
    Sets the color as a tuple of `(x, y, z)` "tristimulus" values. See the [xyz()|#xyz] method.

::`ocio_spaces()`:
    #cppname: HOM_Color::ocio_spaces

    Returns a list of the color spaces defined in the Open Color IO configuration in Houdini.

@replaces

- [Exp:rgb]
