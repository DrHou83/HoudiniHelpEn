= hou.PointGroup =
#type: homclass
#cppname: HOM_PointGroup
#group: geo

"""A named group of points inside a Geometry object."""

Point groups reside inside the geometry, and each point group has a unique name.

Groups are either ordered or unordered.  When asking for the contents of an
ordered group, the results will be returned in the order they were added to
to the group.  For an unordered group, the results will be returned in an
arbitrary order (though it is normally arranged by increasing point number).
When creating a group using the group SOP, use the <<Create Ordered>> checkbox
to create an ordered group.  When creating one from Python, Use the
`is_ordered` parameter of [Hom:hou.Geometry#createPointGroup] to control
whether a group is ordered.

See [Hom:hou.Point] for more information about points.  See also
[Hom:hou.PrimGroup].

@methods

::`name(self)`:
    #cppname: HOM_PointGroup::name
    Return the name of the group.  Each point group has a unique name.

::`geometry(self)` -> [Hom:hou.Geometry]:
    #cppname: HOM_PointGroup::geometry
    Return the geometry object containing this group.

::`points(self)` -> `tuple` of [Hom:hou.Point]:
    #cppname: HOM_PointGroup::points
    Return the contents of this group.

::`contains(self, point)` -> `bool`:
    #cppname: HOM_PointGroup::contains
    Return whether or not a point is in this group.

    Raises [Hom:hou.OperationFailed] if the point belongs to a different
    geometry object than this group.

::`add(self, point_or_list_or_point_group)`:
    #cppname: HOM_PointGroup::add
    If given a [Hom:hou.Point] or a list of [Hom:hou.Point]'s, add the point(s)
    to the group.  If given a [Hom:hou.PointGroup], merge the contents of the
    other point group with this group (the other group is unaffected).  You
    would typically call this method from the code of a Python-defined SOP.

    It is ok to add points to the group that were already in the group.

    Raises [Hom:hou.GeometryPermissionError] if this geometry is not modifiable.

    Raises [Hom:hou.OperationFailed] if the point or point group belong to a
    different geometry object than this group.

::`remove(self, point_or_list_or_point_group)`:
    #cppname: HOM_PointGroup::remove
    If given a [Hom:hou.Point] or a list of [Hom:hou.Point]'s, remove the point
    from the group.  If given a [Hom:hou.PointGroup], remove all points in the
    other group from this group (the other group is unaffected).  You would
    typically call this method from the code of a Python-defined SOP.

    It is not an error to try to remove a point from the group that wasn't
    already in the group.

    Raises [Hom:hou.GeometryPermissionError] if this geometry is not modifiable.

    Raises [Hom:hou.OperationFailed] if the point belongs to a different
    geometry object than this group.

::`clear(self)`:
    #cppname: HOM_PointGroup::clear
    Remove all points from this group.  You would typically call this method
    from the code of a Python-defined SOP.
    
    The points remain in the geometry; only the group is affected.

    Raises [Hom:hou.GeometryPermissionError] if this geometry is not modifiable.

::`destroy(self)`:
    #cppname: HOM_PointGroup::destroy
    Remove this group from the geometry.  You would typically call this method
    from the code of a Python-defined SOP.
    
    Raises [Hom:hou.GeometryPermissionError] if this geometry is not modifiable.

::`options(self)` -> `dict` of `str` to `bool`, `int`, `float`, `str`:
    #cppname: HOM_PointGroup::options
    Return a dictionary containing the extra options attached to this
    point group.

    Note that the contents of this dictionary are saved to geometry files.

    See also [Hom:hou.PointGroup#option], [Hom:hou.PointGroup#setOption] and
    [Hom:hou.PointGroup#removeOption].

::`option(self, name)` -> `bool`, `int`, `float`, `str`, [Hom:hou.Vector2], [Hom.hou.Vector3], [Hom:hou.Vector4], [Hom:hou.Quaternion], [Hom:hou.Matrix3], [Hom:hou.Matrix4], tuple of `int`, or tuple of `float`
    #cppname: HOM_PointGroup::options
    Return the value of an individual option, on `None` if no such option
    exists.

    See also [Hom:hou.PointGroup#options], [Hom:hou.PointGroup#setOption] and
    [Hom:hou.PointGroup#removeOption].

::`optionType(self, name)` -> [Hom:hou.fieldType] enum value:
    #cppname: HOM_PointGroup::optionType
    Return a [Hom:hou.fieldType] enumerated value that describes the type
    of data stored in an option.  Returns `hou.fieldType.NoSuchField` if
    no field exists with that name.

::`setOption(self, name, value, type_hint = hou.fieldType::NoSuchField)`:
    #cppname: HOM_PointGroup::setOption
    Set an entry in the dictionary of options.  See
    [Hom:hou.PointGroup#options] for more information.

    name:
        The name of the option to set.

    value:
        An integer, float, string, [Hom:hou.Vector2], [Hom:hou.Vector3],
        [Hom:hou.Vector4], [Hom:hou.Quaternion], [Hom:hou.Matrix3],
        [Hom:hou.matrix4], or sequence of numbers.

    type_hint:
        Used to determine the exact [Hom:hou.fieldType] desired when the
        specified value type is not enough to unambiguously determine it.

::`removeOption(self, name)`:
    #cppname: HOM_PointGroup::removeOption
    Remove an entry in the dictionary of options.  See
    [Hom:hou.PointGroup#options] for more information.

    Raises [Hom:hou.OperationFailed] if there is no entry in the dictionary
    with this name.

@replaces

- [Exp:haspoint]
- [Exp:pointlist]

