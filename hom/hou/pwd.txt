= hou.pwd =
#type: homfunction
#cppname: hom::pwd
#group: nodes

"""If called from an evaluating parm, return the node containing the parm.
Otherwise, return Houdini's global current node.  You can change this current
node with `hou.cd`"""

:usage: `pwd()` -> [Hom:hou.Node]

This function is a shortcut for writing `hou.node(".")`.

Note that Python and hscript both share the same global current node.  So,
if you change that node in hscript, the return value of pwd() will reflect
that change, and vice versa.

Note that if this function is called from an expression inside a node's
parameter, Houdini will return the node containing the expression, not
Houdini's current node.  This behavior permits relative parameter and
node references from both Hscript and Python parameter expressions, since
functions like [Hom:hou.ch], [Exp:ch], [Hom:hou.evalParm], [Hom:hou.parm_],
and [Hom:hou.node_] are relative to the result of `hou.pwd()`.

This function will raise hou.NotAvailable if you call it from MPlay.

@related
- [Hom:hou.cd]
- [Hom:hou.parent]

@replaces
- [Cmd:oppwf]
- [Exp:oppwf]
- [Exp:oppwd]
- [Exp:opfullpath]

