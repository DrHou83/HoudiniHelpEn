= hou.BoundingBox =
#type: homclass
#cppname: HOM_BoundingBox
#group: utility

"""An axis-aligned 3D rectangular region."""

For example, a bounding box might describe a piece of geometry's minimum and
maximum values on each of the coordinate axes.  See
[Hom:hou.Geometry#boundingBox] for an example of a function that returns
a bounding box.

@methods

::`__init__(self, xmin=0.0, ymin=0.0, zmin=0.0, xmax=0.0, ymax=0.0, zmax=0.0)`:
    #cppname: HOM_BoundingBox::HOM_BoundingBox
    Construct a new bounding box with the specified minimum and maximum
    bounds.  Use [Hom:hou.BoundingBox#setTo] to change the position of an
    existing bounding box.

::`setTo(self, bounds_sequence)`:
    #cppname: HOM_BoundingBox::setTo
    Given a sequence of (xmin, ymin, zmin, xmax, ymax, zmax) values, set the
    position of the bounding box.

    Raises [Hom:hou.InvalidSize] if the tuple does not contain six elements.

::`minvec(self)` -> [Hom:hou.Vector3]:
    #cppname: HOM_BoundingBox::minvec
    Return a vector describing the corner of the box with the smallest `x`,
    `y`, and `z` values.

::`maxvec(self)` -> [Hom:hou.Vector3]:
    #cppname: HOM_BoundingBox::maxvec
    Return a vector describing the corner of the box with the largest `x`,
    `y`, and `z` values.

::`sizevec(self)` -> [Hom:hou.Vector3]:
    #cppname: HOM_BoundingBox::sizevec
    Return a vector describing the size of the box in each of the `x`, `y`,
    and `z` axes.

    This method can be implemented as follows:
    {{{
    #!python
    def sizevec(self):
	return self.maxvec() - self.minvec()
    }}}

::`center(self)` -> [Hom:hou.Vector3]:
    #cppname: HOM_BoundingBox::center
    Return the position of the center of the bounding box.

    This method can be implemented as follows:
    {{{
    #!python
    def sizevec(self):
	return (self.minvec() + self.maxvec()) * 0.5
    }}}

::`enlargeToContain(self, point_or_bbox)`:
    #cppname: HOM_BoundingBox::enlargeToContain
    Enlarge the bounding box to contain the given element.  The element
    may be a sequence of 3 floats (such as a [Hom:hou.Vector3]) describing a
    position or another bounding box.  If this box does not need to grow
    because it already completely contains the element, it won't be modified.

::`contains(self, point)`:
    #cppname: HOM_BoundingBox::contains
    Given a sequence of 3 floats (such as a [Hom:hou.Vector3]) describing a
    position, return whether the position is inside the box.

::`isAlmostEqual(self, bbox, tolerance=0.00001)` -> `bool`:
    #cppname: HOM_BoundingBox::isAlmostEqual
    Returns whether this bounding box is equal to another, subject
    to numerical tolerances.

::`isValid(self)` -> `bool`:
    #cppname: HOM_BoundingBox::isValid
    Returns whether this bounding box is valid.

::`__mul__(self, matrix4)` -> `BoundingBox`:
    #cppname: HOM_BoundingBox::__mul__
    Take this bounding box, transform it by the given matrix, compute the
    axis-aligned bounding box around this transformed box, and return it.

