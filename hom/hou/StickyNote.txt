= hou.StickyNote =
#type: homclass
#cppname: HOM_StickyNote
#superclass: hou.NetworkMovableItem
#group: organize

"""Represents a sticky note."""

To create a sticky note, use the [Hom:hou.Node#createStickyNote] method on
the node inside which you want to create the note. To get an existing
sticky note, use the [Hom:hou.Node#findStickyNote] method on the node
containing the sticky note. To get a list of all notes in a network,
use the [Hom:hou.Node#stickyNotes] method on the containing node.

@methods

::`asCode(self, brief=False, recurse=False, save_box_contents=False, save_channels_only=False, save_creation_commands=False, save_keys_in_frames=False, save_parm_values_only=False, save_spare_parms=False, function_name=None)` -> `str`:
    #cppname: HOM_StickyNote::asCode

    Prints the Python code necessary to recreate a sticky note.

    See [Hom:hou.Node#asCode] for information on the keyword arguments.

::`destroy(self)`:
    #cppname: HOM_StickyNote::destroy

    Remove and delete the sticky note.

::`drawBackground(self)` -> `bool`:
    #cppname: HOM_StickyNote::drawBackground

    Returns whether the sticky note will draw a colored background and title
    bar.

::`isMinimized(self)` -> `bool`:
    #cppname: HOM_StickyNote::isMinimized

    Returns whether the sticky note is minimized.

::`minimizedSize(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_StickyNote::minimizedSize

    Return the size of this item's tile in the network editor graph if it is
    minimized. Returned as a `Vector2`.

::`resize(self, vector2)`:
    #cppname: HOM_StickyNote::resize

    Resizes a sticky note by the increments in the given [Hom:hou.Vector2].
    Use `setSize()` to set the note's absolute size.

::`restoredSize(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_StickyNote::restoredSize

    Return the size of this item's tile in the network editor graph if it is
    not minimized. Returned as a `Vector2`.

::`setBounds(self, bounds)`:
    #cppname: HOM_NetworkBox::setBounds

    Sets the size and position of this sticky note to the given
    [Hom:hou.BoundingRect] `bounds` argument. Equivalent to calling `setSize`
    then `setPosition`.

::`setMinimized(self, on)`:
    #cppname: HOM_StickyNote::setMinimized

    Minimizes or restores the sticky note.

::`setDrawBackground(self, on)`:
    #cppname: HOM_StickyNote::setDrawBackground

    Turns on or off the drawing of the colored background for the text and the
    title bar in the network editor. Turning this on makes the sticky note
    easier to see. Turning it off allows the text to be less obtrusive.

::`setSize(self, size)`:
    #cppname: HOM_StickyNote::setSize

    Sets the size of this sticky note to the given [Hom:hou.Vector2]
    `size` parameter. Use `resize()` to set the note's size relative to
    its current size.

::`setText(self, str)`:
    #cppname: HOM_StickyNote::setText

    Sets the text of the sticky note.

::`setTextColor(self, color)`:
    #cppname: HOM_StickyNote::setTextColor

    Sets the color of the text of the sticky note. The `color` parameter
    should be a [Hom:hou.Color] object.

::`setTextSize(self, size)`:
    #cppname: HOM_StickyNote::setTextSize

    Sets the size of the text of the sticky note. The `size` value specifies
    the height (in network units) of the font.

::`text(self)` -> `str`:
    #cppname: HOM_StickyNote::text

    Return the text displayed in the sticky note.

::`textColor(self)` -> [Hom:hou.Color]:
    #cppname: HOM_StickyNote::textColor

    Return the color of the text displayed in the sticky note.

::`textSize(self)` -> `float`:
    #cppname: HOM_StickyNote::textSize

    Return the size of the text displayed in the sticky note, expressed as the
    height of the font in network units.

