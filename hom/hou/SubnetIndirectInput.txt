= hou.SubnetIndirectInput =
#type: homclass
#cppname: HOM_SubnetIndirectInput
#superclass: hou.IndirectInput
#group: nodes

"""A node-like item that appears inside subnets and corresponds to the
node wired into the subnet."""

For example, suppose you have a font SOP, polyextrude SOP, and facet SOP
connected together in a chain.  If you collapse the polyextrude and facet
SOPs into a subnet, you're left with a font SOP connected to a subnet SOP.
Inside the subnet SOP is subnet indirect input #1 connected to a polyextrude
SOP, which is connected to the facet SOP.

Each subnet indirect input is numbered starting from 1 and corresponds to
an input connector on the subnet.  (See [Hom:hou.NodeConnection] for more
information on input connectors.)

The names of the subnet indirect inputs in the network pane correspond to
the contents of the `Input #n Label` parameters on the subnet node, where
`n` is the number.

@methods

::`number(self)` -> `int`:
    #cppname: HOM_SubnetIndirectInput::number
    Return the number of the corresponding input connector on the subnet.
    Note that the first input corresponds to the number 1, not 0.

::`input(self)` -> [Hom:hou.Node]:
    #cppname: HOM_SubnetIndirectInput::input
    Return the node connected to the parent subnet node at the input
    corresponding to this object. This node can be found indirectly using the
    `parent()` object, and `number()` method on this object, but this
    single method is much more convenient. Return `None` if no node is
    connected.

::`inputConnections(self)` -> tuple of [Hom:hou.NodeConnection]:
    #cppname: HOM_SubnetIndirectInput::inputConnections
    Returns an empty tuple. This method exists to mirror similar methods on
    [Hom:hou.Node] and [Hom:hou.NetworkDot]. This allows these network items
    to be treated in a more uniform way in Python code.

