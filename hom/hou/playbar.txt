= hou.playbar =
#type: hommodule
#cppname: HOM_playbar
#group: playbar

"""The animation playbar module."""

@functions

::`addEventCallback(self, callback)`:
    #cppname: HOM_playbar::addEventCallback
    Register a Python callback to be called whenever a playbar event occurs (i.e. frame change, playback stopped).

    callback:
	Any callable Python object that expects two arguments.  The first argument is a [Hom:hou.playbarEvent] enum value and the second argument is a float storing the frame number of when the event took place.

    {{{
    #!python
    def outputPlaybarEvent(event_type, frame):
	print "Playbar event", event_type, "at frame", frame

    hou.playbar.addEventCallback(outputPlaybarEvent)
    }}}


::`areKeysShown(self)` -> `bool`:
    #cppname: HOM_playbar::areKeysShown
    #replaces: Cmd:fplayback
    Return True if the display of keyframes in the playbar is turned on.  Return False otherwise.

::`areTicksShown(self)` -> `bool`:
    #cppname: HOM_playbar::areTicksShown
    #replaces: Cmd:fplayback
    Return True if the display of frame ticks in the playbar is turned on.  Return False otherwise.

::`clearEventCallbacks()`:
    #cppname: HOM_playbar::clearEventCallbacks
    Remove all Python callbacks that have been registered with
    [Hom:hou.playbar#addEventCallback].

::`eventCallbacks()` -> `tuple` of callback:
    #cppname: HOM_playbar::eventCallbacks
    Return a tuple of all the Python callbacks that have been registered with
    [Hom:hou.playbar#addEventCallback].

::`frameIncrement(self)` -> `float`:
    #cppname: HOM_playbar::frameIncrement
    #replaces: Cmd:fplayback
    Return the frame increment step size.

::`frameRange(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_playbar::frameRange
    #replaces: Cmd:frange
    Return a 2-tuple containing the start and end frame of the global time range.

::`isAudioShown(self)` -> `bool`:
    #cppname: HOM_playbar::isAudioShown
    #replaces: Cmd:fplayback
    Return True if the display of audio in the playbar is turned on.  Return False otherwise.

::`isRangeSliderShown(self)` -> `bool`:
    #cppname: HOM_playbar::isRangeSliderShown
    #replaces: Cmd:fplayback
    Return True if the display of the range slider in the playbar is turned on.  Return False otherwise.

::`isPlaying(self)` -> `bool`:
    #cppname: HOM_playbar::isPlaying
    Return True if the playbar is playing.  Return False otherwise.

::`isRangeRestricted(self)` -> `bool`:
    #cppname: HOM_playbar::isRangeRestricted
    #replaces: Cmd:fplayback
    Return true if playback is restricted to within the playbar's start frame and end frame.

::`isRealTime(self)` -> `bool`:
    #cppname: HOM_playbar::isRealTime
    #replaces: Cmd:fplayback
    Return True if realtime playback is turned on.  Return False otherwise.

::`isRealTimeSkipping(self)` -> `bool`:
    #cppname: HOM_playbar::isRealTimeSkipping
    #replaces: Cmd:fplayback
    Return True if realtime playback skipping is turned on.  Return False otherwise.

::`jumpToNextKeyframe(self)`
    #cppname: HOM_playbar::jumptoNextKeyframe
    Sets the frame to the time of the next scoped keyframe.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`jumpToPreviousKeyframe(self)`
    #cppname: HOM_playbar::jumptoPreviousKeyframe
    Sets the frame to the time of the previous scoped keyframe.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`moveToBottom(self)`:
    #cppname: HOM_playbar::moveToBottom
    #replaces: Cmd:pane
    Move the playbar to the bottom of the desktop.

    Raises [Hom:hou.NotAvailable] if the user interface is not available.

::`moveToPane(self, pane)`:
    #cppname: HOM_playbar::moveToPane
    #replaces: Cmd:pane
    Move the playbar to the bottom of the specified pane.

    Raises [Hom:hou.ObjectWasDeleted] if `pane` does not point to a valid pane.
    Raises [Hom:hou.NotAvailable] if the user interface is not available.

::`play(self)`:
    #cppname: HOM_playbar::play
    #replaces: Cmd:play
    Play in the forward direction.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`playbackRange(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_playbar::playbackRange
    #replaces: Cmd:frange
    Return a 2-tuple containing the start and end frame of the playback range.

::`playMode(self)` -> [Hom:hou.playMode]:
    #cppname: HOM_playbar::playMode
    #replaces: Cmd:play
    Return the playbar's play mode.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`realTimeFactor(self)` -> `float`:
    #cppname: HOM_playbar::realTimeFactor
    #replaces: Cmd:fplayback
    Return the multiplier factor used when playing with realtime playback turned on.

::`removeEventCallback(callback)`:
    #cppname: HOM_playbar::removeEventCallback
    Remove a Python callback that was previously registered with
    [Hom:hou.playbar#addEventCallback].  See [Hom:hou.playbar#addEventCallback]
    for more information.

    Raises [Hom:hou.OperationFailed] if the callback was not previously
    registered.

::`reverse(self)`:
    #cppname: HOM_playbar::reverse
    #replaces: Cmd:play
    Play in the reverse direction.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`selectedKeyframes(self)` -> dictionary of ([hou.Parm], tuple of [Hom:hou.BaseKeyframe]) pairs:
    #cppname: HOM_ChannelGraph::selectedKeyframes
    Returns a dictionary of (hou.Parm, keyframes) which are currently selected
    in the playbar.
    TIP: Here is an example of how to scale the selected key values by 2:
    {{{
    #!python
    keyframes = hou.playbar.selectedKeyframes()
    for parm in keyframes.keys():
	for key in keyframes[parm]:
	    key.setValue(2 * key.value())
	    parm.setKeyframe(key)
    }}}

::`selectionRange(self)` -> [Hom:hou.Vector2] or None:
    #cppname: HOM_playbar::selectionRange
    This function exists for backwards compatibility.

    Returns a 2-tuple containing the start and end frame of the selection range.
    If there are multiple selections, the returned 2-tuple contains the start and end frame of the selection that occurs first on the playbar. 
    If there is no selection, then None is returned.

::`selectionRanges(self)` -> tuple of [Hom:hou.Vector2]:
    #cppname: HOM_playbar::selectionRanges
    Returns a list of 2-tuples containing the start and end frame of each selection range.

::`setFrameIncrement(self, increment)`:
    #cppname: HOM_playbar::setFrameIncrement
    #replaces: Cmd:fplayback
    Set the frame increment step size.  This value is ignored when playing with realtime playback turned on.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`setFrameRange(self, start, end)`:
    #cppname: HOM_playbar::setFrameRange
    #replaces: Cmd:tset
    Set the global time range using frame numbers.

::`setPlaybackRange(self, start, end)`:
    #cppname: HOM_playbar::setPlaybackRange
    #replaces: Cmd:frange
    Set the playback range.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`setPlayMode(self, mode)`:
    #cppname: HOM_playbar::setPlayMode
    #replaces: Cmd:play
    Set the play mode to one of the following:
    <ul>
	<li>hou.playMode.Loop - Loop to the start of the range when the playback slider reaches the end of the range.</li>
	<li>hou.playMode.Once - Stop playback when the slider reaches the end of the range.</li>
	<li>hou.playMode.Zigzag - Play in the forward direction until reaching the end of the playback range, then play in the reverse direction.</li>
    </ul>

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`setRealTime(self, on)`:
    #cppname: HOM_playbar::setRealTime
    #replaces: Cmd:fplayback
    Turn realtime playback either on or off.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`setRealTimeFactor(self, factor)`:
    #cppname: HOM_playbar::setRealTimeFactor
    #replaces: Cmd:fplayback

    Set the realtime playback multiplier.  A multiplier value of less than 1 slows down the playback.  A multiplier value of greater than 1 speeds up the playback.  A multiplier value equal to 1 maintains realtime playback.  The multiplier has no effect if realtime playback is turned off.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`setRealTimeSkipping(self, on)`:
    #cppname: HOM_playbar::setRealTimeSkipping
    #replaces: Cmd:fplayback
    Turn realtime playback skipping either on or off.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`setRestrictRange(self, on)`:
    #cppname: HOM_playbar::setRestrictRange
    #replaces: Cmd:fplayback
    Turn restriction on the playback range on or off.  When the restriction is turned on, playback will remain with the start and end frames of the playback range.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`setTimeRange(self, start, end)`:
    #cppname: HOM_playbar::setTimeRange
    #replaces: Cmd:tset
    Set the global time range using time in seconds.

::`setUseIntegerFrames(self, on)`:
    #cppname: HOM_playbar::setUseIntegerFrames
    #replaces: Cmd:fplayback
    Turn integer frame values on or off.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`showAudio(self, on)`:
    #cppname: HOM_playbar::showAudio
    #replaces: Cmd:fplayback
    Turn display of audio on the playbar on or off.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`showKeys(self, on)`:
    #cppname: HOM_playbar::showKeys
    #replaces: Cmd:fplayback
    Turn display of keyframes on the playbar on or off.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`showRangeSlider(self, on)`:
    #cppname: HOM_playbar::showRangeSlider
    #replaces: Cmd:fplayback
    Turn display of the range slider on the playbar on or off.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`showTicks(self, on)`:
    #cppname: HOM_playbar::showTicks
    #replaces: Cmd:fplayback
    Turn display of the frame ticks on the playbar on or off.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`stop(self)`:
    #cppname: HOM_playbar::stop
    #replaces: Cmd:play
    Stop playing.

    Raises [Hom:hou.NotAvailable] if the playbar is not available.

::`timeRange(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_playbar::timeRange
    #replaces: Cmd:tset
    Return a 2-tuple containing the start and end times of the global time range.

::`usesIntegerFrames(self)` -> `bool`:
    #cppname: HOM_playbar::usesIntegerFrames
    #replaces: Cmd:fplayback
    Return True if playback uses integer frame values.  Return False otherwise.

@replaces

- [Cmd:fplayback]
- [Cmd:frange]
- [Cmd:pane]
- [Cmd:play]




