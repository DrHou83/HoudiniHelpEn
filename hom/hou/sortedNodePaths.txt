= hou.sortedNodePaths =
#type: homfunction
#cppname: hom::sortedNodePaths
#group: nodes

"""Given a tuple of path strings, return a tuple of path strings sorted in input/outputs order.  Invalid node paths won't be part of the sorted list.  """

:usage: `sortedNodePaths(path_tuple)` -> `tuple` of `string`

Sorts nodes following the network traversal order. Root nodes appear first and leaf nodes come last.

{{{
#!pycon
>>> hou.node('/obj').createNode('simplefemale')
<hou.ObjNode of type simplefemale at /obj/simplefemale1>
>>> paths = ["/obj/simplefemale1/ctrl_master","/obj/simplefemale1/ctrl_IK_wrist_right","/obj/simplefemale1/ctrl_cog","/obj/simplefemale1/ctrl_neck","/obj/simplefemale1/ctrl_head","/obj/simplefemale1/ctrl_FK_hand_right"]
>>> hou.sortedNodePaths(paths)
('/obj/simplefemale1/ctrl_master', '/obj/simplefemale1/ctrl_cog', '/obj/simplefemale1/ctrl_IK_wrist_right', '/obj/simplefemale1/ctrl_neck', '/obj/simplefemale1/ctrl
_head', '/obj/simplefemale1/ctrl_FK_hand_right')
}}}

@related
- [Hom:hou.node_]
- [Hom:hou.nodes]
- [Hom:hou.Node]
- [Hom:hou.sortedNodes]

@replaces
- [Exp:oplistsort]

