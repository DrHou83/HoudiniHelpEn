= hou.qlinear =

#type: homfunction
#cppname: hom::qlinear
#group: channels

"""Linearly
interpolates between keyframes using quaternions."""

:usage: `qlinear()` -> float

The neighboring
parameters must also be animated; for example, if "rx" uses qlinear(),
"ry" and "rz" should also use qlinear().

Because the interpolation is done in quaternion spaces, the orientations
will blend smoothly with no gimbal lock or unexpected spins. The Euler
rotation values may appear to jump suddenly, but that's simply because
different rotation values can represent the same orientation.

Note that the graph editor will display a qlinear() segment as a dashed
straight line. This line does not represent the actual intermediate
channel values, but it does give an accurate visual feel for the
behavior of the interpolation.

This function is one of the special animation functions that use the
current playbar time and information in the parameter's keyframes, such
as in and out values, tangents, acceleration, etc., to evaluate
themselves. Because the information needed to evaluate these functions
comes from the keyframes, these functions take few or no parameters.

Calling this function from outside a parameter's expression will raise a
hou.NotAvailable exception.

@related

- [Hom:hou.bezier]
- [Hom:hou.constant]
- [Hom:hou.cubic]
- [Hom:hou.cycle]
- [Hom:hou.cyclet]
- [Hom:hou.ease]
- [Hom:hou.easein]
- [Hom:hou.easeinp]
- [Hom:hou.easeout]
- [Hom:hou.easeoutp]
- [Hom:hou.easep]
- [Hom:hou.linear]
- [Hom:hou.match]
- [Hom:hou.matchin]
- [Hom:hou.matchout]
- [Hom:hou.quintic]
- [Hom:hou.repeat]
- [Hom:hou.repeatt]
- [Hom:hou.spline]
- [Hom:hou.vmatch]
- [Hom:hou.vmatchin]
- [Hom:hou.vmatchout]

@replaces

- [Exp:qlinear]

