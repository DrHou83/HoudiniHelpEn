= hou.ShopNode =
#type: homclass
#cppname: HOM_ShopNode
#superclass: hou.Node
#group: shading

"""The base class for all SHOP nodes in Houdini.  An instance of this class
corresponds to exactly one instance of a node in Houdini."""

See [Hom:hou.Node] for more information.

@methods

::`definingVopNetNode(self)` -> [Hom:hou.VopNetNode] or None:
    #cppname: HOM_ShopNode::definingVopNetNode
    If this SHOP is defined by a VOP network, return the
    [Hom:hou.VopNetNode] that defines it.  Otherwise, return None.

::`coshaderNodes(self, parm_name)` -> `tuple` of [Hom:hou.ShopNode]:
    #cppname: HOM_ShopNode::coshaderNodes
    If this SHOP has a co-shader parameter given by `parm_name` it
    may also have an input corresponding to that parameter.
    This function will return the tuple of [Hom:hou.ShopNode] assigned
    as co-shaders to this SHOP node either via connected input
    or the operator node path specified in that parameter.

    If the parameter represents a single co-shader, the array will contain 
    at most one element, however if the parameter refers to a co-shader 
    array then the tuple may contain more than one element.

    parm_name:
	Co-shader parameter name specifying the co-shader shop to return.

::`shaderName(self, as_otl_path=True, shader_type_name=None)` -> `str`:
    #cppname: HOM_ShopNode::shaderName
    Return the name of the shader inside this SHOP.  If `as_otl_path` is True,
    returns an `opdef:` path to the SHOP type. The `shader_type_name` is
    a string indicating the shader context type to use; some nodes may provide
    several shader types, and each may have a different name. This is applicable
    only to multi-context shader nodes, such as a vopnet material shop.

::`shaderString(self, render_type=None)` -> `str`:
    #cppname: HOM_ShopNode::shaderString
    #replaces: Exp:shopstring
    Return the shader string generated by this shader for the given render type.
    This string is written to the file that is read in by the renderer.

    render_type:
	A string representing the renderer.  If this string is empty or is
	`"*"`, Houdini uses the default render type for this shader.  Possible
	render types include `"VMantra"` (Mantra), `"RIB"` (RenderMan), 
	`"OGL"` (OpenGL), `"OGL2"` (OpenGL 2), and `"I3D"` (Image 3D).

	You can use [Hom:hou.ShopNodeType#renderMask] to determine the render
	types supported by this SHOP's type.
	You can also use [Hom:hou.ShopNodeTypeCategory#renderers] to get
	all the possible render types. Note that some SHOP types,
	like the properties SHOP or the switch SHOP, have a render mask of
	`"*"` to indicate that they will work with any shader type.

    If you pass in an unknown or unsupported render type, this method returns
    an empty string.

    {{{
    #!pycon
    >>> for node_type_name in ("v_plastic", "ri_matte"):
    ...     hou.node("/shop").createNode(node_type_name)

    <hou.ShopNode of type v_plastic at /shop/v_plastic1>
    <hou.ShopNode of type ri_matte at /shop/ri_matte1>

    >>> for shop in hou.node("/shop").children():
    ...     for render_type in shop.type().renderMask().split():
    ...         print shop.name(), "supports", render_type
    ...         print "    shader_string:", shop.shaderString(render_type)
    ...         print
    v_plastic1 supports VMantra
        shader_string: opdef:/Shop/v_plastic

    v_plastic1 supports OGL
	shader_string: /shop/v_plastic1

    ri_matte1 supports RIB
	shader_string: "matte"

    ri_matte1 supports OGL
	shader_string: /shop/ri_matte1
    }}}

::`shaderCode(self, shader_type=hou.shaderType.Surface)` -> `str`:
    #cppname: HOM_VopNode::shaderCode
    Returns the generated VEX or RSL code for this SHOP, using the given 
    shader type to control output context.
    
::`shaderType(self)` -> [Hom:hou.shaderType] enum value:
    #cppname: HOM_ShopNode::shaderType
    Returns a hou.shaderType indicating the type of this shader.

    Note that this method is a shortcut for `self.type().shaderType()`,
    which calls [Hom:hou.ShopNodeType#shaderType].

::`supportedRenderers(self)` -> tuple of `str`:
    #cppname: HOM_ShopNode::supportedRenderers
    Returns a list of strings describing the renderers this shader supports.

