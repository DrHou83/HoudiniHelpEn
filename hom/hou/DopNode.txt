= hou.DopNode =
#type: homclass
#cppname: HOM_DopNode
#superclass: hou.Node
#group: dynamics

"""Represents a dynamics node."""

@methods

::`processedObjects(self)` -> `tuple` of [Hom:hou.DopObject]:
    #cppname: HOM_DopNode::processedObjects
    Return a tuple of DOP objects that this DOP node processes.

::`createdObjects(self)` -> `tuple` of [Hom:hou.DopObject]:
    #cppname: HOM_DopNode::createdObjects
    #replaces: Exp:dopobjscreatedby
    Return a tuple of DOP objects that this DOP node creates.

::`dopNetNode(self)` -> [Hom:hou.Node]:
    #cppname: HOM_DopNode::dopNetNode
    Return the DOP network node that contains this DOP node.

::`simulation(self)` -> [Hom:hou.DopSimulation]:
    #cppname: HOM_DopNode::simulation
    Return the simulation that this node contributes to.  This method is
    a shortcut for `self.dopNetNode().simulation()`.

::`isDisplayFlagSet(self)` -> `bool`:
    #cppname: HOM_DopNode::isDisplayFlagSet
    #replaces: Cmd:opget
    Return whether this node's display flag is on.  This is the orange
    Output flag in the interface.

::`displayNode(self)` -> [Hom:hou.Node] or `None`:
    #cppname: HOM_DopNode::displayNode
    If this node is a subnet (i.e. it contains child nodes), return the child
    that has its display flag set, or `None` if there are no children.
    Otherwise, return `None`.

::`setDisplayFlag(self, on)`:
    #cppname: HOM_DopNode::setDisplayFlag
    #replaces: Cmd:opset
    Turn the node's display flag on or off.  This the orange Output flag in the
    interface.

::`isTemplateFlagSet(self)` -> `bool`:
    #cppname: HOM_DopNode::isTemplateFlagSet
    #replaces: Exp:opflag, Cmd:opget
    Returns whether this node's template flag is on.  This is the brown
    Hidden flag in the interface.

::`setTemplateFlag(self, on)`:
    #cppname: HOM_DopNode::setTemplateFlag
    #replaces: Exp:opset
    Turns this node's template flag on or off.  This is the brown
    Hidden flag in the interface.

::`bypass(self, on)`:
    #cppname: HOM_DopNode::bypass
    Turn the node's bypass flag on or off, making this node have no effect.

::`isBypassed(self)` -> `bool`:
    #cppname: HOM_DopNode::isBypassed
    #replaces: Exp:opflag
    Returns whether the node's bypass flag is on.

::`objectsToProcess(self)` -> `tuple` of [Hom:hou.DopObject]:
    #cppname: HOM_DopNode::objectsToProcess
    Return a tuple of DOP objects that this node should process.  Raises
    [Hom:hou.PermissionError] if called from outside a DOP implemented in
    Python.

::`pythonSolverData(self)` -> [Hom:hou.DopData]:
    #cppname: HOM_DopNode::pythonSolverData
    If this node is a Python DOP solver, return the solver data added to the
    DOP network by this node.  Otherwise, raises [Hom:hou.PermissionError].

    This method is called from Python DOP solvers when the solver is not
    running, to copy data from the DOP parameters into the solver data.

    See also [Hom:hou.dop#scriptSolverData].

