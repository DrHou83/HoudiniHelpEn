= hou.ViewportVisualizer =
#type: homclass
#cppname: HOM_ViewportVisualizer
#group: view

"""
Represents a viewport visualizer.
"""

You can create a new visualizer by calling [Hom:hou.viewportVisualizers#createVisualizer].
You can get a list of registered visualizers by calling [Hom:hou.viewportVisualizers#visualizers].

@methods

::`name(self)` -> `string`:
    #cppname: HOM_ViewportVisualizer::name
    Return the visualizer's unique identifier.

::`setName(self, name)`:
    #cppname: HOM_ViewportVisualizer::setName
    Set the visualizer's unique identifier.

::`label(self)` -> `string`:
    #cppname: HOM_ViewportVisualizer::label
    Return the visualizer's user-friendly label.

::`setLabel(self, label)`:
    #cppname: HOM_ViewportVisualizer::setLabel
    Set the visualizer's user-friendly label.

::`icon(self)` -> `string`:
    #cppname: HOM_ViewportVisualizer::icon
    Return the name of the visualizer's icon.

::`setIcon(self, icon)`:
    #cppname: HOM_ViewportVisualizer::setIcon
    Set the visualizer's icon.  `icon` must be the icon name.

::`isActive(self, viewport=None)` -> `bool`:
    #cppname: HOM_ViewportVisualizer::isActive
    If this is a Common or Scene visualizer then return True if it is active
    for the specified viewport or False otherwise.  The `viewport` argument
    must be a [Hom:hou.GeometryViewport] object.

    If this is a Node visualizer then return True if it is active for all
    viewports and False otherwise.
    
    Raise [Hom:hou.TypeError] if this is a Node visualizer and the `viewport`
    argument is not None.  Node visualizers are either active in all viewports
    or none of them.  They cannot be activated for a specific viewport.

    Raise [Hom:hou.TypeError] if this is either a Common or Scene visualizer
    and the `viewport` argument is None.

::`setIsActive(self, on, viewport=None)`:
    #cppname: HOM_ViewportVisualizer::setIsActive
    If this is a Common or Scene visualizer then set whether it is active
    or not for a specified viewport.  The `viewport` argument must be a
    [Hom:hou.GeometryViewport] object.

    If this is a Node visualizer then set whether it is active or not
    for all viewports.
    
    Raise [Hom:hou.TypeError] if this is a Node visualizer and the `viewport`
    argument is not None.  Node visualizers are either active in all viewports
    or none of them.  They cannot be activated for a specific viewport.

    Raise [Hom:hou.TypeError] if this is either a Common or Scene visualizer
    and the `viewport` argument is None.

::`type(self)` -> [Hom:hou.ViewportVisualizerType]:
    #cppname: HOM_ViewportVisualizer::type
    Return the visualizer's type.

::`setType(self, type)`:
    #cppname: HOM_ViewportVisualizer::setType
    Sets the visualizer's type.  This essentially recreates the visualizer and rebuilds its customizable parameters.  Call [Hom:hou.ViewportVisualizer#parmNames] to get a list of the parameters.

::`category(self)` -> [Hom:hou.viewportVisualizerCategory]:
    #cppname: HOM_ViewportVisualizer::category
    Return the category that the visualizer belongs to.

::`categoryNode(self)` -> [Hom:hou.Node]:
    #cppname: HOM_ViewportVisualizer::categoryNode
    Return the node that the visualizer is installed on.  This only applies if the visualizer belongs to the `Node` category.
    
    Return None if the visualizer belongs to either the `Common` or `Scene` category.

::`scope(self)` -> [Hom:hou.viewportVisualizerScope]:
    #cppname: HOM_ViewportVisualizer::scope
    Return the scope of geometries that the visualizer affects.

::`setScope(self, scope)`:
    #cppname: HOM_ViewportVisualizer::setScope
    Set the scope of geometries that the visualizer affects.

    This method does nothing if the visualizer belongs to the `Common` or `Scene` because the scope is always global.

::`isShownInToolbar(self)` -> `bool`:
    #cppname: HOM_ViewportVisualizer::isShownInToolbar
    Return True if the visualizer appears in the viewer pane's toolbar.  Return False otherwise.

::`showInToolbar(self, on)`:
    #cppname: HOM_ViewportVisualizer::showInToolbar
    Set whether the visualizer appears in the viewer pane's toolbar.

::`isActiveWhenUnselected(self)` -> `bool`:
    #cppname: HOM_ViewportVisualizer::isActiveWhenUnselected
    Return True if the visualizer is applied when the geometry is unselected.  Return False otherwise.

::`setIsActiveWhenUnselected(self, on)`:
    #cppname: HOM_ViewportVisualizer::setIsActiveWhenUnselected
    Set whether the visualizer is applied when the geometry is unselected.

::`isActiveWhenSelected(self)` -> `bool`:
    #cppname: HOM_ViewportVisualizer::isActiveWhenSelected
    Return True if the visualizer is applied when the geometry is selected.  Return False otherwise.

::`setIsActiveWhenSelected(self, on)`:
    #cppname: HOM_ViewportVisualizer::setIsActiveWhenSelected
    Set whether the visualizer is applied when the geometry is selected.

::`isActiveWhenGhosted(self)` -> `bool`:
    #cppname: HOM_ViewportVisualizer::isActiveWhenGhosted
    Return True if the visualizer is applied when the geometry is ghosted.  Return False otherwise.

::`setIsActiveWhenGhosted(self, on)`:
    #cppname: HOM_ViewportVisualizer::setIsActiveWhenGhosted
    Set whether the visualizer is applied when the geometry is ghosted.

::`isActiveWhenDisplayed(self)` -> `bool`:
    #cppname: HOM_ViewportVisualizer::isActiveWhenDisplayed
    Return True if the visualizer is applied when the geometry is displayed.  Return False otherwise.

::`setIsActiveWhenDisplayed(self, on)`:
    #cppname: HOM_ViewportVisualizer::setIsActiveWhenDisplayed
    Set whether the visualizer is applied when the geometry is displayed.

::`isActiveWhenCurrent(self)` -> `bool`:
    #cppname: HOM_ViewportVisualizer::isActiveWhenCurrent
    Return True if the visualizer is applied when the geometry is the current geometry.  Return False otherwise.

::`setIsActiveWhenCurrent(self, on)`:
    #cppname: HOM_ViewportVisualizer::setIsActiveWhenCurrent
    Set whether the visualizer is applied when the geometry is the current geometry.

::`isActiveWhenTemplated(self)` -> `bool`:
    #cppname: HOM_ViewportVisualizer::isActiveWhenTemplated
    Return True if the visualizer is applied when the geometry is templated.

::`setIsActiveWhenTemplated(self, on)`:
    #cppname: HOM_ViewportVisualizer::setIsActiveWhenTemplated
    Set whether the visualizer is applied when the geometry is templated.

::`parmNames(self)` -> tuple of `string`:
    #cppname: HOM_ViewportVisualizer::parmNames
    Return a tuple of the visualizer's customizable parameters.  Note that the parameters can change when either the visualizer's type changes or one of the parameters changes (for example changing the Color Type parameter on a color visualizer).

::`evalParm(self, parm_name)` -> `int`, `float`, or `str`:
    #cppname: HOM_ViewportVisualizer::evalParm
    Evaluate the specified parameter and return the result.

::`evalParmAsFloat(self, parm_name)` -> `float`:
    #cppname: HOM_ViewportVisualizer::evalParmAsFloat
    Evaluate the specified parameter and return the result as a
    float.

    Raise [Hom:hou.TypeError] if the value cannot be converted to a float.

::`evalParmAsInt(self, parm_name)` -> `int`:
    #cppname: HOM_ViewportVisualizer::evalParmAsInt
    Evaluate the specified parameter and return the result as an
    integer.

    Raise [Hom:hou.TypeError] if the value cannot be converted to a integer.

::`evalParmAsString(self, parm_name)` -> `int`:
    #cppname: HOM_ViewportVisualizer::evalParmAsString
    Evaluate the specified parameter and return the result as a
    string.

    Raise [Hom:hou.TypeError] if the value cannot be converted to a string.

::`evalParmAsRamp(self)` -> [Hom:hou.Ramp]:
    #cppname: HOM_ViewportVisualizer::evalParmAsRamp
    Evalute the specified parameter and return the result as a
    ramp.

    Raises [Hom:hou.TypeError] if the parameter is not a ramp.

::`setParm(self, parm_name, value)`:
    #cppname: HOM_ViewportVisualizer::set
    Set the specified parameter's value.
    
    Pass in a [Hom:hou.Ramp] object, as the parameter value, to set the value 
    of a ramp parameter. The ramp object's type needs to match the target 
    ramp's type.

    Raise [Hom:hou.TypeError] if the type of `value` does not match the
    type of the specified parameter.

::`destroy(self)`:
    #cppname: HOM_ViewportVisualizer::destroy
    Delete this viewport visualizer.

    If you call methods on a visualizer instance after it has been destroyed,
    Houdini will raise [Hom:hou.ObjectWasDeleted].
