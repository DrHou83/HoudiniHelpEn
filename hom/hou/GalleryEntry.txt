= hou.GalleryEntry =
#type: homclass
#cppname: HOM_GalleryEntry
#group: shading

"""A gallery entry that can be applied to operator nodes to set their parameters
to predefined values."""

A gallery entry is an entity containing data about an operator node setup. 
It has information about the node's parameter values, any additional spare
parameters, channels, and for subnet nodes the information about the
children, etc. Thus, a gallery entry is like a node template or 
a parameter preset. Such templates can be created from and applied to existing
nodes.

A gallery entry is identified by a unique, and has a non-unique label, 
and is usually associated with a specific [Hom:hou.NodeType] (or
several node types) of the nodes to which it applies.
In addition to the node information, 
gallery entries can have own categories that organize them into manageable sets
and also can have keywords that identify their purpose. For more information
about gallery entries, please see 
[a gallery entry editor|/ref/windows/savetogallery].

In order for your gallery entries to appear in the Material Palette pane,
they must satisfy two conditions. First, the node category must be set to
indicate the gallery entry creates a SHOP node. Use code like:

{{{
#!python
hou.galleries.galleryEntries("entry_name")[0].setNodeTypeCategory(hou.shopNodeTypeCategory())
}}}

The second condition is that the entry must contain one or more keywords that
indicate what renderer the SHOP works with. This affects whether the gallery
entry appears when a specific renderer is chosen in the Material Palette
renderer menu. Even if "All" is chosen in that menu, the gallery entry must
contain a keyword that matches one of the renderers that appears in that menu.
To associate a gallery entry with the Mantra renderer, do the following:

{{{
#!python
hou.galleries.galleryEntries("entry_name")[0].setKeywords(('Mantra',))
}}}

In HOM the gallery entries can be managed using [Hom:hou.Gallery].

@methods

::`allowIconRegeneration(self)` -> bool:
    #cppname: HOM_GalleryEntry::allowIconRegeneration
    Return `True` if this gallery entry wants to let Houdini regenerate the
    icon for it automatically using an appropriate renderer. Only applies to
    material gallery entries.

::`applyToNode(self, node)`:
    #cppname: HOM_GalleryEntry::applyToNode
    Apply the gallery entry to a given node. This method sets the node's
    parameter values to match the ones stored by the entry. It may also add
    spare parameters and channels to the node and for the subnets, 
    it may create new child nodes.

    node:
	A node to which to apply the gallery entry.

::`bestNodeType(self)` -> NodeType or None:
    #cppname: HOM_GalleryEntry::bestNodeType
    Return a best node type which this gallery entry is associated with
    and whose nodes it can be applied to.

::`canApplyToNode(self, node)` -> bool:
    #cppname: HOM_GalleryEntry::canApplyToNode
    Return `True` if this gallery entry can be safely applied to the given node.
    See [Hom:hou.GalleryEntry#applyToNode] for more info.

    node:
	A node to test whether the gallery entry can be applied to.

::`canCreateChildNode(self, parent)` -> bool:
    #cppname: HOM_GalleryEntry::canCreateChildNode
    Return `True` if [Hom:hou.GalleryEntry#createChildNode] can succeed.

::`categories(self)` -> tuple of strings:
    #cppname: HOM_GalleryEntry::categories
    Return the categories this gallery entry subscribes to.

::`createChildNode(self, parent)` -> Node:
    #cppname: HOM_GalleryEntry::createChildNode
    Create a new node in the parent network and then apply this gallery entry
    to that newly created node.

    parent:
	A subnetwork within which the new node should be created. If `None`,
	an implicit natural parent is chosen using a node type this
	gallery entry is associated with.

::`description(self)` -> string:
    #cppname: HOM_GalleryEntry::description
    Return a description of the gallery entry. A description is a short string
    that states the gallery entry purpose. It is used for tool-tip pop-ups.

::`helpURL(self)` -> string:
    #cppname: HOM_GalleryEntry::helpURL
    Return the URL of the help document for this gallery entry.

::`icon(self)` -> string:
    #cppname: HOM_GalleryEntry::icon
    Return the icon name or a icon file path that should be used for this
    gallery entry.

::`keywords(self)` -> tuple of strings:
    #cppname: HOM_GalleryEntry::keywords
    Return the keywords that describe this gallery entry.

::`label(self)` -> `str`:
    #cppname: HOM_GalleryEntry::label
    Return the gallery entry label.

::`name(self)` -> string:
    #cppname: HOM_GalleryEntry::name
    Return the gallery entry name.

::`nodeTypeCategory(self)` -> NodeTypeCategory:
    #cppname: HOM_GalleryEntry::nodeTypeCategory
    Return the category of the node types this gallery entry is associated with.

::`nodeTypeNames(self)` -> tuple of strings:
    #cppname: HOM_GalleryEntry::nodeTypeNames
    Return the names of the node type this gallery is associated with. 
    The gallery can be safely applied to the nodes of these types.

::`requiredHDAFile(self)` -> string:
    #cppname: HOM_GalleryEntry::requiredHDAFile
    Return a file path to an HDA library that should be loaded before trying to
    apply this gallery entry. It is often used for gallery entries associated
    with a non-native operator type.

::`script(self)` -> string:
    #cppname: HOM_GalleryEntry::script
    Return a script that modifies the node parameters to match the information
    stored in the gallery entry.

::`setAllowIconRegeneration(self, allow)`:
    #cppname: HOM_GalleryEntry::setAllowIconRegeneration
    Sets the allow icon regneration flag on this gallery entry.

::`setCategories(self, categories)`:
    #cppname: HOM_GalleryEntry::setCategories
    Set the categories this gallery entry subscribes to.

    categories:
	A string with comma separated categories to set the gallery entry to.

::`setContentsFromNode(self, node)`:
    #cppname: HOM_GalleryEntry::setContentsFromNode
    Save the information about the node contents (i.e., child nodes). When
    applying the node entry later on, these nodes will be reconstructed 
    in a new parent to match the contents of the current parent.

    node:
	The parent of the nodes whose data should be saved. 

::`setDescription(self, description)`:
    #cppname: HOM_GalleryEntry::setDescription
    Set the description of the gallery entry.

    description:
	The text briefly describing the gallery entry purpose.

::`setEqual(self, entry)`:
    #cppname: HOM_GalleryEntry::setEqual
    Set this gallery entry to be exactly the same as the given entry, except for
    the name, which is left unchanged.

    entry:
	The gallery entry to copy the information from.

::`setHelpURL(self, helpurl)`:
    #cppname: HOM_GalleryEntry::setHelpURL
    Set the URL of the help document for this gallery entry.

::`setIcon(self, icon)`:
    #cppname: HOM_GalleryEntry::setIcon
    Set the icon name or an icon file path that should be used for this
    gallery entry.

::`setKeywords(self, keywords)`:
    #cppname: HOM_GalleryEntry::setKeywords
    Set the keywords that describe this gallery entry.

    keywords:
	A string containing a white-space separated list of keywords.

::`setLabel(self, label)`:
    #cppname: HOM_GalleryEntry::setLabel
    Set the gallery entry label.

    label:
	The label string.

::`setName(self, name)`:
    #cppname: HOM_GalleryEntry::setName
    Set the gallery entry name.

    name:
	The name string.

::`setNodeTypeCategory(self, category)`:
    #cppname: HOM_GalleryEntry::setNodeTypeCategory
    Set the category of the node types this gallery entry should be 
    associated with.

    category:
	A [Hom:hou.NodeTypeCategory] to associate this gallery entry with.

::`setNodeTypeNames(self, nodetypes)`:
    #cppname: HOM_GalleryEntry::setNodeTypeNames
    Set the names of the node types this gallery should be associated with. 

    nodetypes:
	A string containing white-space separated list of node type names.

::`setRequiredHDAFile(self, hda_file)`:
    #cppname: HOM_GalleryEntry::setRequiredHDAFile
    Set a file path to an HDA library on which this gallery entry depends.

    hda_file:
	A path of the HDA library file (OTL).

::`setScript(self, script)`:
    #cppname: HOM_GalleryEntry::setScript
    Set a script that modifies the parameters when the gallery entry is 
    applied to a node.

    script:
	A string that contains the commands setting the node's parameters.

::`setScriptFromNode(self, node)`:
    #cppname: HOM_GalleryEntry::setScriptFromNode
    Set a script that modifies node parameters. Later on, when applying this
    gallery entry to a node, the script will reconstruct that node's parameters 
    to match exactly the parameters of a node passed to this method.

    node:
	A node object from which to build the script. 



