= hou.parmNamingScheme =
#type: hommodule
#cppname: HOM_parmNamingScheme
#group: parmtemplates

"""Enumeration of available naming schemes for a parameter."""

These naming schemes are stored inside [Hom:hou.ParmTemplate] objects and
determine the names of [Hom:hou.Parm] objects inside [Hom:hou.ParmTuple]
objects.

The number of components in the parm template determines the number of parms
inside the parm tuple.  If this number is 1, the parm name is the same as
the parm tuple name.  If the naming scheme is Base1, the number of components
may be more than 4.  Otherwise, the component may have from 2 components up
to the maximum number allowed by the naming scheme.

The following restrictions exist on naming schemes:

* You cannot use the following naming schemes when editing the parameter
  interface on a node or a digital asset: MinMax, MaxMin, StartEnd, BeginEnd,
  XYWH.  However, some built-in node types use parameters with these naming
  schemes, so asking these node types for their parm templates may return
  ones using these naming schemes.
* String and toggle parameters only support the Base1 naming scheme.
* Parameters with the [hou.parmLook.Vector|Hom:hou.parmLook] look must use
  the XYZW naming scheme.
* Parameters with the [hou.parmLook.Angle|Hom:hou.parmLook] look must use
  the Base1 naming scheme.
* Parameters with the [hou.parmLook.ColorSquare|Hom:hou.parmLook] look must
  use an RGBA naming scheme.

The example names below are for a parm template named `"foo"`:


@values

:: Base1
    `"foo1"`, `"foo2"`, `"foo3"`, ...
:: XYZW
    `"foox"`, `"fooy"`, `"fooz"`, `"foow"`
:: XYWH
    `"foox"`, `"fooy"`, `"foow"`, `"fooh"`
:: UVW
    `"foou"`, `"foov"`, `"foow"`
:: RGBA
    `"foor"`, `"foog"`, `"foob"`, `"fooa"`
:: MinMax
    `"foomin"`, `"foomax"`
:: MaxMin
    `"foomax"`, `"foomin"`
:: StartEnd
    `"foostart"`, `"fooend"`
:: BeginEnd
    `"foobegin"`, `"fooend"`

