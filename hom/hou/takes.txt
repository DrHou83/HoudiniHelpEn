= hou.takes =
#type: hommodule
#cppname: HOM_takes
#group: takes

@functions

::`takes()` -> tuple of [Hom:hou.Take]:
    #cppname: HOM_takes::takes
    #replaces: Cmd:takels
    Return a tuple of all the takes in the scene.

::`currentTake()` -> [Hom:hou.Take]:
    #cppname: HOM_takes::currentTake
    Return the current take.

::`setCurrentTake(take)`:
    #cppname: HOM_takes::setCurrentTake
    #replaces: Cmd:takeset
    Set the current take to the specified take.

    Raise [Hom:hou.OperationFailed] if the `take` argument is None.

::`rootTake()` -> [Hom:hou.Take]:
    #cppname: HOM_takes::rootTake
    Return the main (master) take.

::`findTake(take_name)` -> [Hom:hou.Take] or `None`:
    #cppname: HOM_takes::findTake
    Return the take with the specified name or None if no such take exists.

::`defaultTakeName()`:
    #cppname: HOM_takes::defaultTakeName
    Return the default take name used for new takes.  The default name acts
    like a prefix since new takes will contain the default name plus a
    numerical suffix in their take names.

::`setDefaultTakeName()`:
    #cppname: HOM_takes::setDefaultTakeName
    #replaces: Cmd:takename
    Sets the default take name.  The default take name is used as a prefix for
    the names of new takes.

@related

- [Hom:hou.Take]
