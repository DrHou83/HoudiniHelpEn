= hou.VexContext =
#type: homclass
#cppname: HOM_VexContext
#group: vex

"""Represents a VEX/VOP context. Different contexts allow the use of different functions/VOPs."""

NOTE:
    This class is for internal use by Houdini and isn't usually necessary for scripting Houdini or creating tools.

This object is returned by [Hom:hou.vexContextForNodeTypeCategory] and [Hom:hou.vexContextForShaderType]. You can get a list of all VEX context objects using [Hom:hou.vexContexts]. 

@methods

::`name(self)` -> `str`:
    #cppname: HOM_VexContext::name
    
    Returns the name of this context as a string. For example, `'Sop'` or `'surface'`.

::`nodeTypeCategory(self)` -> [Hom:hou.NodeTypeCategory]:
    #cppname: HOM_VexContext::nodeTypeCategory
    
    Returns the [Hom:hou.NodeTypeCategory] object associated with this VEX context.
    
    {{{
    #!pycon
    >>> # Get a reference to a SOP node
    >>> n = hou.node("/obj/geo1/pointvop1")
    >>> # Get its type category (SOPs)
    >>> sops = n.type().category()
    >>> # Get the context associated with the SOPs category
    >>> ctx = hou.vexContextForNodeTypeCategory(sops)
    >>> # Get the node type category associated with the Sop context
    >>> ctx.nodeTypeCategory()
    <hou.NodeTypeCategory for Sop>
    }}}

::`pathsToLoadedVexFunctions(self)` -> `dict` mapping names to paths:
    #cppname: HOM_VexContext::pathsToLoadedVexFunctions
    #status: nd

::`shaderType(self)` -> [Hom:hou.shaderType] enum value or None:
    #cppname: HOM_VexContext::shaderType
    
    Returns a [Hom:hou.shaderType] value representing the shader type associated with this VEX context.

@replaces

- [Cmd:vexinfo]
