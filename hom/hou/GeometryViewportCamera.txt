= hou.GeometryViewportCamera =
#type: homclass
#cppname: HOM_GeometryViewportCamera
#group: view

@methods

::`stash(self)` -> `hou.GeometryViewportCamera`:
    #cppname: HOM_GeometryViewportCamera::stash
    
    Create a copy of the camera settings which can be used to store the view, usually so it can be restored later. Stashed camera settings are not connected to a viewport, so modifying them will have no effect on the viewport until it is passed to the viewport via `hou.GeometryViewport.setDefaultCamera()`. 

::`setPerspective(self, perspective)`:
    #cppname: HOM_GeometryViewportCamera::setPerspective
    
    Set the camera view to perspective (`True`) or orthographic (`False`). Fixed orthographics views cannot be changed to perspective (Top, Bottom, Left, Right, Front, and Back).

::`isPerspective(self)` -> `bool`:
    #cppname: HOM_GeometryViewportCamera::isPerspective
    
    Query if the camara view uses a perspective projection.

::`isOrthographic(self)` -> `bool`:
    #cppname: HOM_GeometryViewportCamera::isOrthographic
    
    Query if the camara view uses an orthographic projection. 

    
::`setAperture(self, ap)`:
    #cppname: HOM_GeometryViewportCamera::setAperture
    
    Set the aperture of the viewport camera. Throws an error if the viewport is looking though camera object and the view is not locked to that camera.

::`aperture(self)` -> `float`:
    #cppname: HOM_GeometryViewportCamera::aperture
    
    Query the aperture of the viewport camera (or current camera).

::`setFocalLength(self, fl)`:
    #cppname: HOM_GeometryViewportCamera::setFocalLength
    
    Set the focal length of the viewport camera. Throws an error if the viewport is looking though camera object and the view is not locked to that camera.
    

::`focalLength(self)` -> `float`:
    #cppname: HOM_GeometryViewportCamera::focalLength
    
    Query the focal length of the viewport camera (or current camera).
    

::`setAspectRatio(self, ar)`:
    #cppname: HOM_GeometryViewportCamera::setAspectRatio
    
    Set the view aspect ratio of the viewport camera (16:9 would be 1.777). Throws an error if the viewport is looking though camera object and the view is not locked to that camera.
   

::`aspectRatio(self)` -> `float`:
    #cppname: HOM_GeometryViewportCamera::aspectRatio
    
     Query the aspect ratio of the viewport camera (or current camera).
   

::`setOrthoWidth(self, ow)`:
    #cppname: HOM_GeometryViewportCamera::setOrthoWidth
    
    Set the orthographic width of the viewport camera. Throws an error if the viewport is looking though camera object and the view is not locked to that camera. This has no effect on perspective cameras.
    
    

::`orthoWidth(self)` -> `float`:
    #cppname: HOM_GeometryViewportCamera::orthoWidth
    
     Query the orthographic width of the viewport camera (or current camera).
    

::`setRotation(self, mat)`:
    #cppname: HOM_GeometryViewportCamera::setRotationMatrix
    
     Set the rotation matrix of the viewport camera, specified as a [Hom:hou.Matrix3]. Throws an error if the viewport is looking though camera object and the view is not locked to that camera. This cannot be used on fixed orthographic or UV viewports.
   

::`rotation(self)` -> `hou.Matrix3`:
    #cppname: HOM_GeometryViewportCamera::rotationMatrix
    
    Query the rotation matrix of the viewport camera.

::`setTranslation(self, xyz)`:
    #cppname: HOM_GeometryViewportCamera::setTranslation
    
     Set the translation (position) of the viewport camera, specified as a `3-tuple of float`. Throws an error if the viewport is looking though camera object and the view is not locked to that camera.
   
    

::`translation(self)` -> 3-tuple of `float`:
    #cppname: HOM_GeometryViewportCamera::translation
    
    Query the translation (position) of the viewport camera.

::`setPivot(self, xyz)`:
    #cppname: HOM_GeometryViewportCamera::setPivot
    
     Set the pivot of the viewport camera, specified as a `3-tuple of float`. Tumbling will rotate around this point. Throws an error if the viewport is looking though camera object and the view is not locked to that camera.
   
    

::`pivot(self)` -> 3-tuple of `float`:
    #cppname: HOM_GeometryViewportCamera::pivot
    
    Query the pivot of the viewport camera.

::`setClipPlanes(self, near_far)`:
    #cppname: HOM_GeometryViewportCamera::setClipPlanes
    
     Set the clip planes of the viewport camera, specified as a `2-tuple of float` (near, far). Objects will be visible between if they are between `near` and `far` units from the camera and clipped otherwise. Throws an error if the viewport is looking though camera object and the view is not locked to that camera.
    

::`clipPlanes(self)` -> 2-tuple of `float`:
    #cppname: HOM_GeometryViewportCamera::clipPlanes
    
    Query the clip planes of the viewport camera as (near,far).

::`setWindowOffset(self, xy)`:
    #cppname: HOM_GeometryViewportCamera::setWindowOffset
    
     Set the coordinates of the viewport camera window, specified as a `2-tuple of float` in (0,1) space. This will determine where the lower left cornder of the view is within the frustum. The default is `(0,0)`.Throws an error if the viewport is looking though camera object and the view is not locked to that camera.
    
    

::`windowOffset(self)` -> 2-tuple of `float`:
    #cppname: HOM_GeometryViewportCamera::windowOffset
    
    Query the window offset of the viewport, in (0,1) space.

::`setWindowSize(self, size)`:
    #cppname: HOM_GeometryViewportCamera::setWindowSize
    
     Set the size of the viewport camera window, specified as a `2-tuple of float` in (0,1) space. This will determine where the lower left cornder of the view is within the frustum. The default is `(1,1)`. Throws an error if the viewport is looking though camera object and the view is not locked to that camera.
    
    

::`windowSize(self)` -> 2-tuple of `float`:
    #cppname: HOM_GeometryViewportCamera::windowSize
    
    Query the window size of the viewport, in (0,1) space.

    

