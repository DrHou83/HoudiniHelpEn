= hou.NetworkShapeConnection =
#type: homclass
#cppname: HOM_NetworkShapeConnection
#superclass: hou.NetworkShape
#group: ui

"""Describes a wire that can be drawn into a network editor."""

This subclass of [Hom:hou.NetworkShape] describes a wire that can be
drawn into a network editor pane. This wire is drawn using the same wire style
set on the current network.

@methods

::`__init__(self, input_pos, input_dir, output_pos, output_dir, color = hou.Color((1.0, 1.0, 1.0)), alpha = 1.0, fade_factor = 0.0, smooth = True, dashed = False)`:
    #cppname: HOM_NetworkShapeConnection::HOM_NetworkShapeConnection
    Constructs a new connection descriptor. This is different from a
    [Hom:hou.NetworkShapeLine] because it is drawn using the same algorithm as
    a wire connecting two nodes, rather than always using a straight line.

    `input_pos`:
	A [Hom:hou.Vector2] indicating the starting point of the connection,
	expressed in network coordinates.

    `input_dir`:
	A [Hom:hou.Vector2] expressing the starting direction of the wire.

    `output_pos`:
	A [Hom:hou.Vector2] indicating the end point of the connection,
	expressed in network coordinates.

    `output_dir`:
	A [Hom:hou.Vector2] expressing the ending direction of the wire.

    `color`:
	The color of the connection, expressed as a [Hom:hou.Color].

    `alpha`:
	The alpha used when drawing the connection, expressed as a float value
	between 0 and 1.

    `fade_factor`:
	A float value indicating the amount of fading that should be applied
	to this connection if it exceeds the fade length. By setting this
	value to `0.0`, all fading logic is disabled.

    `smooth`:
	A boolean value indicating whether lines should be drawn with
	smoothing turned on. Smoothing lines is a form of anti-aliasing which
	can make curved lines look better, but doing so may affect the color
	of the line.

    `dashed`:
	A boolean value indicating whether lines should be drawn as a series
	of dashes rather than as solid lines.

