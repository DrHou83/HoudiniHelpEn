= hou.Pane =
#type: homclass
#cppname: HOM_Pane
#group: ui

"""A rectangular area of the desktop that contains one or more pane tabs."""

Desktops (and floating panels) are composed of one or more panes.  Initially
a desktop contains one pane, and more panes are added to it by splitting
existing panes in two, either horizontally or vertically.

See [Hom:hou.Desktop] for more information about panes and pane tabs.  See
[Hom:hou.FloatingPanel] for more information about floating panels.

@methods

::`tabs(self)` -> tuple of [Hom:hou.PaneTab]:
    #cppname: HOM_Pane::tabs
    Return the pane tabs in this pane.

::`tabOfType(self, type, index=0)` -> [Hom:hou.PaneTab] or `None`:
    #cppname: HOM_Pane::tabOfType
    Find and return a pane tab with the desired type, or `None` if no such tab
    exists in the pane.

    If there are multiple tabs in the pane with the desired type, then the
    first found tab is returned.  Use `index` to return the other tabs.  For
    example, use `index=0` to return the first found tab, use `index=1` to
    return the second found tab, etc.

    See also [Hom:hou.ui#paneTabOfType].

::`currentTab(self)` -> [Hom:hou.PaneTab]:
    #cppname: HOM_Pane::currentTab
    Return the currently focused pane tab.

    See also [Hom:hou.PaneTab#setIsCurrentTab].

::`createTab(self, type)` -> [Hom:hou.PaneTab]:
    #cppname: HOM_Pane::createTab
    Create a new pane tab with the desired type and return it.  The new pane
    tab will be current (i.e. it will be the pane tab that's open).

::`splitHorizontally(self)` -> [Hom:hou.Pane]:
    #cppname: HOM_Pane::splitHorizontally
    #replaces: Cmd:pane
    Split the pane, adding a new pane to the right, and return the new pane.
    The new pane will have a single tab whose type is the same as the type of
    this pane's current tab.

    See also [Hom:hou.Pane#splitVertically].

::`splitVertically(self)` -> [Hom:hou.Pane]:
    #cppname: HOM_Pane::splitVertically
    #replaces: Cmd:pane
    Split the pane, adding a new pane to the bottom, and return the new pane.
    The new pane will have a single tab whose type is the same as the type of
    this pane's current tab.

    See also [Hom:hou.Pane#splitHorizontally].

::`desktop(self)` -> [Hom:hou.Desktop] or `None`:
    #cppname: HOM_Pane::desktop
    Return the desktop in which this pane exists, or `None` if it is in
    a floating panel that's not attached to the desktop.

::`isMaximized(self)` -> `bool`:
    #cppname: HOM_Pane::isMaximized
    Return `True` if this pane is maximized.

::`setIsMaximized(self, on)`:
    #cppname: HOM_Pane::setIsMaximized
    Set the maximized state of this pane.

::`showsPaneBar(self)`:
    #cppname: HOM_Pane::showsPaneBar
    #status: ni

::`showPaneBar(self, on)`:
    #cppname: HOM_Pane::showPaneBar
    #status: ni

::`sendKey(self, hotkey_name)`:
    #cppname: HOM_Pane::sendKey
    #status: ni

::`swapWithPane(self, pane)`:
    #cppname: HOM_Pane::swapWithPane
    #replaces: Cmd:desk
    #status: ni

::`getSplitParent(self)` -> [Hom:hou.Pane] or `None`:
    #cppname: HOM_Pane::getSplitParent
    #replaces: Cmd:split
    Return the parent split pane if the Pane is nested under a split.

::`getSplitChild(self,index)` -> [Hom:hou.Pane] or `None`:
    #cppname: HOM_Pane::getSplitChild
    #replaces: Cmd:split
    Return the split child Pane at index if the Pane is a split.

::`splitSwap(self)`:
    #cppname: HOM_Pane::splitSwap
    #replaces: Cmd:split
    Swap the left and right panes of an horizontal split Pane.
    Swap the top and bottom panes of a vertical split Pane.

::`splitRotate(self)`:
    #cppname: HOM_Pane::splitRotate
    #replaces: Cmd:split
    Turn an horizontal split Pane into a vertical split Pane.

::`isSplitMinimized(self)` -> `bool`:
    #cppname: HOM_Pane::isSplitMinimized
    #replaces: Cmd:split
    Return the true if the Pane is minimized on the split.
    A split can't be minimized and maximized at the same time.
    In its default state, a split is not minimized and not maximized.

::`isSplitMaximized(self)` -> `bool`:
    #cppname: HOM_Pane::isSplitMaximized
    #replaces: Cmd:split
    Return the true if the Pane is maximized on the split.
    A split can't be minimized and maximized at the same time.
    In its default state, a split is not minimized and not maximized.

::`setIsSplitMaximized(self, on)` -> `bool`:
    #cppname: HOM_Pane::setIsSplitMaximized
    #replaces: Cmd:split
    Set the maximized state of a split.

::`isSplit(self)` -> `bool`:
    #cppname: HOM_Pane::isSplit
    #replaces: Cmd:split
    Return True if the pane is a split.

::`setSplitFraction(self,fraction)`:
    #cppname: HOM_Pane::setSplitFraction
    #replaces: Cmd:split
    Set the split fraction of the parent split.

::`getSplitFraction(self,fraction)` -> `double`:
    #cppname: HOM_Pane::getSplitFraction
    #replaces: Cmd:split
    Return the split fraction of the parent split.

::`setSplitDirection(self,dir)`:
    #cppname: HOM_Pane::setSplitDirection
    #replaces: Cmd:split
    Set the split direction of the parent split.

::`getSplitDirection(self,dir)` -> `double`:
    #cppname: HOM_Pane::getSplitDirection
    #replaces: Cmd:split
    Return the split direction of the parent split.
