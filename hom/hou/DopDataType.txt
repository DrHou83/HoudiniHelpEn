= hou.DopDataType =
#type: homclass
#cppname: HOM_DopDataType
#group: dynamics
#status: ni

"""Describes the type of data in a DOP object."""

See [Hom:hou.DopData#dataTypeObject] for a function that retrieves a
DopDataType instance from a [Hom:hou.DopData] instance.  Note that not all
DOP data type names have a corresponding DopDataType instance.

@methods

::`name(self)`:
    #cppname: HOM_DopDataType::name
    #status: ni
    Return the name of this data type.

    {{{
    #!pycon
    >>> obj = hou.node("/obj/AutoDopNetwork").simulation().objects()[0]
    >>> obj.dataTypeObject().name()
    'SIM_Object'
    }}}

::`nodeType(self)` -> [Hom:hou.NodeType]:
    #cppname: HOM_DopDataType::nodeType
    #replaces: Cmd:dopdatatypes
    #status: ni
    Return the DOP node type that creates this DOP data type.
    {{{
    #!pycon
    >>> hou.dop.findDataType("SIM_SDF").nodeType()
    <hou.NodeType for Dop volume>
    }}}

::`allowedChildData(self)` -> tuple of [Hom:hou.DopDataType]:
    #cppname: HOM_DopDataType::allowedChildData
    #replaces: Cmd:dopdatahint
    #status: ni
    Return a tuple of DopDataTypes that are allowed to be attached as subdata
    to instances of this data type.

    These allowed child data types give hints to Houdini to prevent you from
    accidentally building DOP networks that attach DOP data to the wrong
    location.  Houdini will validate the network and flag possible mistakes
    when the "Provide Data Hints" option is on.

    Houdini also uses this information to decide how many data inputs to
    display on DOP nodes and how to label those inputs.

    The default data hints are stored in `$HFS/houdini/scripts/dophints.cmd`.

    See also [Hom:hou.DopDataType#maxNumAllowedChildData] and
    [Hom:hou.DopDataType#allowedChildDataName].

::`maxNumAllowedChildData(self, type)` -> `int` or `None`:
    #cppname: HOM_DopDataType::maxNumAllowedChildData
    #replaces: Cmd:dopdatahint
    #status: ni
    Given a DopDataType, return the maximum number of allowed children of
    that type, or `None` if there is no maximum.  If the type is not allowed
    at all, return 0.

    See also [Hom:hou.DopDataType#allowedChildData] and
    [Hom:hou.DopDataType#allowedChildDataName].

::`allowedChildDataName(self, type)` -> `str` or `None`:
    #cppname: HOM_DopDataType::maxNumAllowedChildData
    #replaces: Cmd:dopdatahint
    #status: ni
    Given a DopDataType, return what any subdata of that type must be named,
    or `None` if there is no name restriction.

    See also [Hom:hou.DopDataType#allowedChildData] and
    [Hom:hou.DopDataType#maxNumAllowedChildData].

::`addAllowedChildData(self, dop_data_type, max_num=None, child_name=None)`:
    #cppname: HOM_DopDataType::addAllowedChildDataType
    #replaces: Cmd:dopdatahint
    #status: ni
    Allow a DOP data type to be a child of this one, with possible restrictions.

    `max_num`:
        If not `None`, the maximum allowed number of children of this type.
        If `None`, there is no maximum.

    `child_name`:
        If not `None`, the subdata must have this name when added as a child.
        If `None`, there are no name restrictions.

    See [Hom:hou.DopDataType#allowedChildData] for more information.

::`removeAllowedChildData(self, dop_data_type)`:
    #cppname: HOM_DopDataType::removeAllowedChildDataType
    #replaces: Cmd:dopdatahint
    #status: ni
    No longer allow a particular DOP data type to be a child of this one.  See
    [Hom:hou.DopDataType#allowedChildData] and
    [Hom:hou.DopDataType#addAllowedChildData] for more information.

