= hou.parm =
#type: homfunction
#cppname: hom::parm
#group: parms

"""Given a path string, return a Parm object.  Return None if the path
does not refer to a parameter."""

:usage: `parm(path)` -> [Hom:hou.Parm] or `None`

If the path starts with a `/`, Houdini will look for a parameter with
that exact path.  Otherwise, the Houdini searches relative to the current node
path.  For each occurrence of `..` in the path, Houdini will move up one node
from the current node location.

{{{
#!pycon
>>> node = hou.node("/obj").createNode("geo")
>>> node.path()
'/obj/geo1'
>>> hou.parmTuple("/obj/geo1/t")
<hou.ParmTuple t in /obj/geo1>
>>> hou.parmTuple("/obj/geo1/t")[0]
<hou.Parm tx in /obj/geo1>
>>> hou.parm("/obj/geo1/tx")
<hou.Parm tx in /obj/geo1>
>>> hou.setPwd(node)
>>> hou.parm("t")
<hou.Parm tx in /obj/geo1>
}}}

Raises [Hom:hou.NotAvailable] if you call it from MPlay.

@related

- [Hom:hou.Parm]
- [Hom:hou.evalParm]
- [Hom:hou.parmTuple_]

@replaces

- [Exp:ch]
- [Exp:chs]
- [Exp:chexist]

