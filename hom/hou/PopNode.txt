= hou.PopNode =
#type: homclass
#cppname: HOM_PopNode
#superclass: hou.Node
#group: nodes

"""Represents a particle node."""

@methods

::`bypass(self, on)`:
    #cppname: HOM_PopNode::bypass

    Turns this node's bypass flag on or off, making this node have no effect.

::`curPoint(self)` -> [Hom:hou.Point]:
    #cppname: HOM_PopNode::curPoint

    Returns the current point, equivalent to the `$PT` local variable.
    This function only works on a node that has a `$PT` local variable, and
    only when the node is being cooked.

::`displayNode(self)` -> Node:
    #cppname: HOM_PopNode::displayNode
    #status: nd

::`eventTime(self, event_name)`:
    #cppname: HOM_PopNode::eventTime
    #status: ni

::`geometry(self)` -> Geometry:
    #cppname: HOM_PopNode::geometry
    #status: ni

::`isBypassed(self)` -> `bool`:
    #cppname: HOM_PopNode::isBypassed

    Returns whether this node's bypass flag is on.

::`isDisplayFlagSet(self)` -> `bool`:
    #cppname: HOM_PopNode::isDisplayFlagSet

    Returns whether this node's display flag is on.

::`isEventOccurring(self, event_name)` -> bool:
    #cppname: HOM_PopNode::isEventOccurring
    #status: ni

::`isRenderFlagSet(self)` -> `bool`:
    #cppname: HOM_PopNode::isRenderFlagSet

    Returns whether this node's render flag is on.

::`isTemplateFlagSet(self)` -> `bool`:
    #cppname: HOM_PopNode::isTemplateFlagSet

    Returns whether the template flag on this node is on.

::`renderNode(self)` -> Node:
    #cppname: HOM_PopNode::renderNode
    #status: nd

::`setDisplayFlag(self, on)`:
    #cppname: HOM_PopNode::setDisplayFlag

    Turn this node's display flag on or off.

::`setRenderFlag(self, on)`:
    #cppname: HOM_PopNode::setRenderFlag

    Turns this node's render flag on or off.

::`setTemplateFlag(self, on)`:
    #cppname: HOM_PopNode::setTemplateFlag

    Sets this node's template flag on or off.

@replaces

- [Cmd:opget]
- [Cmd:opset]
- [Exp:opflag]
- [Exp:popevent]
- [Exp:popeventtime]
- [Exp:poppoint]
- [Exp:poppointid]
- [Exp:poppointnum]











