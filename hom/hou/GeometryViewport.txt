= hou.GeometryViewport =
#type: homclass
#cppname: HOM_GeometryViewport
#group: view


@methods

== Viewport framing ==

::`home(self)`:
    #cppname: HOM_GeometryViewport::home
    #status: nd

::`homeAll(self)`:
    #cppname: HOM_GeometryViewport::homeAll
    
    Homes the viewport on all geometry objects.

::`homeSelected(self)`:
    #cppname: HOM_GeometryViewport::homeSelected

    Homes the viewport on the selected geometry.

::`homeGrid(self)`:
    #cppname: HOM_GeometryViewport::homeGrid

    Homes the viewport on the grid.

::`homeNonTemplated(self)`:
    #cppname: HOM_GeometryViewport::homeNonTemplated

    Homes the viewport on all non-templated geometry.

::`frameAll(self)`:
    #cppname: HOM_GeometryViewport::frameAll

    Frames the viewport on all geometry objects.

::`frameBoundingBox(self, bbox)`:
    #cppname: HOM_GeometryViewport::frameBoundingBox

    Frames the viewport on giving bounding box

::`frameSelected(self)`:
    #cppname: HOM_GeometryViewport::frameSelected

    Frames the viewport on the selected geometry.

::`frameGrid(self)`:
    #cppname: HOM_GeometryViewport::frameGrid

    Frames the viewport on the grid.

::`frameNonTemplated(self)`:
    #cppname: HOM_GeometryViewport::frameNonTemplated

    Frames the viewport on all non-templated geometry.

::`viewTransform(self)`:
    #cppname: HOM_GeometryViewport::viewTransform

    Returns the transform matrix of the viewport.

::`viewPivot(self)`:
    #cppname: HOM_GeometryViewport::viewPivot

    Returns the pivot of the viewport.


== Cameras ==

::`camera(self)` -> ObjNode or None:
    #cppname: HOM_GeometryViewportSettings::camera

    Return the camera or light node that the viewport is looking through.
    Return None if the viewport is not looking through a camera or light node.

::`saveViewToCamera(self, camera_node)`:
    #cppname: HOM_GeometryViewport::saveViewToCamera

    Saves the viewport's current view into the given camera node.  It does this
    by setting the camera's transform parameters to match the viewport's view
    transform matrix.

::`setCamera(self, camera_node)`:
    #cppname: HOM_GeometryViewport::setCamera

    Makes the viewport look through the given camera node.

::`defaultCamera(self)` -> `hou.GeometryViewportCamera`:
    #cppname: HOM_GeometryViewport::defaultCamera
    
    Query the current camera settings of the viewport. This may be the settings applied by an object if the viewport is looking through a camera (or light).

::`setDefaultCamera(self, cam_settings)`:
    #cppname: HOM_GeometryViewport::setDefaultCamera
    
    Set the current camera settings of the viewport to the settings stored in `cam_setting`. If the viewport is looking through a camera and the view is not locked to the camera, it will be switched to "No camera".  If the view is locked to the camera, the camera object will be updated instead.
 
::`useDefaultCamera(self)`:
    #cppname: HOM_GeometryViewport::useDefaultCamera
    
    Set the viewport camera to "No camera" and stop looking through a camera object (or light).


::`draw(self)`:
    #cppname: HOM_GeometryViewport::draw

    Request that the viewport redraw. Multiple `draw()` calls within the same script will be merged into a single call.

== Settings ==

::`isOpen(self)`:
    #cppname: HOM_GeometryViewport::isOpen
    #status: ni

::`name(self)` -> `str`:
    #cppname: HOM_GeometryViewport::name

    Query of the name of the viewport (`persp1`, `top1`, etc).

::`changeName(self, str)`:
    #cppname: HOM_GeometryViewport::changeName

    Set the name of the viewport. 

::`settings(self)` -> [Hom:hou.GeometryViewportSettings]:
    #cppname: HOM_GeometryViewport::settings

    Set the name of the viewport. Setting the name does not affect its type, so naming a perspective view `front` will be confusing. This is best used in conjunction with `changeType()`. 

::`type(self)` -> [Hom:hou.geometryViewportType] enum value:
    #cppname: HOM_GeometryViewport::type

    Query the viewport type (UV, 3D, top, left, etc).
 
::`changeType(self, [Hom:hou.geometryViewportType])`:
    #cppname: HOM_GeometryViewport::changeType

    Set the viewport type ([Hom:hou.geometryViewportType]). 
 
 
== Selection ==

::`queryNodeAtPixel(self, x, y)` -> [Hom:hou.ObjNode], [Hom:hou.SopNode], or `None`:
    #cppname: HOM_GeometryViewport::queryNodeAtPixel

    Return the node draw at the specified pixel in the viewport, or `None` if
    there is nothing there.  The type of node returned depends on the level of
    the viewer.

::`queryPrimAtPixel(self, node, x, y)` -> [Hom:hou.Prim] or `None`:
    #cppname: HOM_GeometryViewport::queryPrimAtPixel

    Return the primitive drawn at the specified pixel in the viewport, or
    `None` if there is nothing there.  The primitive returned will be a
    subclass of [Hom:hou.Prim].

    The parameter node is used to restrict the query to geometry within a
    particular node. If node is None, then the query is unrestricted.

::`queryInspectedGeometry(self)` -> [Hom:hou.Geometry] or `None`:
    #cppname: HOM_GeometryViewport::queryInspectedGeometry

    Return the geometry currently being inspected in the viewport, or `None`
    when nothing is being inspected or when called outside of an inspect
    script.

::`queryInspectedPrim(self)` -> [Hom:hou.Prim] or `None`:
    #cppname: HOM_GeometryViewport::queryInspectedPrim

    Return the primitive currently being inspected in the viewport, or `None`
    when nothing is being inspected or when called outside of an inspect
    script.  The primitive returned will be a subclass of [Hom:hou.Prim].

::`mapToScreen(self, position)` -> [Hom:hou.Vector2]:
    #cppname: HOM_GeometryViewport::mapToScreen

    Convert world coordinates to viewport coordinates.

    `position`:
        A [Hom:hou.Vector3] containing a world space position.

::`mapToWorld(self, x, y)` -> tuple of ([Hom:hou.Vector3], [Hom:hou.Vector3]):
    #cppname: HOM_GeometryViewport::mapToWorld

    Convert viewport coordinates to world coordinates. Returns a ray (direction
    vector and an origin point).

::`mapFromMouseChop(self, x, y)` -> tuple of (int, int):
    #cppname: HOM_GeometryViewport::mapFromMouseChop

    Convert from the Mouse CHOP's X and Y screen values (which range from `-1`
    to `1`) to viewport coordinates, where `(0,0)` is the bottom left corner of
    the viewport.


@replaces

- [Cmd:viewcamera]
- [Cmd:viewhome]
- [Cmd:viewwrite]

