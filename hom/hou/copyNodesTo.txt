= hou.copyNodesTo =

#type: homfunction
#cppname: hom::copyNodesTo
#group: nodes

"""Copy all given nodes to a new place in node hierarchy."""

:usage: `copyNodesTo(nodes, destination_node) -> tuple of Nodes`

The nodes to be copied should be a sequence of hou.Node objects. The
destination node will be the parent of new copied nodes. The type of all
source nodes should match the destination node child type.

This function returns a tuple of hou.Node objects corresponding to the
copied nodes.

Nodes will be copied to the destination in batches based on their
parent. All the nodes in a batch will be copied at the same time. This
way, any relative channel references between nodes with the same parent
will be updated to reflect the copied node location. Batches themselves
will be copied sequentially. Thus, channel references between nodes with
different parents will not be updated in copies.

For every copied node, if a node with the same name already exists at
the destination, the copy will be renamed. Any relative channel
references to the copy will be updated with the new copy name.

This function will raise a hou.OperationFailed exception if any of the
nodes to be copied are of invalid type, the destination node cannot be
copied into, or source node type does not match the destination node
child type.

This function will raise hou.ObjectWasDeleted if any of source nodes or
the destination node no longer exist in Houdini.

All of the above issues with source and destination nodes will be
reported before copying starts to avoid partial copy.

After the function finishes execution, all the new nodes created by it
will be selected.

@replaces
    - [Cmd:opcp]

