= hou.viewportVisualizers =
#type: hommodule
#cppname: HOM_viewportVisualizers
#group: view

"""Module containing viewport visualizer functionality."""

@functions

::`visualizers(category=hou.viewportVisualizerCategory.Common, node=None)` -> tuple of [Hom:hou.ViewportVisualizer]:
    #cppname: HOM_viewportVisualizers::visualizers
    Return a tuple of viewport visualizers registered with Houdini for the given category.
    
    The `category` argument must be a [Hom:hou.viewportVisualizerCategory] enum value.  If the category is set to Node, then the `node` argument must be specified.
    
    Raise [Hom:hou.TypeError] if the category is set to Common or Scene and the `node` argument is also set.
    Raise [Hom:hou.TypeError] if the category is set to Node and the `node` argument is set to None.

::`createVisualizer(type, category=hou.viewportVisualizerCategory.Common, node=None)` -> [Hom:hou.ViewportVisualizer]:
    #cppname: HOM_viewportVisualizers::createVisualizer
    Create a new viewport visualizer for the specified type.
    
    The `type` argument must be a [Hom:hou.ViewportVisualizerType].  You can retrieve a visualizer type by calling [Hom:hou.viewportVisualizers#types] or [Hom:hou.viewportVisualizers#type].

    The `category` argument must be a [Hom:hou.viewportVisualizerCategory] enum value.  If the category is set to Node, then the `node` argument must be specified.
    
    Raise [Hom:hou.TypeError] if the category is set to Common or Scene and the `node` argument is also set.
    Raise [Hom:hou.TypeError] if the category is set to Node and the `node` argument is set to None.

::`copyVisualizer(source)` -> [Hom:hou.ViewportVisualizer]:
    #cppname: HOM_viewportVisualizers::copyVisualizer
    Create a duplicate of the specified source visualizer.

::`types()` -> tuple of [Hom:hou.ViewportVisualizerType]:
    #cppname: HOM_viewportVisualizers::types
    Return a tuple of visualizer types registered with Houdini.

::`type(name)` -> [Hom:hou.ViewportVisualizerType]:
    #cppname: HOM_viewportVisualizers::type
    Return the visualizer type registered with the specified name.  Return None
    if no such type exists.

::`isCategoryActive(category, node=None, viewport=None)` -> `bool`:
    #cppname: HOM_viewportVisualizers::isCategoryActive
    Return True if the visualizer category is active and False otherwise.  For Common and Scene categories return True if it is active for the specified viewport.  The `viewport` argument must be a [Hom:hou.GeometryViewport].
    
    Raise [Hom:hou.TypeError] if `category` is set to Common or Scene and the `node` argument is also set.
    Raise [Hom:hou.TypeError] if `category` is set to Node and the `node` argument is set to None.
    Raise [Hom:hou.TypeError] if both the `node` and `viewport` arguments are set.  Node visualizers are either active in all viewports or none of them.  They cannot be activated for a specific viewport.

::`setIsCategoryActive(on, category, node=None, viewport=None)` -> `bool`:
    #cppname: HOM_viewportVisualizers::setIsCategoryActive
    Set the activation state of the specified visualizer category.  For Common and Scene categories the activation state must be set for a specific viewport.  The `viewport` argument must be a [Hom:hou.GeometryViewport].
    
    Raise [Hom:hou.TypeError] if `category` is set to Common or Scene and the `node` argument is also set.
    Raise [Hom:hou.TypeError] if `category` is set to Node and the `node` argument is set to None.
    Raise [Hom:hou.TypeError] if both the `node` and `viewport` arguments are set.  Node visualizers are either active in all viewports or none of them.  They cannot be activated for a specific viewport.
