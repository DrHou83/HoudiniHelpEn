= hou.ShelfElement =
#type: homclass
#cppname: HOM_ShelfElement
#group: shelf
#status: nd

"""Superclass of shelf tools, shelf tabs, and shelf sets."""

@methods

::`setFilePath(self, file_path)`:
    #cppname: HOM_ShelfElement::setFilePath

    Sets the path string for where this object's definition is stored.

::`filePath(self)` -> `str`:
    #cppname: HOM_ShelfElement::filePath
    
    Returns the file that contains the definition of this object.

::`setName(self, name)`:
    #cppname: HOM_ShelfElement::setName

    Sets this object's internal name. This is how you refer to the object in
    scripts.
    
    The name has similar rules to naming Houdini nodes: it must not
    start with a number, and can only contain letters, numbers, an underscores.
    
    For example, if a Tool objects name is `foo`, you can get a reference
    to it using:
    
    {{{
    #!python
    footool = shelves.tool("foo")
    }}}

::`name(self)` -> `str`:
    #cppname: HOM_ShelfElement::name

    Returns the internal name of this object.
    
    Multiple objects may have the same name (for example, two
    different assets might both provide a `hammer` tool), but only one will
    be active at a time in a Houdini session.

::`setLabel(self, label)`:
    #cppname: HOM_ShelfElement::setLabel

    Sets the object's human-readable label. This is what's displayed in the
    UI.

::`label(self)` -> `str`:
    #cppname: HOM_ShelfElement::label
    
    Returns the object's human-readable label.

::`setReadOnly(self, on)`:
    #cppname: HOM_ShelfElement::setReadOnly
    
    {{{
    # Get a reference to a tool
    t = hou.shelves.tool("geometry_sphere")
    # Prevent the tool from being modified
    t.setReadOnly(True)
    # Allow the tool to be modified
    t.setReadOnly(False)
    }}}

::`isReadOnly(self)` -> `bool`:
    #cppname: HOM_ShelfElement::isReadOnly
    
    Returns `True` if the element is read-only (can't be edited).

