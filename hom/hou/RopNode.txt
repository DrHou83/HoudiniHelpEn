= hou.RopNode =
#type: homclass
#cppname: HOM_RopNode
#superclass: hou.Node
#group: rendering

"""Represents a render output node."""

@methods

::`bypass(self, on)`:
    #cppname: HOM_RopNode::bypass
    Turns the node's bypass flag on or off, making this node have no effect.

::`inputDependencies(self)` -> (tuple of [Hom:hou.RopNode], tuple of tuples of `float`):
    #cppname: HOM_RopNode::inputDependencies
    Returns the input dependencies of the ROP node, consisting of ROPs, and
    the frames that need to be be rendered prior to rendering the ROP.
    
    This method returns a tuple of two elements:
    
    - The first element is a sequence of the [Hom:hou.RopNode] objects 
      representing the input dependencies.
    
    - The second element is a sequence, where each element corresponds to the
      RopNode object at the same position in the first sequence, and is a
      sequence of floats representing the frames that must be rendered for the
      corresponding RopNode.

::`isBypassed(self)` -> `bool`:
    #cppname: HOM_RopNode::isBypassed
    Returns whether this node's bypass flag is on.

::`isLocked(self)` -> `bool`:
    #cppname: HOM_RopNode::isLocked
    Returns whether this node's lock flag is on.

::`setLocked(self, on)`:
    #cppname: HOM_RopNode::setLocked
    #replaces: Exp:opset
    Turn this node's lock flag on or off.  Locking an output node will
    make this node and all of its parent nodes not render as a part of the
    dependency graph.
    
::`render(self, frame_range=(), res=(), output_file=None, output_format=None, to_flipbook=False, quality=2, ignore_inputs=False, method=RopByRop, ignore_bypass_flags=False, ignore_lock_flags=False, verbose=False, output_progress=False)`:
    #cppname: HOM_RopNode::render
    Renders this node and optionally any of its inputs.  Inputs are
    recursively processed (unless `ignore_inputs` is `True`), so that all
    descendents are rendered in the proper order before this node is
    rendered.

    frame_range:
        Sequence of 2 or 3 values, overrides the frame range and frame increment
        to render. The first two values specify the start and end frames, and
        the third value (if given) specifies the frame increment. If no frame
        increment is given and the ROP node doesn't specify a frame increment,
        then a value of 1 will be used. If no frame range is given, and the ROP
        node doesn't specify a frame range, then the current frame will be
        rendered.

    res:
        Sequence of two scaling factors that will be used to scale the
        resolution of the image, along the x- and y-axes. The
        scaling factors will be applied to the node and all dependencies that
        are also rendered.

    output_file:
        Overrides the location to which the image is written.

    output_format:
        Overrides the format of the image.

    to_flipbook:
        If `True`, renders this node to a flipbook.

    quality:
        Overrides the render quality.

    ignore_inputs:
        If `True`, renders only this node (does not render any of its
        dependencies).
        
    method:
        Either `hou.renderMethod.RopByRop` or `hou.renderMethod.FrameByFrame`.
        The default is ROP by ROP: each ROP will render its entire sequence
        before proceeding to the next ROP. If you specify FrameByFrame, all ROPs
        will render the first frame, then the second, etc.
        
        This parameter is only relevant when rendering ROPs in a dependency
        network.

    ignore_bypass_flags:
        If `True`, renders this node even if its bypass flag is on.

    ignore_lock_flags:
        If `True`, ignores any lock flags on this node and its dependencies.

    verbose:
	If `True`, then the method will print messages during the render.
	For example, a message is printed when each frame starts rendering.

    output_progress:
	If `True`, then the method will print Alfred-style progress messages.
	This argument does not apply if the `verbose` argument is set 
	to `False`.

::`setLocked(self, on)`:
    #cppname: HOM_RopNode::setLocked
    Sets this node's lock flag on or off. The lock flag caches the node's data
    and the data from its inputs and prevents them from being recalculated
    during cooking.

@replaces

- [Cmd:opset]
- [Cmd:render]
- [Exp:opflag]
- [Cmd:opget]

