= hou.Matrix2 =
#type: homclass
#cppname: HOM_Matrix2
#group: utility

"""A 2x2 matrix of floating point values."""

@methods

::`__init__(self, values)`:
    #cppname: HOM_Matrix2::HOM_Matrix2
    #replaces: Exp:matrix
    Return a new Matrix2.  You can pass no parameters (the result will contain
    all zeros), a float (the result's diagonal values will contain that float
    and the rest is all zeros), a sequence of 4 floats, or a sequence of
    sequences of 2 floats.

    {{{
    #!pycon
    >>> hou.Matrix2()
    <hou.Matrix2 [[0, 0], [0, 0]]]>

    >>> hou.Matrix2(1)
    <hou.Matrix2 [[1, 0], [0, 1]]>

    >>> hou.Matrix2((0, 1, 2, 3))
    <hou.Matrix2 [[0, 1], [2, 3]]>

    >>> hou.Matrix2(((0, 1), (3, 4)))
    <hou.Matrix2 [[0, 1], [2, 3]]>
    }}}

    Note that Houdini's matrices are stored in row-major order, so the matrix's
    contents are grouped by row.

::`isAlmostEqual(self, matrix2, tolerance=0.00001)` -> `bool`:
    #cppname: HOM_Matrix2::isAlmostEqual
    Returns whether this matrix is equal to another, within a
    tolerance.

::`at(self, row, col)` -> `double`:
    #cppname: HOM_Matrix2::at
    Return the value of the matrix at the given row and column.

    Raises IndexError if the row or column are not between 0 and 1, inclusive.
    Note that negative indices will not index from the end.

::`setAt(self, row, col, value)`:
    #cppname: HOM_Matrix2::setAt
    Set the value of the matrix at the given row and column.

    Raises IndexError if the row or column are not between 0 and 1, inclusive.
    Note that negative indices will not index from the end.

::`asTuple(self)` -> `tuple` of `float`:
    #cppname: HOM_Matrix2::asTuple
    Return the contents of the matrix as a tuple of 4 floats.

::`asTupleOfTuples(self)` -> `tuple` of `tuple` of `float`:
    #cppname: HOM_Matrix2::asTupleOfTuples
    Return the contents of the matrix as a tuple of tuples of 2 floats.

::`setTo(self, tuple)`:
    #cppname: HOM_Matrix2::setTo
    Set this matrix's contents.  The sequence may contain either 4 floats
    or 2 sequences, each with 2 floats.

    See [Hom:hou.Matrix2#__init__] for examples of suitable parameter values.

::`setToIdentity(self)`:
    #cppname: HOM_Matrix2::setToIdentity
    Set this matrix to the multiplicative identity, having 1's in the diagonal.

    The matrix will contain the values
    `[[1, 0], [0, 1]]`.  Note that you can construct a new
    matrix with these values using `hou.Matrix2(1)`.

::`setToZero(self)`:
    #cppname: HOM_Matrix2::setToZero
    Set this matrix to contain all zeros.

    Note that you can construct a new matrix with all zeros with
    `hou.Matrix2()`.

::`__add__(self, matrix2)` -> [Hom:hou.Matrix2]:
    #cppname: HOM_Matrix2::__add__
    Add two matrices by adding corresponding entries together and return a new
    matrix.  This method lets you write `m1 + m2`, where `m1` and `m2` are
    Matrix2 objects.

::`__sub__(self, matrix2)` -> [Hom:hou.Matrix2]:
    #cppname: HOM_Matrix2::__sub__
    Subtract another matrix from this one, subtracting corresponding entries,
    and return a new matrix.  This method lets you write `m1 - m2`, where `m1`
    and `m2` are Matrix2 objects.

::`__mul__(self, matrix2_or_scalar)` -> [Hom:hou.Matrix2]:
    #cppname: HOM_Matrix2::__mul__
    Multiply this matrix by another matrix or by a scalar, returning a new
    matrix.  This method lets you write `m1 * m2`, where `m1` and `m2` are
    Matrix2 objects, or `m1 * s`, where `s` is a float.

    See [Wikipedia's matrix multiplication
    page|Wp:Matrix_multiplication] for details on how
    each element in the result is computed.

::`preMult(self, matrix2)` -> [Hom:hou.Matrix2]:
    #cppname: HOM_Matrix2::preMult
    Returns `matrix2 * self`.  Note that `__mul__` returns `self * matrix2`,
    which is a different result because matrix multiplication is not
    commutative.

::`transposed(self)` -> [Hom:hou.Matrix2]:
    #cppname: HOM_Matrix2::transposed
    Return the transpose of this matrix.  The result is such that
    `self.at(i, j) == self.transposed().at(j, i)` for `0 <= i,j <= 1`.

    See [Wikipedia's transpose page|Wp:Transpose]
    for more information.

::`inverted(self)` -> [Hom:hou.Matrix2]:
    #cppname: HOM_Matrix2::inverted
    Return the inverse of this matrix.

    Raises [Hom:hou.OperationFailed] if the matrix is not invertible.
    Otherwise,
    `(self * self.inverted()).isAlmostEqual(hou.Matrix2(1))` is True.

    See [Wikipedia's invertible matrix
    page|Wp:Invertible_matrix] for more information.

::`determinant(self)` -> `double`:
    #cppname: HOM_Matrix2::determinant
    Return the determinant of the matrix.

    See [Wikipedia's determinant page|Wp:Determinant].
