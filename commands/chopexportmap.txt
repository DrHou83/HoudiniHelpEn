#type: hscript

= chopexportmap =

"""Manipulates CHOP export mapping overrides."""

:usage: `chopexportmap -l [-o] <<chop_path>> [<<track_pattern>>]`
:usage: `chopexportmap -c <<chop_path>> [<<track_pattern>>]`
:usage: `chopexportmap -s <<chop_path>> <<track_name>> <<overrides...>>`

This command manipulates CHOP export mapping overrides. These provide
a mapping from CHOP tracks and the node parameters that they override.

`-l`:
    This option lists the current mappings. A track pattern can be
    given if only specific tracks are desired. If the -o option is
    also given of this usage, then the opscript friendly version of
    the chop is output instead.
    
`-c`:
    This option clears (ie. erases) the mappings for the specified
    track pattern. If no track pattern is given, all mappings are
    cleared.
    
`-s`:
    This option sets the mapping for the given chop and track name.
    <overrides...> is a list of operator patterns that the specified
    track is to override.

@examples

{{{
#!hscript
chopexportmap -l /ch/ch1/wave1
}}}

List all export mappings of the chop `/ch/ch1/wave1`.

{{{
#!hscript
chopexportmap -c /ch/ch1/wave1
}}}

Clear all export mappings of the chop `/ch/ch1/wave1`.

{{{
#!hscript
chopexportmap -c /ch/ch1/wave1 c*
}}}

Clear export mappings of the chop `/ch/ch1/wave1` for tracks
that begin with the letter `c`.

{{{
#!hscript
chopexportmap -s /ch/ch1/wave1 chan1 /obj/model/t?
}}}

Make the chan1 track of the chop `/ch/ch1/wave1` override all
the parameters of `/obj/model` matching the pattern `t?`.

