= objlightlink =

#type: hscript

"""Manages object light category selection in a light-centric way."""

This command will provide linking information for a single light source.  The command presents a chooser with all the objects in the scene, and shows which objects are lit by the specified light source.

This command uses the __Categories__ parameter on light sources in conjunction with the __Light Categories__ parameter on objects.  The effect of the __Light Mask__ parameter is ignored by this chooser.

NOTE:
        This linking will also detected any [Packed Edit SOPs|Node:sop/packededit] and apply linking selection on a per-primitive level.

:usage: `objlightlink [-T title] <<lightname>>`
:usage: `objlightlink [-T title] -t <<tag_name>>`
:usage: `objlightlink -o <<objectname>> [packed_path]`
:usage: `objlightlink -e <<filename>> [-l] [-o] [-s]`
:usage: `objlightlink -i <<filename>> [-l] [-o] [-s]`

This command has four usages.  The first (and most common) usage specifies the path to a light source.  With this usage, the "linking" tag for the light source will be generated if it doesn't exist.  The "linking" tag is a category tag which is prefixed with `lb:`.  This tag will be used to determine the objects selected (lit) in the chooser.

The second usage is where the tag is specified specifically using the `-t` option.  This can be used if you have manually added tags to light sources. Since selection is based on tags, this will apply to multiple lights if the tag is shared between light sources.

The third usage provides an object-centric view of linking information.  When run in this mode, the list of all lights in the scene will be displayed.  Changing the light selection will adjust the linking information for the given `objectname`.  When the given object has packed primitives, you can optionally specify a packed primitive path for finer grained control.

The command can also be used to export and import light linking information.  The `-e` option will save the lighting information for the scene in the given file.  If the filename is `stdout`, the information will be written to stdout.  This lighting information can be imported into other scenes using the `-i` option.

When exporting or importing lighting, the `-l`, `-o`, and `-s` options disable processing of specific lighting information.

- `-l`:  Don't export/import light objects.
- `-o`:  Don't export/import geometry object properties (materials, light linking).
- `-s`:  Don't export/import [Packed Edit SOPs|Node:sop/packededit] (visibility, materials, light linking).

@examples

{{{
#!hscript

# Perform linking for /obj/pointlight1
objlightlink /obj/pointlight1

# Perform linking for all the light sources that have the "fill" tag
objlightlink -t fill

# Perform object-centric linking for the geometry object "geo1"
objlightlink -o /obj/geo1

# Perform object-centric linking for the packed primitive
# "/alembic/char_master/superhero" inside object "geo1"
objlightlink -o /obj/geo1 /alembic/char_master/superhero

# Export lighting information for the current scene
objlightlink -e $HIP/lighting.json

# Import only the light objects (no materials or light linking)
objlightlink -i $HIP/lighting.json -o -s

}}}
