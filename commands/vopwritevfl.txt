#type: hscript

= vopwritevfl =

"""Writes code generated from a VOP network to a file."""

:usage: `vopwritevfl [-s] [-c <<context_name>>] <<vop_node>> <<vfl_file>>`

<<vop_node>> is a node path to a VOP node, a VOPNET node, or a SHOP containing
a vop network.

<<vfl_file>> is a file path for the generated VEX source code.

@options

`-s`:
    (Skip) Do not write the file header.
    The file header is a comment that contains information about the
    file name, original node name from which the code was generated, 
    and a time stamp at which the code was written out.

`-c <<context_name>>`:
    The name of the shader context for the code. This option applies to
    nodes such as the [Material Shader Builder|Node:shop/vopmaterial] which 
    can generate code for multiple context types.
    
    For example, a Material network might contain both surface and displacement
    shaders, so you must specify which type of shader code to generate using
    this command:
    
    {{{
    #!hscript
    vopwritevfl /shop/vopmaterial1 -c surface
    }}}

    For single-context nodes, this argument is ignored.
    
    For VEX materials, possible values are `surface`, `displacement`, `light`,
    `shadow`, `fog`, `image3d`, `photon`, or `cvex`.
    
    For RSL materials, possible values are `surface`, `displacement`, `light`,
    `volume`, or `imager`.

@examples

{{{
#!hscript
vopwritevfl /vex/surface1 $HIH/vex/Surface/surface1.vfl
}}}

Write the surface1 VFL code to the proper VEX subdirectory for VEX
Surface shaders.

{{{
#!hscript
vopwritevfl /shop/vopmaterial1 -s -c displacement $HOME/disp.vfl
}}}

Write the displacement shader vfl code provided by the vop material,
and skip the file header comment.

