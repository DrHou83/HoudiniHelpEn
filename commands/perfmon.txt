#type: hscript

= perfmon =

"""Enable output from the performance monitor."""

For more complete control of the interactive performance monitor output, look
at the `performance` command.

:usage: `perfmon [-s] [-o stdout|stderr|off] [-t all|ms|sec] [-e <<event_name>>] [-m <<event_name>>] [-f <<event_id>>]`

@options
    `-e`:
        Start a new event with the given event name.  The performance monitor will time the event.  Return the event's id or -1 if the event could not be started (this can happen if the performance monitor is currently not in record mode).
    `-f`:
        Stop timing an event.  The event is specified by its id which is returned when running the perfmon command with the `-e` option.
    `-m`:
        Start a new event with the given event name.  The performance monitor will record the increase in memory usage from when the event was started and when it was stopped.  Return the event's id or -1 if the event could not be started (this can happen if the performance monitor is currently not in record mode).

        NOTE:
            If the `-e` and `-m` options are both specified, then the `-e` option takes precedence and the `-m` option is ignored.

    `-s`:
        Display the current perfmon settings. 
    `-o stdout|stderr|off`:
        Set the performance monitor output type.
    `-t all|ms|sec`:
        Set the timing output format.

@examples
    Enable logging to stdout and display times in milliseconds.
    {{{
    #!hscript
    perfmon -o stdout -t ms
    }}}

    Time an hscript event.
    {{{
    #!hscript

    # Start a new timed event.
    set event_id=`run("perfmon -e 'My Hscript Code'")`

    # PLACE HSCRIPT COMMANDS HERE.
    # This is the block of code that you wish to time.

    # Stop timing the event.
    perfmon -f $event_id
    }}}
