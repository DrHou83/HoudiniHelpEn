#type: hscript

= viewerinspect =

"""Gets/sets inspection options for a viewer."""

:usage: `viewerinspect <<viewer>> [<<parameter>> (<<value>> ) ...]`

With no settings, the command prints out the command that would recreate the
current inspect settings of the specified <<viewer>>.



@options
    `mode ( objects|prims|pixels )`:
        Set the inspection mode.
    `object_properties ( <<properties>> )`:
        Set which object properties are shown in the inspect window by
        supplying a space separated list of tokens.  Each token takes
        the form '+<<property>>' or '-<<property>>' or '<<property>>'
        where property is one of: bounds, groups, or script.
    `prim_properties ( <<properties>> )`:
        Set which primitive properties are shown in the inspect window by
        supplying a space separated list of tokens.  Each token takes
        the form '+<<property>>' or '-<<property>>' or '<<property>>'
        where property is one of: intrinsics, groups, materials, or script.
    `enable ( 0|1 )`:
        Enable/disable inspection.
    `magnify ( 0|1 )`:
        Enable/disable magnification of the area under the cursor.

@examples
    {{{
    #!hscript
    viewerinspect Build.panetab1.world
    }}}
    Display the inspection parameters of Build.panetab1.world.

    {{{
    #!hscript
    viewerinspect Build.panetab1.world mode ( objects ) object_properties ( bounds groups ) enable ( 1 )
    }}}
    Change the mode to objects, show only object bounds and bundle/group
    membership, and enable.

    {{{
    #!hscript
    viewerinspect Build.panetab1.world object_properties ( +script )
    }}}
    Add the display of the custom python script output without disabling any
    other object properties.
