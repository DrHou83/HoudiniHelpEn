#type: hscript

= dopdatahint =

"""Adds hints for DOP networks to validate simulations."""

:usage: `dopdatahint [-t <<child_data_type>>|-n <<child_data_name>>] [-m <<max_children>>] <<parent_data_type>>`
:usage: `dopdatahint -d`
:usage: `dopdatahint`

When you build dynamics (DOP) networks, you can create data hierarchies
that use data in unexpected ways. This is not bad if it's what you
intended, but often unusual combinations of data indicate a mistake
(that is, you attached data in one spot when you meant to attach it
somewhere else).

The `dopdatahint` command lets you build a library of meaningful
hierarchical connections in simulations ("data hints"). Once Houdini has
this information, it can decide how many data inputs to display and how
to label the inputs on DOP node tiles, as well as validate the network
and flag possible mistakes when the __Provide data hints__ option is
on.

NOTE:
    When Houdini starts up, it reads the default data hints from
    $HFS/houdini/scripts/dophints.cmd.

Use the `-t` or `-n` options to specify a valid child type/name of a
parent type. You can also use the `-m` to specify the maximum number of
children of the given type/name.


TIP:
    Use [dopdatatypes|Cmd:dopdatatypes] to print the list of valid
    DOP-related data types.

`dopdatahint` with no arguments prints the current list of data hints.
`dopdatahint -d` deletes all existing data hints.

@options
    `-t <<child_data_type>>`:
        Tell Houdini that <<child_data_type>> is a valid child type of
        <<parent_data_type>>.

    `-n <<child_data_name>>`:
        Tell Houdini that <<child_data_name>> is a valid child of
        <<parent_data_type>>.

    `-m <<max_children>>`:
        Tell Houdini to only allow up to this number of the data type
        given with `-t` or `-n` as children of <<parent_data_type>>. If
        you omit the `-m` option, Houdini allows any number of the given
        type/name.


