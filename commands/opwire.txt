#type: hscript

= opwire =

"""Connects the output of one operator to the input of another."""

:usage: `opwire [-o <<output_index>>] [-n] [-i] <<operator>> -<<input_number>> <<wire_node>> [-<<input_number>> <<wire_node>> ...]`

Connects the output <<outputidx>> of <<operator>> to input
<<input_number>> of <<wire_node>>.

@options
    `-o <<output_index>> `:
        The index of the output to connect.
    `-n`:
        Do not maintain world position when connecting objects.
    `-i`:
        The node name should be a number. In this case the "indirect
        input" of the given number will be wired. Use this to get at the
        inputs from within a subnet OP.

@examples
    {{{
    #!hscript
    opwire twist1 -0 box1
    }}}
    Will connect twist1 to the first input of box1

    {{{
    #!hscript
    opwire box1 -0 merge1 ; opwire box2 -1 merge1
    }}}
    Will connect box1 to the first input of merge1, box2 to the second
    input of merge1. It is recommended that for multiple input OPs like
    the merge SOP that the inputs are filled up consecutively.

    {{{
    #!hscript
    opwire -o 4 global1 -3 output1
    }}}
    Will connect output 4 from global1 into input 3 of output1.

    {{{
    #!hscript
    opwire -i 0 -0 box1
    }}}
    Connects the first indirect input to the first input of the box
    SOP.


