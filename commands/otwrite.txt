#type: hscript

= otwrite =

"""Saves an operator type into an operator type library file."""

:usage: `otwrite <<table>>/<<operator>> <<hda_file>> `
:usage: `otwrite [-d] [-i] [-l] [-s] [-z] [-c <<comment>>] [-v <<version>>] [-t <<type>>] -o <<path_to_examplar>> <<hda_file>> `

All the data needed to define the operator type is included in the
library. Any number of operator types can be included in a single
library.

You can specify the operator type in two ways:

* Give the operator table name and operator type name separated by a
  slash.

  The <<table>> value specifies the class of the operator you want to
  modify. A list of valid table names is found below. The <<operator>>
  value is the name of the specific operator type.

* Use the -o option to specify a path to a node (an examplar) of the
  type you want to save. If you use this method, the contents of the
  given node are made part of the operator type definition. See also the
  -d and -l options.

The <<table>> name can be:

`Object` |
    Object Operators (OBJs)
`Sop` |
    Geometry Operators (SOPs)
`Particle` |
    Particle Network Operators
`Pop` |
    Particle Operators (POPs)
`ChopNet` |
    Channel Network Operators
`Chop` |
    Channel Operators (CHOPs)
`Driver` |
    Output Operators (ROPs)
`Shop` |
    Shader Operators (SHOPs)
`Cop2` |
    Composite Operators (COP2s)
`CopNet` |
    Composite Network Operators
`Vop` |
    VEX Operators (VOPs)
`VopNet` |
    VEX Network Operators

@options
    `-d`:
        Normally, the current values of the exemplar node are used as
        the initial values for the operator type definition. This option
        makes the initial values be the parameters' defaults.
    `-i`:
        If the -i option is set with the -o option, the current values
        of the node are used as the default parameter values. This is
        equivalent to clicking the Copy Defaults From Node button in the
        Type Properties dialog.
    `-l`:
        New nodes of this type will be created with their contents
        locked, and will reference the contents defined in the operator
        definition. This option is equivalent to turning on the Save
        Contents as Locked setting in the Type Properties editor.
    `-o`:
        specify a path to a node (an examplar) of the
        type you want to save. If you use this method, the contents of the
        given node are made part of the operator type definition. See also the
        `-d` and `-l` options.
    `-s`:
	If the -s option is set with the -o option, the spare parameters of
	the node are saved to the creation script of the asset so that new
	instances of this asset will have the same spare parameters.
    `-z`:
        For subnet operator types with locked contents, compress the
        contents to reduce size on disk.
    `-m`:
        Compile the resultant asset. Note that after this operation,
        all access to contents will be lost, essentially granting it
        execute-only permissions.
    `-n`:
	Skip the creation of backup files when modifying existing operator
	type library files.
    `-c <<comment>> `:
        Sets the text comment associated with the operator type
        definition.
    `-v <<version>> `:
        Sets the version for the operator type definition.
    `-t <<type>>`:
	Write the contents of the given node but using the operator type
	specified.  This is an advanced option and should not typically be
	used.

@examples
    {{{
    #!hscript
    otwrite Sop/xform OPcustom.hda
    }}}
    
    {{{
    #!hscript
    otwrite -l -o /obj/geo1/xform1 OPcustom.hda
    }}}

@related
    - [optype|Cmd:optype]
    - [otcomment|Cmd:otcomment]
    - [otedit|Cmd:otedit]
    - [otload|Cmd:otload]
    - [otversion|Cmd:otversion]

