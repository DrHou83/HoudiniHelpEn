= Finite element |> Collisions =


* The [Finite element solver|Node:dop/finiteelementsolver] supports both volume-based (SDF) collisions and surface collisions.

    * *Surface-based collisions* are collisions between geometry such as tetrahedrons, polygons, polylines and particles.

        * Surface-based collisions are the most accurate option. They give you continuous collision detection. This means that the solver examines the trajectory of vertices between frames to see if at any time in between these frames objects intersected. This helps to ensure that collisions between fast moving objects are processed by the solver.

        * Surface-based collisions are the only choice for geometry that is deforming over time.
        
        * If you use geometry collision, it is not necessary or efficient to triangulate external geometry. However, polygons in the external geometry should not have more than 4 sides.

    * *Volume-based collisions* are collisions between primitive vertices and signed distance fields (SDFs).

        Volume-based collisions are a faster, but less accurate option. They are an efficient choice for large objects that are part of the scenery.
    
        * Does not support continuous collision detection.
    
        * Only detects collision of vertices with SDFs (not edges or faces).
    
        * Do not use with deforming or fast moving objects.
    
    You can choose whether collisions with static objects use volume collisions by turning on the __Use volume based collision detection__ parameter on a [Static object|Node:dop/staticobject].

* Solid objects can be affected by other dynamics objects such as RBDs, but can only have two-way interactions (where the solid both affects and is affected by the other object) with other finite element objects (solids and cloth).

* Finite element (solid and cloth) objects can collide with themselves, if you enable __Collide within object__ on the object's __Collisions__ tab. For quicker simulations turn self-collisions off.

* The [Deforming collider|/shelf/clothbodycollider] and [Rigid collider|/shelf/rigidcollider] tools on the __Cloth__ and __Solid__ shelf tabs set up [Static objects|Node:dop/staticobject] with the correct parameters for colliding with finite element (cloth or solid) objects.

* When a solid object or cloth object collides with a polygonal Static Object, the winding order of those polygons matters; the winding order should be such that the resulting normals point to the outside of the object. A solid object or cloth object will not collide with the interior side of a polygon of an external object. The winding order only matters when geometry-based collisions are used on the Static Object.

* There are no convexity restrictions on collision detection. Collisions work with convex and non-convex shapes.

* For better interaction with non-finite element objects, increase the sub-steps on the simulation network. This will slow down the overall simulation.

    The faster the interaction with another object, the more sub-steps you need on the simulation network.



