= Finite element |> Constraints =

* The finite element solver supports various types of constraints that you to influence and control the simulation. A common example is where the finite element simulation needs to partially follow a target animation. In addition to these target animation constraints there are constraints that may connect simulated points together, such as Fuse Constraints. Furthermore, the finite element solver supports SBD Spring constraints between points.

* Finite elements support two main types of constraints: hard and soft constraints. In the case of hard constraints, the constrained points are made to follow the prescribed target animation exactly. Soft constraints are a method of constraining that mixes simulation and animation - the constrained points do not follow the target animation exactly. You can control how closely the soft constraints follow the target animation by means of a __Target Strength__ parameter. Hard constraints have the advantage that you are guaranteed that the constrained points follow the animation exactly. When soft contraints are used, it is often necessary to try multiple different values of the __Target Strength__ before the right amount of matching is achieved. 

* The target animation may be specified in two ways. The easiest way is by pointing the __Target Deformation__ of your Solid Object or Hybrid Object to the target animation. At each solve step, the finite element solver will look up the animated geometry for you at the corresponding times. In a more advanced setup, you may you may specify a 'targetP' point attribute on the simulation geometry instead of using the __Target Deformation__. However, to animate 'targetP' over time a SOP solver will be needed in the DOP network.

* Hard constraints may be created in two ways. The easiest way is to create an Finite Element Target Constraint and set its __Type__ to HARD. You may use the Constrain Points to Target shelf tool to create an Finite Element Target Constraint. The other, more advanced option, is to create an integer point attribute that is called 'pintoanimation', all points that have the value 1 will follow the target animation exactly.

* When using soft constraints it is recommended that you choose __Target Strength__ as low as possible without making the constrained simulated points diverge too much from the animation. Pick the lowest value that will give you good looking results. Picking excessively large values will do the job in theory, but this is not recommended in practice because this may adversely affect the performance and robustness of the solver. When a near exact match is needed instead of a loose match, hard constraints may often a more practical option.

* Lumped soft constraints are soft constraints where the force is concentrated in individual points instead of being distributed over the entire continuum of the Solid or Hybrid Object. Such constraints can be created by putting down an Finite Element Target Constraints and setting its __Type__ to SOFT. When the SOFT type is used, the parameters under the Soft Controls tab can be used to control the strength of the soft constraints. The higher the __Target Strength__, the larger the forces on the constrained points will be an the closer the simulation will try to match the animation. The __Target Damping__ may need to be fine tuned in order to prevent the soft constraints from overshooting and oscillating around the target positions. Lumped soft constraints are the preferred option when a discrete selection of points need to be constrained (instead of a smooth region). An example use case is when you want to constrain a few corners of a box object.

* Distributed soft constraints are soft constraints that are completely distributed over an entire object. The Solid Object and the Hybrid Object have __Target Strength__ and __Target Damping__ controls. These controls the densities of the soft constraint forces (per cubed unit of length). This is very useful when you want to mix simulation with pre-existing animation, but you don't want any visible artefacts between constrained and unconstrained regions. The solver recognizes point attributes 'targetstrength' and 'targetdamping' that act as multipliers for the corresponding parameters. These can be used to paint a smooth falloff from constrained regions to unconstrained regions.

* In addition to constraints between simulation and animation, there are also constraints that have other simulated points as a goal. For example, the Finite Element Fuse Constraint can be used to connect pairs of points. When this constraint is set to HARD, then each pair of constrained points effectively becomes a single point. This feature may be used to form a single connected object from multiple objects or multiple connected components within a simulated object. In SOFT mode, the stitch constraint acts more like a spring between the points, but without a directional bias.

* Springs between points of simulated objects are supported as well, by means of the SBD Spring constraint.



