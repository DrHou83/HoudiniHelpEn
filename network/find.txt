= Find nodes in a network =

"""How to use the Find dialog to find nodes based on various criteria."""

:task: Open the find dialog:
    In the network editor, choose __Edit > Find__ or press ((Ctrl + F)) or ((/)).

    * Type names or name patterns to search for in the text box at the top of the dialog.

    * Turn on __Ignore case__ to do case-insenstive matches.
    
    * As you type, matching nodes appear in the table at the bottom of the dialog.
    
    * Press ((Enter)) to select all matching nodes, or use the arrow keys or mouse to double-click a node in the results table.

:task: Move through results:
    Once there are search results in the table at bottom of the find dialog, you can use the __Next__ and __Previous__ buttons to select each node in the results.
    
    If the find dialog is closed, you can still move through the search results using:
    
    * __Edit > Next matching node__ and __Edit > Previous matching node__ in the network editor menus.
    
    * ((<)) and ((>))
    
    * ((Ctrl + G)) and ((Ctrl + Shift + G)).

:task: Add search criteria:
    In the find dialog, click __Add filter__ and choose to add a name, parameter value, node state, or node type filter. You can continue to click __Add filter__ to add more search criteria.
    
    * You can choose whether _all_ rows must match or _any_ of the rows can match.
    
    * Click the +(fa-close) button to the right of a row to remove it.


== Tips ==

* The "Parameter" filter searches based on the _evaluated_ value of a parameter. For example, if a parameter contained the expression `$F` (current frame), at frame 1 the evaluated value of the parameter would be `1`.

* The "Raw Parameter" filter searches based on the unevaluated, unexpanded textual content of a parameter. For example, you can search for `$F` to search for parameters that use that variable in an expression.


== Search syntax == (syntax)

You can also use special search syntax in the search field at the top of the dialog. These let you type equivalents of the various search criteria

* Bare words are name substring searches. For example `foo` matches any name containing foo.

    Technically we're just taking the input, putting it inside asterisks, and putting that into the Houdini pattern matching function, so you can use Houdini's pattern matching syntax here.

* To match an exact name, put it in quotes: `"foo"`.

* Use plus and minus to match flags and states. For example, all nodes with the template flag on and no warnings or errors: `+template -warning -error`. Flags/states accept prefixes, e.g.: `+t -warn`.

* Raw parameter search: `tx=$F ty=2 tz=sin`. The operator `~=` uses Houdini pattern matching, for example `file~=$F`.

    If you want to search for a value with spaces, enclose the value in quotes. For example, `label~="The *"`

* Evaluated parameter search: `ty:0 tx:>5 tz:<=0`. The operator `~=` uses Houdini pattern matching, for example `file:~=*foo*`

* You can use `&` ("and"), `|` ("or") for boolean searches, and parenthesis for grouping. For example:  `(ty:0 | ty:-5) | +warning NOT (rx:0 & ry:0)`.

* Prefix a search by node type with an apostrophe: `'objmerge`.
