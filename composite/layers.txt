= Blend or layer images =

<!--
== Overview ==

TBD.
-->

== Useful nodes ==

* The [Layer COP|Node:cop2/layer] is a general purpose compositor, which
  can composite any number of inputs, each with its own compositing
  method.

* You can also use specific operators for each method on pairs of inputs
  (with the [Over COP|Node:cop2/over], [Add COP|Node:cop2/add],
  [Multiply COP|Node:cop2/multiply], etc.).

* The [Blend COP|Node:cop2/blend] blends between its two inputs. It can
  blend with a constant value, or based on a  [mask|/composite/masks] .

  [Image:/images/blend_mask.jpg]

* The [Wipe COP|Node:cop2/wipe] lets you quickly set up common wipe
  patterns. For complete control over a wipe, use an animated
  [matte|/composite/mattes]  to mask a blend.

NOTE:
    See  [compositing methods|layers]  for an explanation of the
    different compositing methods available for combining images, such
    as _over_, _add_, and _multiply_.

== Compositing methods ==

table>>
    tr>>
        td>>[Image:/images/comp_a.png]
        td>>Original image *A*
    tr>>
        td>>[Image:/images/comp_b.png]
        td>>Original image *B*
    tr>>
        td>>[Image:/images/comp_method_1.png]
        td>>A *over* B
    tr>>
        td>>[Image:/images/comp_method_2.png]
        td>>A *under* B
    tr>>
        td>>[Image:/images/comp_method_3.png]
        td>>A *atop* B
    tr>>
        td>>[Image:/images/comp_method_4.png]
        td>>A *inside* B
    tr>>
        td>>[Image:/images/comp_method_5.png]
        td>>A *outside* B
    tr>>
        td>>[Image:/images/comp_method_6.png]
        td>>A *screen*-ed over B.

            "Saturating add". Screening brightens the second image based
            on the luminosity of the first image. Where the first image
            is black, the second image will not be brightened at all.
            Where the first image is white, the second image will be
            white. Screen does not work well with HDR images.
    tr>>
        td>>[Image:/images/comp_method_7.png]
        td>>A *add*-ed to B.

            This simply adds the color values of the two images
            together.
    tr>>
        td>>[Image:/images/comp_method_8.png]
        td>>A *subtract*-ed from B.

            This simply subtracts the color values of A from B.
    tr>>
        td>>[Image:/images/comp_method_9.png]
        td>>A *diff* B

            This takes the _absolute_ value of subtracting A from B.
    tr>>
        td>>[Image:/images/comp_method_10.png]
        td>>A *multiply* by B.

            This simply multiplies the color values of A and B.
            Multiplying with a grayscale  [matte|/composite/mattes]  is the
            same as  [masking|/composite/masks] .
    tr>>
        td>>[Image:/images/comp_method_11.png]
        td>>A *min* B

            Takes the minimum of A and B.
    tr>>
        td>>[Image:/images/comp_method_12.png]
        td>>A *max* B

            Takes the maximum of A and B.
    tr>>
        td>>[Image:/images/comp_method_13.png]
        td>>A *average* B

            Takes the average of A and B.
    tr>>
        td>>[Image:/images/comp_method_14.png]
        td>>A *Xor* B

            The union of A and B, except where A and B overlap.


