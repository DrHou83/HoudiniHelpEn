= Top ten advanced things about dynamics =

== Unique IDs, object ids, and object names == (objectids)

Each object and data item has a _universally unique ID_. This 128-bit number is unique across all simulations on all machines for all time. You can use this value to tell when data packets are being shared and/or recreated at each time step. The unique ID is displayed as a field on objects and data items in the details view.

Each object has an _object ID_. This is a simple integer that uniquely identifies an object _in this simulation_. Unlike the universally unique ID, it is _not_ unique across different simulation networks, computers, simulation runs, etc.

Each object also has an _object name_. Object names are essentially a convenience --- you can set up names so they are easier to remember and recognize than the simple object ID number. Object names are _not_ unique, even within the same simulation: multiple objects can have the same name (this may even be useful in some circumstances).

In object creation nodes (such as [RBD Object|Node:dop/rbdobject] or [Empty object|Node:dop/emptyobject]), the __Object name__ parameter controls the name of the created object. If you also use the __Number of objects__ parameter to create multiple objects at once, you can use the `$OBJ` local variable to append the created object number to the name. For example, if __Object name__ is `brick$OBJ` and __Number of objects__ is 3, Houdini would create objects named `brick0`, `brick1`, `brick2`.

The details view normally shows objects by their names, but you can switch it to show object IDs instead.

== Rendering with motion blur can change the results ==

Rendering with motion blur will cause the simulation to be evaluated at shutter open (frame number - shutter time) and shutter close, for example frame 1.7 and 2. This forced sub-stepping can change the results of the simulation.

To fix this, you can [cache the simulation to disk|cache] and use a [Timeblend geometry node|Node:sop/timeblend].

== Data names ==

Each object and piece of data has a _data name_. Solvers look for data on objects _by name_. For example, the RBD solver will look for a data folder on an object called `Forces`, and use any force data it finds inside to change the object's position.

Since nodes attach data by name, if you tried to use more than one node of the same type, such as two [Fan forces|Node:dop/fan], one would overwrite the data of the other if they both attached data as `Forces/Fan`. So Houdini has the __Unique data name__ option that adds a bit of text to the data name to make it unique.

[Image:/images/dynamics/unique_data_name.png]

For example, in this network:

[Image:/images/dynamics/network_uniquenames.png]

...as long as the two Fan Force nodes have __Unique data name__ on, the RBD Object will have two separate pieces of force data attached to it: `Forces/Fan_fan1` and `Forces/Fan_fan2`. Since the solver uses any force it finds under the `Forces` folder, this works out fine.

You can turn off __Unique data name__ if you really want later nodes to override the data of earlier nodes with the same name. This may be useful if you animate the activation of the earlier and later nodes, for example to switch between the settings/positions of two different fan force nodes. The nodes will be evaluated left to right, top to bottom. You can also use the "set" pop-up menu (see below) for more control over how one node overrides another using the same data name.

== Data sharing ==

- For each piece of data, Houdini can attach a new _copy_ of the data per object, or _share_ the same piece of data between objects.
- At each time step, Houdini creates a new copy of every object in the simulation.
- For each piece of data, Houdini can create a new copy of the data per timestep, or share the same piece of data across timesteps.

The __Data sharing__ option controls sharing of data between objects and across timesteps.

[Image:/images/dynamics/data_sharing.png]

No sharing:
    Houdini does not share the data between objects, and it creates new copies of the data for each new timestep.

    [Image:/images/dynamics/shared_data_none.png]
    
Share data across timestep:
    Within each timestep, the data is shared by all objects using the same data name, but a new copy of the data is created for each timestep.
    
    Use this option for data whose value you know is _not_ dependent on any information about the object it's attached to.

    [Image:/images/dynamics/shared_data_timestep.png]
    
Share data across all time:
    The data is shared by all objects using the same data name, _and_ across all timesteps.
    
    Use this option for data whose value you know is _not_ dependent on any information about the object it's attached to _or_ time (that is, it's identical for all objects and constant for the entire length of the simulation). For example, gravity could usually be shared across all time.

    [Image:/images/dynamics/shared_data_alltime.png]

The default is *no sharing* because this gives the most predictable results. However, if you know that data can be shared between objects or across all time safely, you can decrease the amount of memory the simulation uses by using the sharing options. If you know there are places where you can share data that would otherwise be copied onto tens of thousands of objects at each timestep, you can potentially decrease the amount of memory used by the simulation noticeably.

== Groups ==

You can create groups of objects in the simulation using the [Group node|Node:dop/group], just like you can create groups of particles in a particle network and groups of faces in a geometry network.

You can include objects in a group by their [object ID or object name|#objectids]. You can also include other groups by their group name.

Groups have three uses/effects in a dynamics simulation:

* You can set up groups so you can refer to a set of objects by their group name, instead of using complicated masks.

* Technically, affector relationships exist between groups, not individual objects.

* Because objects in a group affect each other, everything inside a group must always be solved simultaneously.

== Collision representations ==

The [Houdini RBD solver|rbd] supports two types of collision representations: _volume_ and _thin-plate_. Use volume-based collisions for normal objects, and thin-plate collisions for objects without volume.

Volume-based collision detection creates a _volume representation_ of each object. You can [visualize the volume representation of an object|visualize] and control how it is created with the options on the __Volume__ tab on the __Collision__ tab of an object's parameters.

To detect collisions, Houdini intersects the _surface representation_ of one object with the volume representation of the other object, and vice versa.

The default surface representation for geometry is just the object's points. This works well with dense geometry, but doesn't work well if an object has sharp edges or not many points. Alternatively, you can use _edges_ to represent the surface. In an object's parameters, click the __Collisions__ tab, then click the __Surface__ tab and set __Surface representation__ to "Edges".

Edge representation is more expensive than using points, and for most complicated models it's unnecessary overkill. However, for certain geometry types, such as a cube without points on the faces, you will need to use edges.

If your object has no volume (such as pieces of paper and ground planes), turn off __Use volume based collision detection__ on the object's __Collision__ tab to have Houdini treat it as a thin surface.

If a thin plate object collides with a volume-based object, it uses volume-based collision. However, if two thin-plate objects collide, Houdini uses a per-triangle collision test.

Thin-plate objects do not stack well. If you need to stack them up, you should increase the minimum number of sub-steps on the DOP Network container node.


