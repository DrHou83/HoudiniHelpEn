= Reading attributes =

#type: vexsuite


@suite

== Without existence check == (unchecked)

These functions return the attribute value if the given detail/primitive/point/vertex exists and has the given attribute, or a zero/empty value otherwise.

If you need to distinguish between the attribute value actually being zero/empty vs. the function returning zero/empty value because the attribute didn't exist, use the [checked versions|#checked] below.

::[Vex:attrib]
::[Vex:detail]
::[Vex:prim]
::[Vex:point]
::[Vex:vertex]


== With existence check == (checked)

These functions take an additional argument. The functions will overwrite the integer variable you pass to this argument with `1` if the read succeeded or `0` if it failed. This lets you distinguish when the function returns `0` because the attribute value is actually zero, or because the read failed.

If it doesn't matter in your code whether the attribute doesn't exist or is actually `0`, using the [unchecked versions|#unchecked] above is slightly easier because you don't have to create the variable to overwrite.

::[Vex:getattrib]
::[Vex:detailattrib]
::[Vex:primattrib]
::[Vex:pointattrib]
::[Vex:vertexattrib]


@examples

{{{
#!vex
// Get the value of the "uv" attribute for the detail.
vector uv = detail("defgeo.bgeo", "uv");
}}}

{{{
#!vex
// Get the value of the "Cd" attribute for primitive 7
// in the SOP specified by the path "/obj/geo1/color1" (Houdini
// only)
vector clr = prim("op:/obj/geo1/color1", "Cd", 7);
}}}

{{{
#!vex
// Get the position of point 3 in "defgeo.bgeo"
vector pos = point("defgeo.bgeo", "P", 3);
}}}

{{{
#!vex
// Get the value of the "uv" attribute for vertex 2 of primitive
// number 3 in the file defgeo.bgeo
vector uv = vertex("defgeo.bgeo", "uv", 3, 2);
}}}





