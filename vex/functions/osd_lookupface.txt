= osd_lookupface =

#type: vex
#context: all
#tags: subd
#group: subd

"""Outputs the Houdini face and UV coordinates corresponding to the given coordinates on an OSD patch."""

:usage: `int osd_lookupface(<geometry>, int patch_id, float patch_u, float patch_v, int &face_id, float &face_u, float &face_v)`

    If you don't specify a texture attribute, the function uses intrinsic polygon interpolants.

:usage: `int osd_lookupface(<geometry>, int patch_id, float patch_u, float patch_v, int &face_id, float &face_u, float &face_v, string attribute)`

    If you specify a texture attribute, the function uses the UVs in that attribute to translate the patch coordinates onto the Houdini geometry.

Each polygon in a piece of geometry will generate one or more Catmull-Clark subdivision patches.  A quadrilateral will generate a single patch, while a pentagon will generate five patches.  This function helps map between the subdivision patch id and the Houdini polygon (face). The reverse function to map from face to patch is [Vex:osd_lookuppatch].

[Include:_common#geometry]

:arg:`patch_id`:
    The ID number of the OSD patch.

:arg:`patch_u`, `patch_v`:
    The coordinates in the subdivision patch to map onto a Houdini primitive. These values should be in the range 0 to 1.

:arg:`&face_id`:
    The function overwrites this variable with the Houdini primitive number of the corresponding face.

:arg:`&face_u`, `&face_v`:
    The function overwrites these variables with the corresponding U/V coordinates on the Houdini face. The output coordinates will have values in the range 0 to 1.

:returns:
    `1` on success or `0` on an error.


@examples

{{{
#!vex

void
scatterOnLimitSurface(string file, texmap; int npts)
{
    int npatches = osd_patchcount(file);
    for (int i = 0; i < npts; ++i)
    {
        int patch_id = nrandom() * npatches;
        float patch_s = nrandom();
        float patch_t = nrandom();
        int face_id;
        float face_u, face_v;
        if (osd_lookupface(file, patch_id, patch_s, patch_t, face_id, face_u, face_v, "uv"))
        {
            vector clr = texture(texmap, face_u, face_v);
            vector P;
            osd_limitsurface(file, "P", patch_id, patch_s, patch_t, P);
            addpoint(P, clr, face_id);        // add a scattered point.
        }
    }
}

}}}


@related

- [Vex:osd_lookuppatch]
- [Vex:osd_patchcount]
- [Vex:osd_facecount]
- [Vex:osd_firstpatch]
- [Vex:osd_limitsurface]
