= sample_light =

#type: vex
#context: displace fog surface
#tags: sampling, light, pbr
#group: sampling

"""Samples a 3D position on a light source and runs the light shader at that point."""

:usage: `int sample_light(int lightid, vector pos, vector sam, float time, vector &pos, vector &clr, float &scale, ...)`

:arg:lightid:
    An integer identifying a light. You can get a list of light IDs for lights affecting the currently shaded surface with [Vex:getlights].

:arg:pos:
    The surface point from which lights should be sampled.  Area light sources will attempt to distribute samples by solid angle from the position - that is, light geometry that is closer to the position will receive more samples.

:arg:sam:
    A vector of random values, such as those generated by [Vex:nextsample]. Currently only the first 2 components of `sam` are used.  Different values of `sam` translate into different random positions on the geometry of the light source.

:arg:time:
    Time to shade at.

The function modifies the values of the following arguments:

:arg:pos:
    The sampled position on the light source.

:arg:clr:
    The light color set by the light shader.

:arg:scale:
    The light average hemispherical intensity (for area lights).

:returns:
    A [component bitmask|bouncemask] indicating what types of component bounces the light affects.

TIP:
    If you are using [Vex:sample_light] to generate light colors, for example
    to reproduce the `Cl` values that would be produced by a [Vex:illuminance]
    loop, you will need to normalize `clr` to `scale`:

    {{{
    #!vex
    clr *= scale / luminance(clr);
    }}}


@related

- [Vex:getlights]
- [Vex:intersect_lights]
- [Vex:nextsample]
