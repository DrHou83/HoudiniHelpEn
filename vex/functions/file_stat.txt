= file_stat =

#type: vex
#context: all
#group: file

"""Returns file system status for a given file."""

:usage: `int file_stat(string filename, int &stat_data[], ...)`

    Overwrites an integer array with data representing the file system
    information for the given file.

    *Do not use this function*. The `file.h` include file has [more convenient versions of this function|#better] which return a struct.

:varg:`usecache`:
    #type: int
    #default: 0
    
    If this option is on, the function will use a persistent cache to store results of the function.  The cache is persistent over the entire run of the application.

:returns:
    `1` if the path is valid or `0` otherwise.


== Better file_stat functions == (better)

Instead of using the built-in `file_stat`, add this line at the top of the file:

{{{
#!vex
#include <file.h>
}}}

Then use the `file_stat` or `cached_file_stat` functions from that file. They take a file path string and return a struct with the following members:

`.st_size` |
    The size of the file in bytes.

`.st_sizemb` |
    The size of the file in megabytes.

`.st_mtime` |
    The last modified time of this file.

`->isValid()` |
    Return 1 if the file path refers to a valid file.

`->isFile()` |
    Returns 1 if the file path refers to a file (rather than a directory).

`->isDir()` |
    Returns 1 if the file path refers to a directory (rather than a file).

`->isRead()` |
    Returns 1 if the file is readable.

`->isWrite()` |
    Returns 1 if the file is writable.

`->isExecute()` |
    Returns 1 if the file is executable.


@examples

{{{
#!vex
#include <file.h>

int file_size(string name)
{
    stat	info(name);
    return file_stat(name)->st_size;
}

int file_exists(string name)
{
    // Use cached file_stat() results
    return cached_file_stat(name)->isValid();
}

int file_isdir(string name)
{
    return file_stat(name)->isDir();
}
}}}
