= diffuse =

#type: vex
#context: all
#tags: shading, pbr, bsdf
#group: bsdf

"""Returns a diffuse BSDF or computes diffuse shading."""

[Image:/images/rendering/diffuse.png]

:usage: `bsdf diffuse(...)`
:usage: `bsdf diffuse(float roughness, ...)`
:usage: `bsdf diffuse(vector nml, ...)`
:usage: `bsdf diffuse(vector nml, float roughness, ...)`
:usage: `bsdf diffuse(vector nml, vector geo_normal, ...)`
:usage: `bsdf diffuse(vector nml, vector geo_normal, float roughness, ...)`

    Diffuse reflections. This BSDF has an albedo of 0.5. If your shader or
    geometry has smooth normals (N and Ng differ) you should avoid the
    signature `diffuse(vector nml)` since it assumes that the
    shading normal matches the geometric normal.

    See [writing a PBR shader|/vex/pbr] for information on BSDFs.

:usage: `vector diffuse(vector nml, ...)`
:usage: `vector diffuse(vector nml, vector V, float roughness, ...)`

    This form uses the
    Oren-Nayar lighting model to compute the diffuse illumination for the
    surface. The Oren-Nayar lighting model is a more sophisticated lighting
    model than Lambertian lighting. The V vector represents a vector from
    the surface to the eye (i.e. -normalize(I)). With a roughness of 0, the
    Oren-Nayar lighting model is equivalent to the Lambertian model. As
    roughness increases toward 1, the illumination changes to mimic rougher
    materials (like clay). The Oren-Nayar form of diffuse() is more
    expensive than Lambertian diffuse lighting.

[Include:_lightmask_variadic]


@related

- [Vex:wirediffuse]
- [Vex:translucent]
- [Writing a PBR shader|/vex/pbr]
