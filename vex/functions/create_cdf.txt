= create_cdf =

#type: vex
#context: all
#tags: pbr, bsdf, sampling
#group: sampling

"""Creates a CDF from an array of input PDF values."""

:usage: `float[] create_cdf(float pdf[])`

Create a CDF for the input `values` PDF and return it as an array.

:arg:pdf:
    Array of PDF values to create the CDF for.

CDFs are useful when sampling from distributions. For example, a CDF of
light source power could be created. This would allow sampling
of lights with a probability based on power. This is an example of a
discrete CDF, where sampling selects among a fixed set of probabilities.
Such a CDF could be created as follows:


@examples

{{{
#!vex
// Iterate over all lights, sampling their power
int[] li = getlights();
float values[];
resize(values, len(li));
int nsamples = 256;
int sid = israytrace ? SID : newsampler();
vector s, pos, clr;
float scale;
for (int i = 0; i < len(li); i++)
{
    for (int j = 0; j < nsamples; j++)
    {
        nextsample(sid, s.x, s.y, "mode", "nextpixel");
        sample_light(li[i], P, s, Time, pos, clr, scale);
        values[i] += luminance(clr);
    }
    values[i] /= nsamples;
}

// Create a CDF of the power distribution
float cdf[] = create_cdf(values);

// Randomly select a light based on power distribution
nextsample(sid, s.x, s.y, "mode", "nextpixel");
int index = 0;
sample_cdf(cdf, s.x, index);

// Do something with the selected light
// li[index] ...
}}}

@related

- [Vex:create_pdf]
- [Vex:sample_cdf]
