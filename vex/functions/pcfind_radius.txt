= pcfind_radius =

#type: vex
#context: all
#tags: ptcloud, proximity
#group: ptcloud

"""Returns a list of closest points from a file taking into account their radii."""

:usage: `int[] pcfind_radius(<geometry>, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)`
:usage: `int[] pcfind_radius(<geometry>, string ptgroup, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)`

[Include:_common#geometry]

These functions open a geometry file and return a list of points with the
location <<P>> within <<radius>>, based on point positions found in
<<Pchannel>>.  Each of the points will be expanded by their <<RadChannel>>
attribute, which will be dilated by <<radscale>>.

Using a radius channel allows intersection detection between spheres of varying radii.  In this case you cannot use only your own sphere radius, as the intersecting sphere may have a much larger radius so not be in your search window.  Because of this, it is also sensible to use a 0.0 <<radius>> with this function just find all the source spheres that your query position is inside of.

Only the <<maxpoints>> closest points within the given radius
will be returned. The file name may use the `op:` syntax to reference SOP
geometry in the OP contexts.  The <<Pchannel>> parameter indicates the
attribute which contains the positions to be searched.

The <<ptgroup>> is a point group that limits the points to search.  This is a [SOP-style group pattern|/model/groups#manual], so can be something like `0-10` or `@Cd.x>0.5`.  A blank string is treated as matching all points.

NOTE:
    The radius attribute and radius scale apply to the points being searched, not to the point you are doing the searching with!

NOTE:
    If the radius attribute does not exist, this becomes equivalent to `pcfind`.


@examples

Performing a proximity query:

{{{
#!vex
int[] closept = pcfind_radius(filename, "P", "pscale", 1.0, P, maxdistance, maxpoints);
P = 0;
foreach (int ptnum; closept)
{
vector closepos = point(filename, "P", ptnum);
P += closepos;
}
P /= len(closept);
}}}


@related

- [Vex:nearpoint]
- [Vex:nearpoints]
- [Vex:pcfind]

