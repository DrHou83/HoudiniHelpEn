= Noise and randomness =

== Noise generators ==

You can generate noise with the [Vex:noise],
[Vex:wnoise], [Vex:vnoise], [Vex:onoise],
[Vex:snoise], and [Vex:anoise] functions.

Each represents a different algorithm for generating noise. This
allows you to make speed tradeoffs between different methods, as
well as ensure comparability with noise values generated through
other or older methods.

The relative costs for computing noise of different types is
roughly:

table>>
    tr>>
        th>> Noise type
        th>> Relative cost
    tr>>
        td>>
            Perlin noise ([noise|Vex:noise])
        td>> 1.0
    tr>>
        td>>
            Original perlin noise ([onoise|Vex:onoise])
        td>> 1.1
    tr>>
        td>>
            Worley noise ([wnoise|Vex:wnoise])
        td>> 1.8
    tr>>
        td>>
            Sparse Convolution noise ([snoise|Vex:snoise])
        td>> 2.1
    tr>>
        td>>
            Alligator noise ([anoise|Vex:anoise])
        td>> 2.3

== Random number generators ==

[Vex:random] generates a random number based on the position
in N dimensional space (where N is 1 to 4 dimensions). Unlike the
noise functions which smoothly interpolate the random values between
integer lattice points, the random functions do not. The random()
functions are very efficient ways of doing something like:
`noise(floor(position))`

[Vex:hscript_rand] produces the exact same results
as the Houdini rand() expression. This function will generate
different random values for every floating point seed. This is
different from [Vex:random] which converts the floating point
argument to an integer seed. [Vex:hscript_rand] may
produce different results on different hardware or operating
systems.

[Vex:nrandom] is a non-deterministic random number
generator. Numbers generated will be between 0 and 1. These
functions will generate the same sequence of random numbers if
called in precisely the same order. However, there is no seed
involved so it is not possible to reproduce the same random number
or sequence multiple times.


