#type: vexcontext

= surface =

"""Define a surface shader with a program that sets the final color,
opacity, and alpha of a surface being rendered."""

In non-PBR shading, the surface shading context's purpose is to set
the final color, opacity and alpha of the surface being rendered.
If the Of and Af variables are not set, they will default to 1.
If the Af variable is not set, it will resolve to avg(Of).
It is possible to set the Af variable to any arbitrary value,
making it possible to build matte/cutout shaders.


@globals

::Cf:
    #type: vector
    
    Final color for the surface. The vector represents the RGB color.

::Of:
    #type: vector
    
    Final opacity for the surface. A value of {1,1,0} will be opaque in
    red/green, but let through blue light from behind. See
    [opacity vs. alpha|/vex/contexts/shading_contexts#opacity].

::Af:
    #type: float
    
    Final alpha for the surface. This is the value which is placed in
    the alpha channel of the output image. See
    [opacity vs. alpha|/vex/contexts/shading_contexts#opacity].

::P:
    #type: vector
    #mode: r
    
    Position of the point on the surface being shaded. In light or
    shadow shaders, the P variable contains the point on the light
    source.

::Pz:
    #type: float
    #mode: r
    
    Z component of the point being shaded.

::I:
    #type: vector
    #mode: r
    
    Direction from the eye to the point being shaded. This may or may
    not be a normalized vector.

::dPds:
    #type: vector
    #mode: r
    
    Change in position with respect to the parametric s.

::dPdt:
    #type: vector
    #mode: r
    
    Change in position with respect to the parametric t.

::N:
    #type: vector
    
    Shading normal for the surface.

::Ng:
    #type: vector
    #mode: r
    
    Geometric normal for the surface. This normal represents the "true"
    normal of the surface being shaded. For example, with Phong shading,
    the N variable represents the interpolated normal, while the Ng
    variable represents the true polygon normal.

::Cl:
    #type: vector

    Light color.

::L:
    #type: vector
    #mode: r
    
    Vector from the point on the surface to the light source. The length
    of this vector represents the distance to the light source.

::Eye:
    #type: vector
    #mode: r
    
    Position of the eye.

::s:
    #type: float
    #mode: r
    
    Parametric s (sometimes called u) coordinate of the surface being
    shaded.

::t:
    #type: float
    #mode: r

    Parametric t (sometimes called v) coordinate of the surface being
    shaded.

::Time:
    #type: float
    #mode: r

    The time at which the shading occurs, as a number from 0 (shutter
    open) to 1 (shutter close).
    
::dPdz:
    #type: float
    #mode: r
    
    Floating point step size for volume rendering.
    
::F:
    #type: bsdf
    #mode: w
    
    Output bsdf for physically based rendering
    (see [how to write a PBR shader|/vex/pbr]).

::SID:
    #type: int
    #mode: r
    
    Sample identifier for the current shading sample.


@subtopics Functions

:list:
    #query: type:vex context:surface



