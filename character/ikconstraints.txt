= IK constraints =
#parent: riggingconstraints

The [Icon:OBJ/bone][Inverse Kin CHOP|Node:chop/inversekin] provides many vector constraints. One type of IK constraint is the __Twist Affector__ on the [Inverse Kin CHOP|Node:chop/inversekin]. This constraint is used to direct where the first bone points. You can also blend between IK and FK rotations by modifying the __Blend__ slider on the [Inverse Kin CHOP|Node:chop/inversekin].

== Blend between multiple IK goals ==

This setup lets you have multiple IK goals for a bone chain, living in
different spaces, so the animator can blend between them depending on
her needs at a particular moment. For example, you can set up a hand to
be pose-able in character space or shoulder space.

There are advantages and disadvantages to overriding the default Houdini
style of one goal per bone chain. See [approaches to
rigging|riggingapproaches] .

steps>>
    #  [Create a bone chain|drawbones] with IK.

    #  [Create two Nulls|/model/nulls] and parent each one to a
      different space you want to blend between. For example, parent one
      to the shoulder and one to the character root Null.

    # Create a [Blend object|Node:obj/blend] and connect the two new
      Null objects to its inputs.

    # Parent the default goal Null created for the bone chain (e.g.
      `chain_goal1"` to the Blend node.)

    # The Blend node has separate __Weight__ sliders for each input,
      letting you mix them arbitrarily. In a two-parent scenario
      however, you probably only want one slider control that blends
      between the two inputs. To do that, you need to link the second
      slider to the first slider so it automatically goes down/up as the
      other goes up/down.

      Press ((RMB)) on the first slider's value and choose __Copy
      Parameter__. Then press ((RMB)) on the second slider's value and
      choose __Paste Relative Reference__. Houdini inserts a parameter
      reference expression to the first slider. Finally, to make the
      second slider invert the value of the first slider, insert `1-` in
      front of the expression.

TIP:
    Make the first __Weight__ slider of the Blend node into a  [HUD
    slider|/basics/handles]  to make it easily available as a control for
    animators.