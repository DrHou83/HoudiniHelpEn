= About Grains =

"""Grains uses Position Based Dynamics to simulate grains of sand and other granular matter."""

The main advantages of Position Based Dynamics (PBD) are its simplicity and controllability: unlike sophisticated solvers such as FLIP and FEM, PBD uses only positional constraints to determine the movement of the points in the system. It resolves penetrations by projecting points to valid locations. This completely avoids the overshooting problems common in force based solvers. It handles collision constraints easily, and is useful for simulating sand and snow.

PBD is often used in games because there is little variance from frame to frame in simulations times. For example, if frame 2 takes 30 seconds, frame 120 will most likely take the same amount of time, assuming there are no additional particles or constraints.

:vimeo: Dry sand
    #id: 116602069
    #keywords: dry sand tool, grains shelf set, particle separation, open CL support, constraint iterations, scale kinetic

:vimeo:Wet sand
    #id: 116602271
    #keywords: wet sand tool, grains shelf set, static object, particle separation, openCL support, constraint iterations, scale kinetic, clumping weight, stiffness

You can use use PBD to simulate a floppy "bag of stuff" look, such as a bean bag chair or a stuffed animal.

:vimeo:Granular solid
    #id: 116886314
    #keywords: granular solid tool, grains shelf set, particle separation, explicit constraints, point-constrained network, stiffness, internal collisions, shock scaling power, openCL support, shock axis, friction

You can use PBD to simulate a stringy objects, such as a string of pearls or a necklace. You can simulate sheets of particles to create a fast cloth-like look.

:vimeo:Granular strands and sheets
    #id: 116909125
    #keywords: granular solid tool, grains shelf set, particle separation, explicit constraints, point-constrained network, stiffness, internal collisions, shock scaling power, openCL support, shock axis, friction

== Grains vs traditional POPs ==

The advantage of the [POP Grains|Node:dop/popgrains] over regular POPs is that it allows particles to stack. For a simple sand storm, POPs may be sufficient. However, to create footprints in the sand or crumble a sand castle, you will need to use [POP Grains|Node:dop/popgrains]. Using grains doesn't exclude the ability to take advantage of POPs. You can first use [POP Grains|Node:dop/popgrains] to create physical realism to the movement of sand, then apply typical POP nodes to art-direct that motion.

Unlike POPs, which use forces to prevent particles from penetrating, grains use the PBD approach to directly move the particles apart. In addition to being able to stack, this approach allows for a more stable enforcement of the constraints without the sort of explosions that very high forces would produce.

== PBD vs FEM == (PBDvsFEM)

The Particle Based Dynamics grain solver uses a set of constraints between pairs of grains. These constraints express the rest distance between pairs of points, and PBD enforces these constraints to preserve their shape during the simulation. The solver works primarily in terms of point positions. The main advantages of the PDB approach are the consistently fast solve speed and the ability to change point positions directly. You would primarily want to use this for simulating bouncy objects with elastic energy, or background objects.

The finite element solver is based on a physical model, which includes stresses based on strain and volume preservation. The solver works primarily by solving systems of forces and partial derivatives of forces. The main advantages of the finite element approach are the realism of the physically-based simulation and the predictability of the material behavior for varying mesh resolutions and substep sizes. You would primarily want to use this for detailed, physically accurate objects.

== Grain Tools ==

Use the tools on the [Grains shelf tab|/shelf/grains] to turn objects into grains of sand.

[Icon:SHELF/dry_sand] |
    #width: 56px
    
    [Dry Sand|/shelf/drysand] |
        Creates a grain object from a piece of geometry.

[Icon:SHELF/wet_sand] |
    [Wet Sand|/shelf/wetsand] |
        Creates a grain object from a piece of geometry, with a clumpy wet look.
        
[Icon:SHELF/sandbox] |
    [Sand Box|/shelf/sandbox] |
        Creates a patch of sand with a collision object which contains the sand.

[Icon:SHELF/rbd_grains] |
    [RBD Grains|/shelf/rbdgrains] |
        Fills an object with spheres and uses the Bullet solver to drive them.

[Icon:SHELF/sand_upres] |
    [Upres Sand|/shelf/upressand] |
        Takes each particle from your original simulation and replaces each one with a cluster of new ones.

[Icon:DOP/sandobject] |
    [Granular Solid|/shelf/granularsolid] |
        Fills an object loosely with grains and creates constraints to hold it together into one object.

[Icon:SHELF/sand_sheet] |
    [Granular Sheet|/shelf/granularsheet] |
        Fills the surface of an object with densely packed grains and makes constraints to hold them together.

[Icon:SHELF/sand_strand] |
    [Granular Strand|/shelf/granularstrand] |
        Fills grains along the edges of polygons, creating a beaded wire effect. 
        
[Icon:POP/sleep] |
    [Auto-Sleep Particles|/shelf/autosleep] |
        Allows grains to wake up and go to sleep based on the velocity of nearby particles.
        
[Icon:POP/awaken] |
    [Awaken By Geometry|/shelf/awakenbygeometry] |
        Activates particles near animated geometry. 