= Changing the behavior of grains =

For more information, see [How to simulate a stable pile of sand without grid patterns|/grains/stablepile].

:task: Make objects break apart:
        Use the controls in the __Explicit Constrains__ section of the [POP Grains|Node:dop/popgrains] node. Turning on the __Break Constraints__ checkbox and setting a __Break Threshold__, will make objects break apart when forces are applied.  If the constraints stretch beyond the threshold, the bonds will break apart.

:task: Make granular solid objects less bouncy:
        Increase the __Stiffness__ parameter in the __Explicit Constrains__ section of the [POP Grains|Node:dop/popgrains] node. This will control how stiff the bonds between particles are.

:task: Create fluffy piles that look like snow:
        Increase the __Shock Scaling Power__ on the [POP Grains|Node:dop/popgrains] node to tame the initial bounce and create fluffier piles that almost look like snow.

:task: Set the height of your sand pile:
        Use the __Constraint Iterations__ parameter on the [POP Grains|Node:dop/popgrains] node to control how many particles high you want the pile to be. This is set relatively low by default for speed purposes.

:task: Make your simulation faster:
        Turn on the __Use OpenCL__ toggle on the __Solver__ tab of the [POP Grains|Node:dop/popgrains] node. This may make things really fast, but it only supports a subset of features. The OpenCL code path operates on all PBD particles, not just the ones in this stream, which is only an issue if you have more than one [POP Grains|Node:dop/popgrains] node in your network.
        
:task: Create continuous streams:
        Turn on the __Remove Overlapping__ option on the [POP Source|Node:dop/popsource] node. Creating new particles where particles already exist will generate explosions.
        
:task: Stop grains from bouncing/exploding:
        * Increase iterations. However, more iterations will make your simulation slower.
        
        * __Max Acceleration__ can be altered, but needs to be used with some care.
        
        * Turning off __Enable Mass-Shock Scaling__ will also reduce the bounce, since the higher particles are heavier and won't move as much on the second frame, but your piles will lose stability. 
        
:task: Keyframe particles:
        * Set the `targetP` and `targetstiffness` attributes on a per-particle basis to create a sort of pin constraint. This is done as a constraint, so the particle won't necessarily end up at `targetP` every frame, it will just try to get there. This is useful for soft constraints.
        
        * Set the mass of grain particles to zero (`mass == 0`). They will stop responding to external forces and the PBD update, giving you complete control over their motion. If you are driving their positions from external animation, remember to set their velocities correctly.
        
:task: Pin a PBD simulation:
        Set the mass of the particles to 0.